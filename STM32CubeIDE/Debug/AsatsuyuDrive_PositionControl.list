
AsatsuyuDrive_PositionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800cf88  0800cf88  0001cf88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d490  0800d490  0002085c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d490  0800d490  0001d490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d498  0800d498  0002085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d49c  0800d49c  0001d49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000085c  20000000  0800d4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  2000085c  0800dcfc  0002085c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  0800dcfc  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00030ce9  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000659c3  00000000  00000000  00051575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008a6c  00000000  00000000  000b6f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002048  00000000  00000000  000bf9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010a1b3  00000000  00000000  000c19f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00005018  00000000  00000000  001cbba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00021b30  00000000  00000000  001d0bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002e9f4  00000000  00000000  001f26f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fa  00000000  00000000  002210e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b9c  00000000  00000000  002211e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000085c 	.word	0x2000085c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf70 	.word	0x0800cf70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000860 	.word	0x20000860
 800021c:	0800cf70 	.word	0x0800cf70

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc2:	f003 fd0b 	bl	80049dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f009 ff55 	bl	800ae74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f000 fa13 	bl	80013f4 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	2000085c 	.word	0x2000085c
  ldr r2, =_sidata
 8000fdc:	0800d4a0 	.word	0x0800d4a0
  ldr r2, =_sbss
 8000fe0:	2000085c 	.word	0x2000085c
  ldr r4, =_ebss
 8000fe4:	20000f1c 	.word	0x20000f1c

08000fe8 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <BusFault_Handler>
	...

08000fec <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000fec:	4a02      	ldr	r2, [pc, #8]	; (8000ff8 <DAC_Init+0xc>)
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 8000ff6:	4770      	bx	lr
 8000ff8:	50000800 	.word	0x50000800

08000ffc <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000ffc:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000ffe:	2200      	movs	r2, #0
 8001000:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001004:	f003 fa8e 	bl	8004524 <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8001008:	4908      	ldr	r1, [pc, #32]	; (800102c <DAC_Exec+0x30>)
  SET_BIT(DACx->SWTRIGR,
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <DAC_Exec+0x34>)

  MODIFY_REG(*preg,
 800100c:	684b      	ldr	r3, [r1, #4]
 800100e:	b200      	sxth	r0, r0
 8001010:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001018:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800101c:	4318      	orrs	r0, r3
 800101e:	6048      	str	r0, [r1, #4]
  SET_BIT(DACx->SWTRIGR,
 8001020:	6853      	ldr	r3, [r2, #4]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 8001028:	bd08      	pop	{r3, pc}
 800102a:	bf00      	nop
 800102c:	50000808 	.word	0x50000808
 8001030:	50000800 	.word	0x50000800

08001034 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001034:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001036:	2100      	movs	r1, #0
void SystemClock_Config(void) {
 8001038:	b0a5      	sub	sp, #148	; 0x94
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800103a:	460c      	mov	r4, r1
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800103c:	2238      	movs	r2, #56	; 0x38
 800103e:	a805      	add	r0, sp, #20
 8001040:	f009 ff3c 	bl	800aebc <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001044:	4621      	mov	r1, r4
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	a813      	add	r0, sp, #76	; 0x4c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800104a:	e9cd 4400 	strd	r4, r4, [sp]
 800104e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001052:	9404      	str	r4, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001054:	f009 ff32 	bl	800aebc <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001058:	4620      	mov	r0, r4
 800105a:	f005 fa1b 	bl	8006494 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105e:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001062:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001066:	2403      	movs	r4, #3
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001068:	2155      	movs	r1, #85	; 0x55
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106a:	9205      	str	r2, [sp, #20]
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800106c:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800106e:	2208      	movs	r2, #8
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001070:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001074:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001076:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800107c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001080:	f005 fa8e 	bl	80065a0 <HAL_RCC_OscConfig>
 8001084:	2800      	cmp	r0, #0
 8001086:	d140      	bne.n	800110a <SystemClock_Config+0xd6>
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800108a:	240f      	movs	r4, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2203      	movs	r2, #3
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800108e:	4668      	mov	r0, sp
 8001090:	2104      	movs	r1, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	e9cd 4200 	strd	r4, r2, [sp]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001096:	e9cd 3302 	strd	r3, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800109c:	f005 fcd2 	bl	8006a44 <HAL_RCC_ClockConfig>
 80010a0:	bb10      	cbnz	r0, 80010e8 <SystemClock_Config+0xb4>
		Error_Handler();
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80010a2:	f249 0402 	movw	r4, #36866	; 0x9002
			| RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_FDCAN;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a6:	2100      	movs	r1, #0
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80010ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80010b0:	a813      	add	r0, sp, #76	; 0x4c
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80010b2:	9413      	str	r4, [sp, #76]	; 0x4c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b4:	9115      	str	r1, [sp, #84]	; 0x54
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010b6:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80010b8:	9322      	str	r3, [sp, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80010ba:	f005 fe93 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	b908      	cbnz	r0, 80010c4 <SystemClock_Config+0x90>
		Error_Handler();
	}
}
 80010c0:	b025      	add	sp, #148	; 0x94
 80010c2:	bd30      	pop	{r4, r5, pc}
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MC_StopMotor1();
 80010c4:	f000 fe3c 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <SystemClock_Config+0xf8>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	b90a      	cbnz	r2, 80010d2 <SystemClock_Config+0x9e>
		errorID = other;
 80010ce:	2204      	movs	r2, #4
 80010d0:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <SystemClock_Config+0xfc>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <SystemClock_Config+0x100>)
	motor_ready = false;
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80010da:	f006 f8a7 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80010de:	4816      	ldr	r0, [pc, #88]	; (8001138 <SystemClock_Config+0x104>)
 80010e0:	f006 f86a 	bl	80071b8 <HAL_TIM_Base_Start_IT>
}
 80010e4:	b025      	add	sp, #148	; 0x94
 80010e6:	bd30      	pop	{r4, r5, pc}
	MC_StopMotor1();
 80010e8:	f000 fe2a 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SystemClock_Config+0xf8>)
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	b90a      	cbnz	r2, 80010f6 <SystemClock_Config+0xc2>
		errorID = other;
 80010f2:	2204      	movs	r2, #4
 80010f4:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SystemClock_Config+0xfc>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <SystemClock_Config+0x100>)
	motor_ready = false;
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80010fe:	f006 f895 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <SystemClock_Config+0x104>)
 8001104:	f006 f858 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 8001108:	e7cb      	b.n	80010a2 <SystemClock_Config+0x6e>
	MC_StopMotor1();
 800110a:	f000 fe19 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <SystemClock_Config+0xf8>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	b90a      	cbnz	r2, 8001118 <SystemClock_Config+0xe4>
		errorID = other;
 8001114:	2204      	movs	r2, #4
 8001116:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SystemClock_Config+0xfc>)
	HAL_TIM_Base_Stop_IT(&htim2);
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <SystemClock_Config+0x100>)
	motor_ready = false;
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001120:	f006 f884 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <SystemClock_Config+0x104>)
 8001126:	f006 f847 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 800112a:	e7ad      	b.n	8001088 <SystemClock_Config+0x54>
 800112c:	20000878 	.word	0x20000878
 8001130:	2000087a 	.word	0x2000087a
 8001134:	20000c24 	.word	0x20000c24
 8001138:	20000a10 	.word	0x20000a10
 800113c:	00000000 	.word	0x00000000

08001140 <HAL_FDCAN_RxFifo0Callback>:
	if (hfdcan->Instance == hfdcan1.Instance) {
 8001140:	4b77      	ldr	r3, [pc, #476]	; (8001320 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d000      	beq.n	800114c <HAL_FDCAN_RxFifo0Callback+0xc>
 800114a:	4770      	bx	lr
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800114c:	07cb      	lsls	r3, r1, #31
 800114e:	d5fc      	bpl.n	800114a <HAL_FDCAN_RxFifo0Callback+0xa>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001150:	b510      	push	{r4, lr}
 8001152:	ed2d 8b02 	vpush	{d8}
 8001156:	b094      	sub	sp, #80	; 0x50
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 8001158:	ab04      	add	r3, sp, #16
 800115a:	aa0a      	add	r2, sp, #40	; 0x28
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	f004 fe61 	bl	8005e24 <HAL_FDCAN_GetRxMessage>
 8001162:	2800      	cmp	r0, #0
 8001164:	d135      	bne.n	80011d2 <HAL_FDCAN_RxFifo0Callback+0x92>
			switch (RxHeader.Identifier) {
 8001166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001168:	f240 2201 	movw	r2, #513	; 0x201
 800116c:	4293      	cmp	r3, r2
 800116e:	d05c      	beq.n	800122a <HAL_FDCAN_RxFifo0Callback+0xea>
 8001170:	d940      	bls.n	80011f4 <HAL_FDCAN_RxFifo0Callback+0xb4>
 8001172:	f240 2202 	movw	r2, #514	; 0x202
 8001176:	4293      	cmp	r3, r2
 8001178:	d014      	beq.n	80011a4 <HAL_FDCAN_RxFifo0Callback+0x64>
 800117a:	f240 7277 	movw	r2, #1911	; 0x777
 800117e:	4293      	cmp	r3, r2
 8001180:	d10c      	bne.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
	MC_StopMotor1();
 8001182:	f000 fddd 	bl	8001d40 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	4866      	ldr	r0, [pc, #408]	; (8001324 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 800118c:	f005 f8ee 	bl	800636c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001190:	4865      	ldr	r0, [pc, #404]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001192:	f006 f84b 	bl	800722c <HAL_TIM_Base_Stop_IT>
				motor_ready = false;
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	b014      	add	sp, #80	; 0x50
 800119e:	ecbd 8b02 	vpop	{d8}
 80011a2:	bd10      	pop	{r4, pc}
				if (RxData[0]) {
 80011a4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80011a8:	2c00      	cmp	r4, #0
 80011aa:	f000 808e 	beq.w	80012ca <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (motor_ready) {
 80011ae:	4b5f      	ldr	r3, [pc, #380]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f2      	beq.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
						MC_StartMotor1();
 80011b6:	f000 fdbd 	bl	8001d34 <MC_StartMotor1>
						HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	4859      	ldr	r0, [pc, #356]	; (8001324 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80011c0:	f005 f8d4 	bl	800636c <HAL_GPIO_WritePin>
						HAL_TIM_Base_Start_IT(&htim2);
 80011c4:	4858      	ldr	r0, [pc, #352]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80011c6:	f005 fff7 	bl	80071b8 <HAL_TIM_Base_Start_IT>
						heartbeat = true;
 80011ca:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e7e4      	b.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
	MC_StopMotor1();
 80011d2:	f000 fdb5 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80011d6:	4b57      	ldr	r3, [pc, #348]	; (8001334 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	b90a      	cbnz	r2, 80011e0 <HAL_FDCAN_RxFifo0Callback+0xa0>
		errorID = other;
 80011dc:	2204      	movs	r2, #4
 80011de:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80011e2:	4851      	ldr	r0, [pc, #324]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
	motor_ready = false;
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80011e8:	f006 f820 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80011ec:	4852      	ldr	r0, [pc, #328]	; (8001338 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80011ee:	f005 ffe3 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 80011f2:	e7b8      	b.n	8001166 <HAL_FDCAN_RxFifo0Callback+0x26>
			switch (RxHeader.Identifier) {
 80011f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f8:	d1d0      	bne.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
	MC_StopMotor1();
 80011fa:	f000 fda1 	bl	8001d40 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	4848      	ldr	r0, [pc, #288]	; (8001324 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001204:	f005 f8b2 	bl	800636c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001208:	4847      	ldr	r0, [pc, #284]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800120a:	f006 f80f 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 800120e:	484a      	ldr	r0, [pc, #296]	; (8001338 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001210:	f006 f80c 	bl	800722c <HAL_TIM_Base_Stop_IT>
	if (MC_AcknowledgeFaultMotor1()) {
 8001214:	f000 fda0 	bl	8001d58 <MC_AcknowledgeFaultMotor1>
 8001218:	2800      	cmp	r0, #0
 800121a:	d043      	beq.n	80012a4 <HAL_FDCAN_RxFifo0Callback+0x164>
		errorID = nominal;
 800121c:	4945      	ldr	r1, [pc, #276]	; (8001334 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
		motor_ready = true;
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
		errorID = nominal;
 8001220:	2000      	movs	r0, #0
		motor_ready = true;
 8001222:	2201      	movs	r2, #1
		errorID = nominal;
 8001224:	7008      	strb	r0, [r1, #0]
		motor_ready = true;
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e7b8      	b.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
				memcpy(&refPosition, &RxData[4], 4);
 800122a:	9b05      	ldr	r3, [sp, #20]
				if (refPosition < nlim && plim < refPosition) {
 800122c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800133c <HAL_FDCAN_RxFifo0Callback+0x1fc>
				memcpy(&refPosition, &RxData[4], 4);
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	ee08 3a10 	vmov	s16, r3
				if (refPosition < nlim && plim < refPosition) {
 8001236:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d506      	bpl.n	800124e <HAL_FDCAN_RxFifo0Callback+0x10e>
 8001240:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8001340 <HAL_FDCAN_RxFifo0Callback+0x200>
 8001244:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dc4f      	bgt.n	80012ee <HAL_FDCAN_RxFifo0Callback+0x1ae>
				refPosition = refPosition * gRatio;
 800124e:	ee18 0a10 	vmov	r0, s16
 8001252:	f7ff f9a1 	bl	8000598 <__aeabi_f2d>
 8001256:	a330      	add	r3, pc, #192	; (adr r3, 8001318 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f9f4 	bl	8000648 <__aeabi_dmul>
 8001260:	f7ff fcca 	bl	8000bf8 <__aeabi_d2f>
 8001264:	4604      	mov	r4, r0
 8001266:	9003      	str	r0, [sp, #12]
				if (MC_GetSTMStateMotor1() == RUN) {
 8001268:	f000 fd7c 	bl	8001d64 <MC_GetSTMStateMotor1>
 800126c:	2806      	cmp	r0, #6
 800126e:	d037      	beq.n	80012e0 <HAL_FDCAN_RxFifo0Callback+0x1a0>
				char s[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001270:	2300      	movs	r3, #0
				snprintf(s, sizeof(s), "%f\n", refPosition);
 8001272:	4620      	mov	r0, r4
				char s[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001274:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001278:	e9cd 3308 	strd	r3, r3, [sp, #32]
				snprintf(s, sizeof(s), "%f\n", refPosition);
 800127c:	f7ff f98c 	bl	8000598 <__aeabi_f2d>
 8001280:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001282:	e9cd 0100 	strd	r0, r1, [sp]
 8001286:	2110      	movs	r1, #16
 8001288:	a806      	add	r0, sp, #24
 800128a:	f00a fa7b 	bl	800b784 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) s, sizeof(s), 0xffff);
 800128e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001292:	2210      	movs	r2, #16
 8001294:	a906      	add	r1, sp, #24
 8001296:	482c      	ldr	r0, [pc, #176]	; (8001348 <HAL_FDCAN_RxFifo0Callback+0x208>)
 8001298:	f006 fe98 	bl	8007fcc <HAL_UART_Transmit>
				heartbeat = true;
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
				break;
 80012a2:	e77b      	b.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
		errorID = fault_yet;
 80012a4:	4c23      	ldr	r4, [pc, #140]	; (8001334 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80012a6:	2303      	movs	r3, #3
 80012a8:	7023      	strb	r3, [r4, #0]
	MC_StopMotor1();
 80012aa:	f000 fd49 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80012ae:	7823      	ldrb	r3, [r4, #0]
 80012b0:	b90b      	cbnz	r3, 80012b6 <HAL_FDCAN_RxFifo0Callback+0x176>
		errorID = other;
 80012b2:	2304      	movs	r3, #4
 80012b4:	7023      	strb	r3, [r4, #0]
	motor_ready = false;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
	motor_ready = false;
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80012be:	f005 ffb5 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80012c2:	481d      	ldr	r0, [pc, #116]	; (8001338 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80012c4:	f005 ff78 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 80012c8:	e768      	b.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
	MC_StopMotor1();
 80012ca:	f000 fd39 	bl	8001d40 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 80012ce:	4622      	mov	r2, r4
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80012d4:	f005 f84a 	bl	800636c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80012da:	f005 ffa7 	bl	800722c <HAL_TIM_Base_Stop_IT>
 80012de:	e75d      	b.n	800119c <HAL_FDCAN_RxFifo0Callback+0x5c>
					MC_ProgramPositionCommandMotor1(refPosition, 0);
 80012e0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800134c <HAL_FDCAN_RxFifo0Callback+0x20c>
 80012e4:	ee00 4a10 	vmov	s0, r4
 80012e8:	f000 fd30 	bl	8001d4c <MC_ProgramPositionCommandMotor1>
 80012ec:	e7c0      	b.n	8001270 <HAL_FDCAN_RxFifo0Callback+0x130>
					errorID = out_of_range;
 80012ee:	4c11      	ldr	r4, [pc, #68]	; (8001334 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80012f0:	2302      	movs	r3, #2
 80012f2:	7023      	strb	r3, [r4, #0]
	MC_StopMotor1();
 80012f4:	f000 fd24 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80012f8:	7823      	ldrb	r3, [r4, #0]
 80012fa:	b90b      	cbnz	r3, 8001300 <HAL_FDCAN_RxFifo0Callback+0x1c0>
		errorID = other;
 80012fc:	2304      	movs	r3, #4
 80012fe:	7023      	strb	r3, [r4, #0]
	motor_ready = false;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_FDCAN_RxFifo0Callback+0x1ec>)
	HAL_TIM_Base_Stop_IT(&htim2);
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
	motor_ready = false;
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001308:	f005 ff90 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800130e:	f005 ff53 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 8001312:	e79c      	b.n	800124e <HAL_FDCAN_RxFifo0Callback+0x10e>
 8001314:	f3af 8000 	nop.w
 8001318:	cccccccd 	.word	0xcccccccd
 800131c:	403ecccc 	.word	0x403ecccc
 8001320:	20000b50 	.word	0x20000b50
 8001324:	48000800 	.word	0x48000800
 8001328:	20000c24 	.word	0x20000c24
 800132c:	2000087a 	.word	0x2000087a
 8001330:	20000879 	.word	0x20000879
 8001334:	20000878 	.word	0x20000878
 8001338:	20000a10 	.word	0x20000a10
 800133c:	c016cbe4 	.word	0xc016cbe4
 8001340:	4016cbe4 	.word	0x4016cbe4
 8001344:	0800cf88 	.word	0x0800cf88
 8001348:	20000c70 	.word	0x20000c70
 800134c:	00000000 	.word	0x00000000

08001350 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim2) {
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001352:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	4604      	mov	r4, r0
	if (htim == &htim2) {
 8001358:	d003      	beq.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x12>
	if (htim == &htim3) {
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800135c:	429c      	cmp	r4, r3
 800135e:	d008      	beq.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x22>
}
 8001360:	bd70      	pop	{r4, r5, r6, pc}
		if (heartbeat == false) {
 8001362:	4d12      	ldr	r5, [pc, #72]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001364:	782b      	ldrb	r3, [r5, #0]
 8001366:	b153      	cbz	r3, 800137e <HAL_TIM_PeriodElapsedCallback+0x2e>
		heartbeat = false;
 8001368:	2300      	movs	r3, #0
 800136a:	702b      	strb	r3, [r5, #0]
	if (htim == &htim3) {
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800136e:	429c      	cmp	r4, r3
 8001370:	d1f6      	bne.n	8001360 <HAL_TIM_PeriodElapsedCallback+0x10>
		HAL_GPIO_TogglePin(GPIOC, STATUS_Pin);
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x60>)
}
 8001376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_TogglePin(GPIOC, STATUS_Pin);
 800137a:	f004 bffd 	b.w	8006378 <HAL_GPIO_TogglePin>
			errorID = CAN_lost;
 800137e:	4e0d      	ldr	r6, [pc, #52]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001380:	2301      	movs	r3, #1
 8001382:	7033      	strb	r3, [r6, #0]
	MC_StopMotor1();
 8001384:	f000 fcdc 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 8001388:	7833      	ldrb	r3, [r6, #0]
 800138a:	b90b      	cbnz	r3, 8001390 <HAL_TIM_PeriodElapsedCallback+0x40>
		errorID = other;
 800138c:	2304      	movs	r3, #4
 800138e:	7033      	strb	r3, [r6, #0]
	motor_ready = false;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x68>)
	HAL_TIM_Base_Stop_IT(&htim2);
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
	motor_ready = false;
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001398:	f005 ff48 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800139e:	f005 ff0b 	bl	80071b8 <HAL_TIM_Base_Start_IT>
 80013a2:	e7e1      	b.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x18>
 80013a4:	20000c24 	.word	0x20000c24
 80013a8:	20000a10 	.word	0x20000a10
 80013ac:	20000879 	.word	0x20000879
 80013b0:	48000800 	.word	0x48000800
 80013b4:	20000878 	.word	0x20000878
 80013b8:	2000087a 	.word	0x2000087a

080013bc <Error_Handler>:
void Error_Handler(void) {
 80013bc:	b508      	push	{r3, lr}
	MC_StopMotor1();
 80013be:	f000 fcbf 	bl	8001d40 <MC_StopMotor1>
	if (errorID == nominal)
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <Error_Handler+0x28>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	b90a      	cbnz	r2, 80013cc <Error_Handler+0x10>
		errorID = other;
 80013c8:	2204      	movs	r2, #4
 80013ca:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <Error_Handler+0x2c>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <Error_Handler+0x30>)
	motor_ready = false;
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80013d4:	f005 ff2a 	bl	800722c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <Error_Handler+0x34>)
//	__disable_irq();
//	while (1) {
//	}
	/* USER CODE END Error_Handler_Debug */
}
 80013da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 80013de:	f005 beeb 	b.w	80071b8 <HAL_TIM_Base_Start_IT>
 80013e2:	bf00      	nop
 80013e4:	20000878 	.word	0x20000878
 80013e8:	2000087a 	.word	0x2000087a
 80013ec:	20000c24 	.word	0x20000c24
 80013f0:	20000a10 	.word	0x20000a10

080013f4 <main>:
int main(void) {
 80013f4:	b580      	push	{r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013f6:	2400      	movs	r4, #0
int main(void) {
 80013f8:	b0a8      	sub	sp, #160	; 0xa0
	HAL_Init();
 80013fa:	f003 fb23 	bl	8004a44 <HAL_Init>
	SystemClock_Config();
 80013fe:	f7ff fe19 	bl	8001034 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001402:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8001406:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4bb6      	ldr	r3, [pc, #728]	; (80016e4 <main+0x2f0>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800140c:	941c      	str	r4, [sp, #112]	; 0x70
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 8001410:	48b5      	ldr	r0, [pc, #724]	; (80016e8 <main+0x2f4>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	f042 0204 	orr.w	r2, r2, #4
 8001416:	64da      	str	r2, [r3, #76]	; 0x4c
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f002 0204 	and.w	r2, r2, #4
 800141e:	9201      	str	r2, [sp, #4]
 8001420:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	64da      	str	r2, [r3, #76]	; 0x4c
 800142a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142c:	f002 0220 	and.w	r2, r2, #32
 8001430:	9202      	str	r2, [sp, #8]
 8001432:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	64da      	str	r2, [r3, #76]	; 0x4c
 800143c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800143e:	f002 0201 	and.w	r2, r2, #1
 8001442:	9203      	str	r2, [sp, #12]
 8001444:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f042 0202 	orr.w	r2, r2, #2
 800144c:	64da      	str	r2, [r3, #76]	; 0x4c
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 8001454:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 8001458:	f244 0140 	movw	r1, #16448	; 0x4040
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2501      	movs	r5, #1
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 8001460:	f004 ff84 	bl	800636c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CAN_TERM_Pin | STATUS_Pin;
 8001464:	f244 0340 	movw	r3, #16448	; 0x4040
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	a918      	add	r1, sp, #96	; 0x60
 800146a:	489f      	ldr	r0, [pc, #636]	; (80016e8 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f004 fe9e 	bl	80061b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001478:	4b9c      	ldr	r3, [pc, #624]	; (80016ec <main+0x2f8>)
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800147a:	489b      	ldr	r0, [pc, #620]	; (80016e8 <main+0x2f4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	941a      	str	r4, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = Start_Stop_Pin;
 800147e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001482:	a918      	add	r1, sp, #96	; 0x60
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001484:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001488:	f004 fe94 	bl	80061b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	4b98      	ldr	r3, [pc, #608]	; (80016f0 <main+0x2fc>)
	HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800148e:	4899      	ldr	r0, [pc, #612]	; (80016f4 <main+0x300>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	941a      	str	r4, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8001492:	f44f 7280 	mov.w	r2, #256	; 0x100
	HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8001496:	a918      	add	r1, sp, #96	; 0x60
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001498:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800149c:	f004 fe8a 	bl	80061b4 <HAL_GPIO_Init>
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 80014a0:	4621      	mov	r1, r4
 80014a2:	223c      	movs	r2, #60	; 0x3c
 80014a4:	a818      	add	r0, sp, #96	; 0x60
	ADC_MultiModeTypeDef multimode = { 0 };
 80014a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80014aa:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 80014ac:	f009 fd06 	bl	800aebc <memset>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014b0:	4621      	mov	r1, r4
 80014b2:	2220      	movs	r2, #32
 80014b4:	a810      	add	r0, sp, #64	; 0x40
 80014b6:	f009 fd01 	bl	800aebc <memset>
	hadc1.Instance = ADC1;
 80014ba:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <main+0x304>)
 80014bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014c0:	f44f 2700 	mov.w	r7, #524288	; 0x80000
	hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014c4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c8:	2104      	movs	r1, #4
	hadc1.Init.NbrOfConversion = 2;
 80014ca:	2202      	movs	r2, #2
	hadc1.Instance = ADC1;
 80014cc:	6018      	str	r0, [r3, #0]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014ce:	4618      	mov	r0, r3
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d0:	615d      	str	r5, [r3, #20]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d2:	609c      	str	r4, [r3, #8]
	hadc1.Init.GainCompensation = 0;
 80014d4:	611c      	str	r4, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80014d6:	771c      	strb	r4, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80014d8:	775c      	strb	r4, [r3, #29]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014da:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e2:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e6:	63dc      	str	r4, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80014e8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014ec:	605f      	str	r7, [r3, #4]
	hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014ee:	60de      	str	r6, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	6199      	str	r1, [r3, #24]
	hadc1.Init.NbrOfConversion = 2;
 80014f2:	621a      	str	r2, [r3, #32]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014f4:	f003 fade 	bl	8004ab4 <HAL_ADC_Init>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f040 8408 	bne.w	8001d0e <main+0x91a>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80014fe:	2300      	movs	r3, #0
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001500:	a90b      	add	r1, sp, #44	; 0x2c
 8001502:	487d      	ldr	r0, [pc, #500]	; (80016f8 <main+0x304>)
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001504:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001506:	f004 f8e7 	bl	80056d8 <HAL_ADCEx_MultiModeConfigChannel>
 800150a:	2800      	cmp	r0, #0
 800150c:	f040 83fc 	bne.w	8001d08 <main+0x914>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001510:	487a      	ldr	r0, [pc, #488]	; (80016fc <main+0x308>)
 8001512:	2109      	movs	r1, #9
 8001514:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8001518:	2001      	movs	r0, #1
 800151a:	217f      	movs	r1, #127	; 0x7f
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800151c:	2300      	movs	r3, #0
	sConfigInjected.InjectedNbrOfConversion = 2;
 800151e:	2202      	movs	r2, #2
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001520:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8001524:	2004      	movs	r0, #4
 8001526:	2100      	movs	r1, #0
 8001528:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
	sConfigInjected.InjectedNbrOfConversion = 2;
 800152c:	9220      	str	r2, [sp, #128]	; 0x80
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800152e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
	sConfigInjected.AutoInjectedConv = DISABLE;
 8001532:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
	sConfigInjected.QueueInjectedContext = DISABLE;
 8001536:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
	sConfigInjected.InjecOversamplingMode = DISABLE;
 800153a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800153e:	2284      	movs	r2, #132	; 0x84
 8001540:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001542:	a918      	add	r1, sp, #96	; 0x60
 8001544:	486c      	ldr	r0, [pc, #432]	; (80016f8 <main+0x304>)
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001546:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 800154a:	f003 fdf5 	bl	8005138 <HAL_ADCEx_InjectedConfigChannel>
 800154e:	2800      	cmp	r0, #0
 8001550:	f040 83d7 	bne.w	8001d02 <main+0x90e>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <main+0x30c>)
 8001556:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001558:	4867      	ldr	r0, [pc, #412]	; (80016f8 <main+0x304>)
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800155a:	f240 130f 	movw	r3, #271	; 0x10f
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 800155e:	a918      	add	r1, sp, #96	; 0x60
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001560:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001562:	f003 fde9 	bl	8005138 <HAL_ADCEx_InjectedConfigChannel>
 8001566:	2800      	cmp	r0, #0
 8001568:	f040 83c8 	bne.w	8001cfc <main+0x908>
	sConfig.Channel = ADC_CHANNEL_1;
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <main+0x310>)
 800156e:	9310      	str	r3, [sp, #64]	; 0x40
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001570:	2206      	movs	r2, #6
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001572:	2304      	movs	r3, #4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001574:	9211      	str	r2, [sp, #68]	; 0x44
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001576:	9312      	str	r3, [sp, #72]	; 0x48
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001578:	227f      	movs	r2, #127	; 0x7f
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800157a:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800157c:	485e      	ldr	r0, [pc, #376]	; (80016f8 <main+0x304>)
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800157e:	9213      	str	r2, [sp, #76]	; 0x4c
	sConfig.Offset = 0;
 8001580:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001582:	a910      	add	r1, sp, #64	; 0x40
	sConfig.Offset = 0;
 8001584:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001586:	f003 fba3 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 800158a:	2800      	cmp	r0, #0
 800158c:	f040 83b3 	bne.w	8001cf6 <main+0x902>
	sConfig.Channel = ADC_CHANNEL_5;
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <main+0x314>)
 8001592:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001594:	4858      	ldr	r0, [pc, #352]	; (80016f8 <main+0x304>)
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001596:	230c      	movs	r3, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001598:	a910      	add	r1, sp, #64	; 0x40
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800159a:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800159c:	f003 fb98 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f040 83a5 	bne.w	8001cf0 <main+0x8fc>
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 80015a6:	223c      	movs	r2, #60	; 0x3c
 80015a8:	2100      	movs	r1, #0
 80015aa:	a818      	add	r0, sp, #96	; 0x60
 80015ac:	f009 fc86 	bl	800aebc <memset>
	hadc2.Instance = ADC2;
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <main+0x318>)
 80015b2:	4a57      	ldr	r2, [pc, #348]	; (8001710 <main+0x31c>)
 80015b4:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80015b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
	hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	2104      	movs	r1, #4
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80015c0:	6058      	str	r0, [r3, #4]
	hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015c2:	60da      	str	r2, [r3, #12]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c4:	6199      	str	r1, [r3, #24]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015c6:	2200      	movs	r2, #0
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c8:	2101      	movs	r1, #1
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80015ca:	4618      	mov	r0, r3
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015cc:	609a      	str	r2, [r3, #8]
	hadc2.Init.GainCompensation = 0;
 80015ce:	611a      	str	r2, [r3, #16]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80015d0:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80015d2:	775a      	strb	r2, [r3, #29]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80015d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015e2:	6159      	str	r1, [r3, #20]
	hadc2.Init.NbrOfConversion = 1;
 80015e4:	6219      	str	r1, [r3, #32]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80015e6:	f003 fa65 	bl	8004ab4 <HAL_ADC_Init>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	f040 837d 	bne.w	8001cea <main+0x8f6>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80015f0:	4842      	ldr	r0, [pc, #264]	; (80016fc <main+0x308>)
 80015f2:	2109      	movs	r1, #9
 80015f4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80015f8:	2001      	movs	r0, #1
 80015fa:	217f      	movs	r1, #127	; 0x7f
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80015fc:	2300      	movs	r3, #0
	sConfigInjected.InjectedNbrOfConversion = 2;
 80015fe:	2202      	movs	r2, #2
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001600:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8001604:	2004      	movs	r0, #4
 8001606:	2100      	movs	r1, #0
 8001608:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
	sConfigInjected.InjectedNbrOfConversion = 2;
 800160c:	9220      	str	r2, [sp, #128]	; 0x80
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800160e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
	sConfigInjected.AutoInjectedConv = DISABLE;
 8001612:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
	sConfigInjected.QueueInjectedContext = DISABLE;
 8001616:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
	sConfigInjected.InjecOversamplingMode = DISABLE;
 800161a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800161e:	2284      	movs	r2, #132	; 0x84
 8001620:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8001622:	a918      	add	r1, sp, #96	; 0x60
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <main+0x318>)
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001626:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 800162a:	f003 fd85 	bl	8005138 <HAL_ADCEx_InjectedConfigChannel>
 800162e:	2800      	cmp	r0, #0
 8001630:	f040 8358 	bne.w	8001ce4 <main+0x8f0>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <main+0x320>)
 8001636:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <main+0x318>)
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800163a:	f240 130f 	movw	r3, #271	; 0x10f
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 800163e:	a918      	add	r1, sp, #96	; 0x60
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001640:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8001642:	f003 fd79 	bl	8005138 <HAL_ADCEx_InjectedConfigChannel>
 8001646:	2800      	cmp	r0, #0
 8001648:	f040 8349 	bne.w	8001cde <main+0x8ea>
	hcomp1.Instance = COMP1;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <main+0x324>)
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <main+0x328>)
 8001650:	601a      	str	r2, [r3, #0]
	hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8001652:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
	hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001656:	2200      	movs	r2, #0
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8001658:	4618      	mov	r0, r3
	hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800165a:	e9c3 2101 	strd	r2, r1, [r3, #4]
	hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800165e:	e9c3 2203 	strd	r2, r2, [r3, #12]
	hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001662:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8001666:	f004 f8a1 	bl	80057ac <HAL_COMP_Init>
 800166a:	2800      	cmp	r0, #0
 800166c:	f040 8334 	bne.w	8001cd8 <main+0x8e4>
	hcomp2.Instance = COMP2;
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <main+0x32c>)
 8001672:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <main+0x330>)
 8001674:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8001676:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800167a:	2200      	movs	r2, #0
	if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 800167c:	4618      	mov	r0, r3
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800167e:	e9c3 2101 	strd	r2, r1, [r3, #4]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001682:	e9c3 2203 	strd	r2, r2, [r3, #12]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001686:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 800168a:	f004 f88f 	bl	80057ac <HAL_COMP_Init>
 800168e:	2800      	cmp	r0, #0
 8001690:	f040 831f 	bne.w	8001cd2 <main+0x8de>
	hcomp4.Instance = COMP4;
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <main+0x334>)
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <main+0x338>)
 8001698:	601a      	str	r2, [r3, #0]
	hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 800169a:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
	hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800169e:	2200      	movs	r2, #0
	if (HAL_COMP_Init(&hcomp4) != HAL_OK) {
 80016a0:	4618      	mov	r0, r3
	hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80016a2:	e9c3 2101 	strd	r2, r1, [r3, #4]
	hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016a6:	e9c3 2203 	strd	r2, r2, [r3, #12]
	hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80016aa:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_COMP_Init(&hcomp4) != HAL_OK) {
 80016ae:	f004 f87d 	bl	80057ac <HAL_COMP_Init>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	f040 830a 	bne.w	8001ccc <main+0x8d8>
	hcordic.Instance = CORDIC;
 80016b8:	481d      	ldr	r0, [pc, #116]	; (8001730 <main+0x33c>)
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <main+0x340>)
 80016bc:	6003      	str	r3, [r0, #0]
	if (HAL_CORDIC_Init(&hcordic) != HAL_OK) {
 80016be:	f004 f919 	bl	80058f4 <HAL_CORDIC_Init>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	f040 82ff 	bne.w	8001cc6 <main+0x8d2>
	DAC_ChannelConfTypeDef sConfig = { 0 };
 80016c8:	2230      	movs	r2, #48	; 0x30
 80016ca:	2100      	movs	r1, #0
 80016cc:	a818      	add	r0, sp, #96	; 0x60
 80016ce:	f009 fbf5 	bl	800aebc <memset>
	hdac1.Instance = DAC1;
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <main+0x344>)
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <main+0x348>)
 80016d6:	6003      	str	r3, [r0, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80016d8:	f004 f99c 	bl	8005a14 <HAL_DAC_Init>
 80016dc:	2800      	cmp	r0, #0
 80016de:	f040 82ef 	bne.w	8001cc0 <main+0x8cc>
 80016e2:	e02d      	b.n	8001740 <main+0x34c>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10110000 	.word	0x10110000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	20000abc 	.word	0x20000abc
 80016fc:	0c900008 	.word	0x0c900008
 8001700:	32601000 	.word	0x32601000
 8001704:	04300002 	.word	0x04300002
 8001708:	14f00020 	.word	0x14f00020
 800170c:	20000944 	.word	0x20000944
 8001710:	50000100 	.word	0x50000100
 8001714:	cb8c0000 	.word	0xcb8c0000
 8001718:	200009ec 	.word	0x200009ec
 800171c:	40010200 	.word	0x40010200
 8001720:	20000c00 	.word	0x20000c00
 8001724:	40010204 	.word	0x40010204
 8001728:	20000a98 	.word	0x20000a98
 800172c:	4001020c 	.word	0x4001020c
 8001730:	20000b28 	.word	0x20000b28
 8001734:	40020c00 	.word	0x40020c00
 8001738:	20000930 	.word	0x20000930
 800173c:	50000800 	.word	0x50000800
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001740:	2300      	movs	r3, #0
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001742:	2400      	movs	r4, #0
 8001744:	2500      	movs	r5, #0
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001746:	2002      	movs	r0, #2
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001748:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 800174c:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001750:	9018      	str	r0, [sp, #96]	; 0x60
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001752:	2401      	movs	r4, #1
 8001754:	2500      	movs	r5, #0
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001756:	461a      	mov	r2, r3
 8001758:	a918      	add	r1, sp, #96	; 0x60
 800175a:	48b6      	ldr	r0, [pc, #728]	; (8001a34 <main+0x640>)
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 800175c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	sConfig.DAC_SignedFormat = DISABLE;
 8001760:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001764:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001768:	f004 f96a 	bl	8005a40 <HAL_DAC_ConfigChannel>
 800176c:	2800      	cmp	r0, #0
 800176e:	f040 82a4 	bne.w	8001cba <main+0x8c6>
	hopamp1.Instance = OPAMP1;
 8001772:	4bb1      	ldr	r3, [pc, #708]	; (8001a38 <main+0x644>)
 8001774:	4ab1      	ldr	r2, [pc, #708]	; (8001a3c <main+0x648>)
 8001776:	601a      	str	r2, [r3, #0]
	hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001778:	2040      	movs	r0, #64	; 0x40
	hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800177e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001782:	6098      	str	r0, [r3, #8]
	hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_OPAMP_Init(&hopamp1) != HAL_OK) {
 8001786:	4618      	mov	r0, r3
	hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001788:	2200      	movs	r2, #0
	hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800178a:	6299      	str	r1, [r3, #40]	; 0x28
	hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800178c:	605a      	str	r2, [r3, #4]
	hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800178e:	611a      	str	r2, [r3, #16]
	hopamp1.Init.InternalOutput = DISABLE;
 8001790:	751a      	strb	r2, [r3, #20]
	hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001792:	619a      	str	r2, [r3, #24]
	hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp1) != HAL_OK) {
 8001796:	f004 fdf9 	bl	800638c <HAL_OPAMP_Init>
 800179a:	2800      	cmp	r0, #0
 800179c:	f040 828a 	bne.w	8001cb4 <main+0x8c0>
	hopamp2.Instance = OPAMP2;
 80017a0:	4ba7      	ldr	r3, [pc, #668]	; (8001a40 <main+0x64c>)
 80017a2:	4aa8      	ldr	r2, [pc, #672]	; (8001a44 <main+0x650>)
 80017a4:	601a      	str	r2, [r3, #0]
	hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80017a6:	2040      	movs	r0, #64	; 0x40
	hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80017a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80017ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80017b0:	6098      	str	r0, [r3, #8]
	hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_OPAMP_Init(&hopamp2) != HAL_OK) {
 80017b4:	4618      	mov	r0, r3
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80017b6:	2200      	movs	r2, #0
	hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80017b8:	6299      	str	r1, [r3, #40]	; 0x28
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80017ba:	605a      	str	r2, [r3, #4]
	hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017bc:	611a      	str	r2, [r3, #16]
	hopamp2.Init.InternalOutput = DISABLE;
 80017be:	751a      	strb	r2, [r3, #20]
	hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017c0:	619a      	str	r2, [r3, #24]
	hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp2) != HAL_OK) {
 80017c4:	f004 fde2 	bl	800638c <HAL_OPAMP_Init>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	f040 8270 	bne.w	8001cae <main+0x8ba>
	hopamp3.Instance = OPAMP3;
 80017ce:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <main+0x654>)
 80017d0:	4a9e      	ldr	r2, [pc, #632]	; (8001a4c <main+0x658>)
 80017d2:	601a      	str	r2, [r3, #0]
	hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80017d4:	2140      	movs	r1, #64	; 0x40
	hopamp3.Init.InternalOutput = ENABLE;
 80017d6:	2001      	movs	r0, #1
	hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80017d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80017dc:	6099      	str	r1, [r3, #8]
	hopamp3.Init.InternalOutput = ENABLE;
 80017de:	7518      	strb	r0, [r3, #20]
	hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80017e0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_OPAMP_Init(&hopamp3) != HAL_OK) {
 80017e6:	4618      	mov	r0, r3
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80017e8:	2200      	movs	r2, #0
	hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80017ea:	6299      	str	r1, [r3, #40]	; 0x28
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80017ec:	605a      	str	r2, [r3, #4]
	hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017ee:	611a      	str	r2, [r3, #16]
	hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017f0:	619a      	str	r2, [r3, #24]
	hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp3) != HAL_OK) {
 80017f4:	f004 fdca 	bl	800638c <HAL_OPAMP_Init>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	f040 8255 	bne.w	8001ca8 <main+0x8b4>
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80017fe:	2400      	movs	r4, #0
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001800:	4621      	mov	r1, r4
 8001802:	2234      	movs	r2, #52	; 0x34
 8001804:	a818      	add	r0, sp, #96	; 0x60
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001806:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800180a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800180e:	940f      	str	r4, [sp, #60]	; 0x3c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001810:	9405      	str	r4, [sp, #20]
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = { 0 };
 8001812:	9408      	str	r4, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001814:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001818:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 800181c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001820:	9416      	str	r4, [sp, #88]	; 0x58
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001822:	e9cd 4406 	strd	r4, r4, [sp, #24]
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = { 0 };
 8001826:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800182a:	f009 fb47 	bl	800aebc <memset>
	htim1.Instance = TIM1;
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <main+0x65c>)
 8001830:	4a88      	ldr	r2, [pc, #544]	; (8001a54 <main+0x660>)
 8001832:	601a      	str	r2, [r3, #0]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001834:	2020      	movs	r0, #32
	htim1.Init.Period = ((PWM_PERIOD_CYCLES ) / 2);
 8001836:	f44f 55a6 	mov.w	r5, #5312	; 0x14c0
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
	htim1.Init.RepetitionCounter = (REP_COUNTER );
 800183e:	2201      	movs	r2, #1
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001840:	6098      	str	r0, [r3, #8]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001842:	4618      	mov	r0, r3
	htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001844:	605c      	str	r4, [r3, #4]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	619c      	str	r4, [r3, #24]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001848:	e9c3 5103 	strd	r5, r1, [r3, #12]
	htim1.Init.RepetitionCounter = (REP_COUNTER );
 800184c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800184e:	f005 fc15 	bl	800707c <HAL_TIM_Base_Init>
 8001852:	2800      	cmp	r0, #0
 8001854:	f040 8225 	bne.w	8001ca2 <main+0x8ae>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001858:	487d      	ldr	r0, [pc, #500]	; (8001a50 <main+0x65c>)
 800185a:	f005 fd01 	bl	8007260 <HAL_TIM_PWM_Init>
 800185e:	2800      	cmp	r0, #0
 8001860:	f040 821c 	bne.w	8001c9c <main+0x8a8>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001864:	2206      	movs	r2, #6
	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001866:	2310      	movs	r3, #16
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001868:	a90b      	add	r1, sp, #44	; 0x2c
 800186a:	4879      	ldr	r0, [pc, #484]	; (8001a50 <main+0x65c>)
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800186c:	920b      	str	r2, [sp, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800186e:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001870:	f006 f91e 	bl	8007ab0 <HAL_TIM_SlaveConfigSynchro>
 8001874:	2800      	cmp	r0, #0
 8001876:	f040 820e 	bne.w	8001c96 <main+0x8a2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800187a:	2270      	movs	r2, #112	; 0x70
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187c:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800187e:	a905      	add	r1, sp, #20
 8001880:	4873      	ldr	r0, [pc, #460]	; (8001a50 <main+0x65c>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001882:	9205      	str	r2, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001888:	f006 fa96 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	2800      	cmp	r0, #0
 800188e:	f040 81ff 	bne.w	8001c90 <main+0x89c>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001892:	2302      	movs	r3, #2
	sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001894:	2001      	movs	r0, #1
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001896:	2400      	movs	r4, #0
	sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001898:	9009      	str	r0, [sp, #36]	; 0x24
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 800189a:	4619      	mov	r1, r3
 800189c:	aa08      	add	r2, sp, #32
 800189e:	486c      	ldr	r0, [pc, #432]	; (8001a50 <main+0x65c>)
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80018a0:	9308      	str	r3, [sp, #32]
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80018a2:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80018a4:	f006 fb2a 	bl	8007efc <HAL_TIMEx_ConfigBreakInput>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f040 81ee 	bne.w	8001c8a <main+0x896>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80018ae:	2304      	movs	r3, #4
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80018b0:	aa08      	add	r2, sp, #32
 80018b2:	2102      	movs	r1, #2
 80018b4:	4866      	ldr	r0, [pc, #408]	; (8001a50 <main+0x65c>)
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80018b6:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80018b8:	f006 fb20 	bl	8007efc <HAL_TIMEx_ConfigBreakInput>
 80018bc:	2800      	cmp	r0, #0
 80018be:	f040 81e1 	bne.w	8001c84 <main+0x890>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80018c2:	2310      	movs	r3, #16
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80018c4:	aa08      	add	r2, sp, #32
 80018c6:	2102      	movs	r1, #2
 80018c8:	4861      	ldr	r0, [pc, #388]	; (8001a50 <main+0x65c>)
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80018ca:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80018cc:	f006 fb16 	bl	8007efc <HAL_TIMEx_ConfigBreakInput>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	f040 81d4 	bne.w	8001c7e <main+0x88a>
	sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d8:	2460      	movs	r4, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80018da:	461a      	mov	r2, r3
 80018dc:	a910      	add	r1, sp, #64	; 0x40
 80018de:	485c      	ldr	r0, [pc, #368]	; (8001a50 <main+0x65c>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	9410      	str	r4, [sp, #64]	; 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ea:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80018ee:	f005 fe27 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	f040 81c0 	bne.w	8001c78 <main+0x884>
	sConfigOC.Pulse = 0;
 80018f8:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80018fa:	2204      	movs	r2, #4
 80018fc:	a910      	add	r1, sp, #64	; 0x40
 80018fe:	4854      	ldr	r0, [pc, #336]	; (8001a50 <main+0x65c>)
	sConfigOC.Pulse = 0;
 8001900:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001902:	f005 fe1d 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 8001906:	2800      	cmp	r0, #0
 8001908:	f040 81b3 	bne.w	8001c72 <main+0x87e>
	sConfigOC.Pulse = 0;
 800190c:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800190e:	2208      	movs	r2, #8
 8001910:	a910      	add	r1, sp, #64	; 0x40
 8001912:	484f      	ldr	r0, [pc, #316]	; (8001a50 <main+0x65c>)
	sConfigOC.Pulse = 0;
 8001914:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001916:	f005 fe13 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 800191a:	2800      	cmp	r0, #0
 800191c:	f040 81a6 	bne.w	8001c6c <main+0x878>
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001920:	2070      	movs	r0, #112	; 0x70
	sConfigOC.Pulse = 0;
 8001922:	2300      	movs	r3, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001924:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001926:	220c      	movs	r2, #12
 8001928:	a910      	add	r1, sp, #64	; 0x40
 800192a:	4849      	ldr	r0, [pc, #292]	; (8001a50 <main+0x65c>)
	sConfigOC.Pulse = 0;
 800192c:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800192e:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001930:	f005 fe06 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 8001934:	2800      	cmp	r0, #0
 8001936:	f040 8196 	bne.w	8001c66 <main+0x872>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800193a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800193e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001942:	f44f 7080 	mov.w	r0, #256	; 0x100
	sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS ) / 2);
 8001946:	2244      	movs	r2, #68	; 0x44
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001948:	9318      	str	r3, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800194a:	9119      	str	r1, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800194c:	2300      	movs	r3, #0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001952:	901a      	str	r0, [sp, #104]	; 0x68
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001954:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
	sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS ) / 2);
 8001958:	921b      	str	r2, [sp, #108]	; 0x6c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800195a:	931c      	str	r3, [sp, #112]	; 0x70
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800195c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001960:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001964:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001968:	911d      	str	r1, [sp, #116]	; 0x74
	sBreakDeadTimeConfig.Break2Filter = 3;
 800196a:	2303      	movs	r3, #3
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800196c:	9020      	str	r0, [sp, #128]	; 0x80
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800196e:	a918      	add	r1, sp, #96	; 0x60
 8001970:	4837      	ldr	r0, [pc, #220]	; (8001a50 <main+0x65c>)
	sBreakDeadTimeConfig.Break2Filter = 3;
 8001972:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001976:	f006 fa73 	bl	8007e60 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	2800      	cmp	r0, #0
 800197c:	f040 8170 	bne.w	8001c60 <main+0x86c>
	HAL_TIM_MspPostInit(&htim1);
 8001980:	4833      	ldr	r0, [pc, #204]	; (8001a50 <main+0x65c>)
 8001982:	f002 f99b 	bl	8003cbc <HAL_TIM_MspPostInit>
	htim4.Instance = TIM4;
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <main+0x664>)
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <main+0x668>)
 800198a:	6013      	str	r3, [r2, #0]
	htim4.Init.Period = M1_PULSE_NBR;
 800198c:	f240 138f 	movw	r3, #399	; 0x18f
 8001990:	60d3      	str	r3, [r2, #12]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001992:	2103      	movs	r1, #3
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001994:	2300      	movs	r3, #0
	htim4.Init.Prescaler = 0;
 8001996:	6053      	str	r3, [r2, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	6093      	str	r3, [r2, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	6113      	str	r3, [r2, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800199e:	4610      	mov	r0, r2
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019a0:	9319      	str	r3, [sp, #100]	; 0x64
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a2:	2201      	movs	r2, #1
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019a4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80019a8:	9312      	str	r3, [sp, #72]	; 0x48
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80019ac:	931d      	str	r3, [sp, #116]	; 0x74
 80019ae:	931f      	str	r3, [sp, #124]	; 0x7c
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019b0:	9118      	str	r1, [sp, #96]	; 0x60
	sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80019b2:	230c      	movs	r3, #12
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80019b4:	a918      	add	r1, sp, #96	; 0x60
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b6:	921a      	str	r2, [sp, #104]	; 0x68
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	921e      	str	r2, [sp, #120]	; 0x78
	sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80019ba:	931c      	str	r3, [sp, #112]	; 0x70
	sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80019bc:	9320      	str	r3, [sp, #128]	; 0x80
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80019be:	f005 fced 	bl	800739c <HAL_TIM_Encoder_Init>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	f040 8149 	bne.w	8001c5a <main+0x866>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80019ca:	a910      	add	r1, sp, #64	; 0x40
 80019cc:	4822      	ldr	r0, [pc, #136]	; (8001a58 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80019d2:	f006 f9f1 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	f040 813c 	bne.w	8001c54 <main+0x860>
	huart2.Instance = USART2;
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <main+0x66c>)
 80019de:	4921      	ldr	r1, [pc, #132]	; (8001a64 <main+0x670>)
	huart2.Init.BaudRate = 2000000;
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <main+0x674>)
	huart2.Instance = USART2;
 80019e2:	6019      	str	r1, [r3, #0]
	huart2.Init.BaudRate = 2000000;
 80019e4:	605a      	str	r2, [r3, #4]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019e6:	210c      	movs	r1, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e8:	2200      	movs	r2, #0
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019ea:	4618      	mov	r0, r3
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	6159      	str	r1, [r3, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019ee:	e9c3 2202 	strd	r2, r2, [r3, #8]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019f2:	611a      	str	r2, [r3, #16]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	e9c3 2206 	strd	r2, r2, [r3, #24]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f8:	e9c3 2208 	strd	r2, r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019fe:	f006 fc05 	bl	800820c <HAL_UART_Init>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	f040 8123 	bne.w	8001c4e <main+0x85a>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4815      	ldr	r0, [pc, #84]	; (8001a60 <main+0x66c>)
 8001a0c:	f006 fe34 	bl	8008678 <HAL_UARTEx_SetTxFifoThreshold>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f040 8119 	bne.w	8001c48 <main+0x854>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <main+0x66c>)
 8001a1a:	f006 fe7f 	bl	800871c <HAL_UARTEx_SetRxFifoThreshold>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	f040 810f 	bne.w	8001c42 <main+0x84e>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <main+0x66c>)
 8001a26:	f006 fe09 	bl	800863c <HAL_UARTEx_DisableFifoMode>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f040 8106 	bne.w	8001c3c <main+0x848>
 8001a30:	e01c      	b.n	8001a6c <main+0x678>
 8001a32:	bf00      	nop
 8001a34:	20000930 	.word	0x20000930
 8001a38:	20000a5c 	.word	0x20000a5c
 8001a3c:	40010300 	.word	0x40010300
 8001a40:	200008a8 	.word	0x200008a8
 8001a44:	40010304 	.word	0x40010304
 8001a48:	200009b0 	.word	0x200009b0
 8001a4c:	40010308 	.word	0x40010308
 8001a50:	20000bb4 	.word	0x20000bb4
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	200008e4 	.word	0x200008e4
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	20000c70 	.word	0x20000c70
 8001a64:	40004400 	.word	0x40004400
 8001a68:	001e8480 	.word	0x001e8480
	MX_MotorControl_Init();
 8001a6c:	f001 fb9e 	bl	80031ac <MX_MotorControl_Init>
	hfdcan1.Instance = FDCAN1;
 8001a70:	4ba9      	ldr	r3, [pc, #676]	; (8001d18 <main+0x924>)
 8001a72:	4aaa      	ldr	r2, [pc, #680]	; (8001d1c <main+0x928>)
 8001a74:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.NominalPrescaler = 10;
 8001a76:	210a      	movs	r1, #10
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a78:	2200      	movs	r2, #0
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a7a:	e9c3 2201 	strd	r2, r2, [r3, #4]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a7e:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a80:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8001a82:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8001a84:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.ExtFiltersNbr = 0;
 8001a86:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.NominalPrescaler = 10;
 8001a8c:	6159      	str	r1, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 4;
 8001a8e:	2204      	movs	r2, #4
	hfdcan1.Init.DataPrescaler = 10;
 8001a90:	6259      	str	r1, [r3, #36]	; 0x24
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8001a92:	4618      	mov	r0, r3
	hfdcan1.Init.NominalTimeSeg1 = 12;
 8001a94:	210c      	movs	r1, #12
	hfdcan1.Init.NominalSyncJumpWidth = 4;
 8001a96:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg2 = 4;
 8001a98:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataSyncJumpWidth = 4;
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg2 = 4;
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.NominalTimeSeg1 = 12;
 8001a9e:	61d9      	str	r1, [r3, #28]
	hfdcan1.Init.DataTimeSeg1 = 12;
 8001aa0:	62d9      	str	r1, [r3, #44]	; 0x2c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8001aa2:	f004 f8b5 	bl	8005c10 <HAL_FDCAN_Init>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	f040 80c5 	bne.w	8001c36 <main+0x842>
	htim2.Instance = TIM2;
 8001aac:	4a9c      	ldr	r2, [pc, #624]	; (8001d20 <main+0x92c>)
 8001aae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 1700 - 1;
 8001ab2:	f240 63a3 	movw	r3, #1699	; 0x6a3
	htim2.Init.Period = 9999;
 8001ab6:	f242 710f 	movw	r1, #9999	; 0x270f
	htim2.Instance = TIM2;
 8001aba:	6010      	str	r0, [r2, #0]
	htim2.Init.Prescaler = 1700 - 1;
 8001abc:	6053      	str	r3, [r2, #4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001abe:	4610      	mov	r0, r2
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ac0:	2300      	movs	r3, #0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	e9c2 3102 	strd	r3, r1, [r2, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ac6:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 8001aca:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ace:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8001ad2:	9312      	str	r3, [sp, #72]	; 0x48
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	6113      	str	r3, [r2, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001ad8:	f005 fad0 	bl	800707c <HAL_TIM_Base_Init>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f040 80a7 	bne.w	8001c30 <main+0x83c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001ae6:	a918      	add	r1, sp, #96	; 0x60
 8001ae8:	488d      	ldr	r0, [pc, #564]	; (8001d20 <main+0x92c>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001aec:	f005 ff1a 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f040 809a 	bne.w	8001c2a <main+0x836>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001af8:	a910      	add	r1, sp, #64	; 0x40
 8001afa:	4889      	ldr	r0, [pc, #548]	; (8001d20 <main+0x92c>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afe:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b00:	f006 f95a 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	f040 808d 	bne.w	8001c24 <main+0x830>
	htim3.Instance = TIM3;
 8001b0a:	4a86      	ldr	r2, [pc, #536]	; (8001d24 <main+0x930>)
 8001b0c:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <main+0x934>)
 8001b0e:	6013      	str	r3, [r2, #0]
	htim3.Init.Prescaler = 1700 - 1;
 8001b10:	f240 63a3 	movw	r3, #1699	; 0x6a3
	htim3.Init.Period = 9999;
 8001b14:	f242 710f 	movw	r1, #9999	; 0x270f
	htim3.Init.Prescaler = 1700 - 1;
 8001b18:	6053      	str	r3, [r2, #4]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b1a:	4610      	mov	r0, r2
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b1c:	2300      	movs	r3, #0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	e9c2 3102 	strd	r3, r1, [r2, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b22:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 8001b26:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b2a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8001b2e:	9312      	str	r3, [sp, #72]	; 0x48
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	6113      	str	r3, [r2, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	6193      	str	r3, [r2, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b34:	f005 faa2 	bl	800707c <HAL_TIM_Base_Init>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d170      	bne.n	8001c1e <main+0x82a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b40:	a918      	add	r1, sp, #96	; 0x60
 8001b42:	4878      	ldr	r0, [pc, #480]	; (8001d24 <main+0x930>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b46:	f005 feed 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d164      	bne.n	8001c18 <main+0x824>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b50:	a910      	add	r1, sp, #64	; 0x40
 8001b52:	4874      	ldr	r0, [pc, #464]	; (8001d24 <main+0x930>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b58:	f006 f92e 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d158      	bne.n	8001c12 <main+0x81e>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2104      	movs	r1, #4
 8001b64:	2018      	movs	r0, #24
 8001b66:	f003 fef1 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001b6a:	2018      	movs	r0, #24
 8001b6c:	f003 ff24 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	4611      	mov	r1, r2
 8001b74:	2019      	movs	r0, #25
 8001b76:	f003 fee9 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b7a:	2019      	movs	r0, #25
 8001b7c:	f003 ff1c 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	2012      	movs	r0, #18
 8001b86:	f003 fee1 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b8a:	2012      	movs	r0, #18
 8001b8c:	f003 ff14 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2103      	movs	r1, #3
 8001b94:	201e      	movs	r0, #30
 8001b96:	f003 fed9 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b9a:	201e      	movs	r0, #30
 8001b9c:	f003 ff0c 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	2017      	movs	r0, #23
 8001ba6:	f003 fed1 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001baa:	2017      	movs	r0, #23
 8001bac:	f003 ff04 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	2026      	movs	r0, #38	; 0x26
 8001bb6:	f003 fec9 	bl	800594c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bba:	2026      	movs	r0, #38	; 0x26
 8001bbc:	f003 fefc 	bl	80059b8 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc6:	4859      	ldr	r0, [pc, #356]	; (8001d2c <main+0x938>)
 8001bc8:	f004 fbd0 	bl	800636c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001bcc:	4857      	ldr	r0, [pc, #348]	; (8001d2c <main+0x938>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	f004 fbcb 	bl	800636c <HAL_GPIO_WritePin>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bd6:	4850      	ldr	r0, [pc, #320]	; (8001d18 <main+0x924>)
 8001bd8:	f004 f90c 	bl	8005df4 <HAL_FDCAN_Start>
 8001bdc:	b9b0      	cbnz	r0, 8001c0c <main+0x818>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001bde:	2200      	movs	r2, #0
 8001be0:	2101      	movs	r1, #1
 8001be2:	484d      	ldr	r0, [pc, #308]	; (8001d18 <main+0x924>)
 8001be4:	f004 f996 	bl	8005f14 <HAL_FDCAN_ActivateNotification>
 8001be8:	b968      	cbnz	r0, 8001c06 <main+0x812>
	PID_SetKP(&PID_PosParamsM1, 500);
 8001bea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bee:	4850      	ldr	r0, [pc, #320]	; (8001d30 <main+0x93c>)
 8001bf0:	f007 f898 	bl	8008d24 <PID_SetKP>
	PID_SetKI(&PID_PosParamsM1, 0);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	484e      	ldr	r0, [pc, #312]	; (8001d30 <main+0x93c>)
 8001bf8:	f007 f896 	bl	8008d28 <PID_SetKI>
	PID_SetKD(&PID_PosParamsM1, 100);
 8001bfc:	2164      	movs	r1, #100	; 0x64
 8001bfe:	484c      	ldr	r0, [pc, #304]	; (8001d30 <main+0x93c>)
 8001c00:	f007 f8a2 	bl	8008d48 <PID_SetKD>
 8001c04:	e7fe      	b.n	8001c04 <main+0x810>
		Error_Handler();
 8001c06:	f7ff fbd9 	bl	80013bc <Error_Handler>
 8001c0a:	e7ee      	b.n	8001bea <main+0x7f6>
		Error_Handler();
 8001c0c:	f7ff fbd6 	bl	80013bc <Error_Handler>
 8001c10:	e7e5      	b.n	8001bde <main+0x7ea>
		Error_Handler();
 8001c12:	f7ff fbd3 	bl	80013bc <Error_Handler>
 8001c16:	e7a3      	b.n	8001b60 <main+0x76c>
		Error_Handler();
 8001c18:	f7ff fbd0 	bl	80013bc <Error_Handler>
 8001c1c:	e797      	b.n	8001b4e <main+0x75a>
		Error_Handler();
 8001c1e:	f7ff fbcd 	bl	80013bc <Error_Handler>
 8001c22:	e78b      	b.n	8001b3c <main+0x748>
		Error_Handler();
 8001c24:	f7ff fbca 	bl	80013bc <Error_Handler>
 8001c28:	e76f      	b.n	8001b0a <main+0x716>
		Error_Handler();
 8001c2a:	f7ff fbc7 	bl	80013bc <Error_Handler>
 8001c2e:	e762      	b.n	8001af6 <main+0x702>
		Error_Handler();
 8001c30:	f7ff fbc4 	bl	80013bc <Error_Handler>
 8001c34:	e755      	b.n	8001ae2 <main+0x6ee>
		Error_Handler();
 8001c36:	f7ff fbc1 	bl	80013bc <Error_Handler>
 8001c3a:	e737      	b.n	8001aac <main+0x6b8>
		Error_Handler();
 8001c3c:	f7ff fbbe 	bl	80013bc <Error_Handler>
 8001c40:	e714      	b.n	8001a6c <main+0x678>
		Error_Handler();
 8001c42:	f7ff fbbb 	bl	80013bc <Error_Handler>
 8001c46:	e6ed      	b.n	8001a24 <main+0x630>
		Error_Handler();
 8001c48:	f7ff fbb8 	bl	80013bc <Error_Handler>
 8001c4c:	e6e3      	b.n	8001a16 <main+0x622>
		Error_Handler();
 8001c4e:	f7ff fbb5 	bl	80013bc <Error_Handler>
 8001c52:	e6d9      	b.n	8001a08 <main+0x614>
		Error_Handler();
 8001c54:	f7ff fbb2 	bl	80013bc <Error_Handler>
 8001c58:	e6c0      	b.n	80019dc <main+0x5e8>
		Error_Handler();
 8001c5a:	f7ff fbaf 	bl	80013bc <Error_Handler>
 8001c5e:	e6b3      	b.n	80019c8 <main+0x5d4>
		Error_Handler();
 8001c60:	f7ff fbac 	bl	80013bc <Error_Handler>
 8001c64:	e68c      	b.n	8001980 <main+0x58c>
		Error_Handler();
 8001c66:	f7ff fba9 	bl	80013bc <Error_Handler>
 8001c6a:	e666      	b.n	800193a <main+0x546>
		Error_Handler();
 8001c6c:	f7ff fba6 	bl	80013bc <Error_Handler>
 8001c70:	e656      	b.n	8001920 <main+0x52c>
		Error_Handler();
 8001c72:	f7ff fba3 	bl	80013bc <Error_Handler>
 8001c76:	e649      	b.n	800190c <main+0x518>
		Error_Handler();
 8001c78:	f7ff fba0 	bl	80013bc <Error_Handler>
 8001c7c:	e63c      	b.n	80018f8 <main+0x504>
		Error_Handler();
 8001c7e:	f7ff fb9d 	bl	80013bc <Error_Handler>
 8001c82:	e628      	b.n	80018d6 <main+0x4e2>
		Error_Handler();
 8001c84:	f7ff fb9a 	bl	80013bc <Error_Handler>
 8001c88:	e61b      	b.n	80018c2 <main+0x4ce>
		Error_Handler();
 8001c8a:	f7ff fb97 	bl	80013bc <Error_Handler>
 8001c8e:	e60e      	b.n	80018ae <main+0x4ba>
		Error_Handler();
 8001c90:	f7ff fb94 	bl	80013bc <Error_Handler>
 8001c94:	e5fd      	b.n	8001892 <main+0x49e>
		Error_Handler();
 8001c96:	f7ff fb91 	bl	80013bc <Error_Handler>
 8001c9a:	e5ee      	b.n	800187a <main+0x486>
		Error_Handler();
 8001c9c:	f7ff fb8e 	bl	80013bc <Error_Handler>
 8001ca0:	e5e0      	b.n	8001864 <main+0x470>
		Error_Handler();
 8001ca2:	f7ff fb8b 	bl	80013bc <Error_Handler>
 8001ca6:	e5d7      	b.n	8001858 <main+0x464>
		Error_Handler();
 8001ca8:	f7ff fb88 	bl	80013bc <Error_Handler>
 8001cac:	e5a7      	b.n	80017fe <main+0x40a>
		Error_Handler();
 8001cae:	f7ff fb85 	bl	80013bc <Error_Handler>
 8001cb2:	e58c      	b.n	80017ce <main+0x3da>
		Error_Handler();
 8001cb4:	f7ff fb82 	bl	80013bc <Error_Handler>
 8001cb8:	e572      	b.n	80017a0 <main+0x3ac>
		Error_Handler();
 8001cba:	f7ff fb7f 	bl	80013bc <Error_Handler>
 8001cbe:	e558      	b.n	8001772 <main+0x37e>
		Error_Handler();
 8001cc0:	f7ff fb7c 	bl	80013bc <Error_Handler>
 8001cc4:	e53c      	b.n	8001740 <main+0x34c>
		Error_Handler();
 8001cc6:	f7ff fb79 	bl	80013bc <Error_Handler>
 8001cca:	e4fd      	b.n	80016c8 <main+0x2d4>
		Error_Handler();
 8001ccc:	f7ff fb76 	bl	80013bc <Error_Handler>
 8001cd0:	e4f2      	b.n	80016b8 <main+0x2c4>
		Error_Handler();
 8001cd2:	f7ff fb73 	bl	80013bc <Error_Handler>
 8001cd6:	e4dd      	b.n	8001694 <main+0x2a0>
		Error_Handler();
 8001cd8:	f7ff fb70 	bl	80013bc <Error_Handler>
 8001cdc:	e4c8      	b.n	8001670 <main+0x27c>
		Error_Handler();
 8001cde:	f7ff fb6d 	bl	80013bc <Error_Handler>
 8001ce2:	e4b3      	b.n	800164c <main+0x258>
		Error_Handler();
 8001ce4:	f7ff fb6a 	bl	80013bc <Error_Handler>
 8001ce8:	e4a4      	b.n	8001634 <main+0x240>
		Error_Handler();
 8001cea:	f7ff fb67 	bl	80013bc <Error_Handler>
 8001cee:	e47f      	b.n	80015f0 <main+0x1fc>
		Error_Handler();
 8001cf0:	f7ff fb64 	bl	80013bc <Error_Handler>
 8001cf4:	e457      	b.n	80015a6 <main+0x1b2>
		Error_Handler();
 8001cf6:	f7ff fb61 	bl	80013bc <Error_Handler>
 8001cfa:	e449      	b.n	8001590 <main+0x19c>
		Error_Handler();
 8001cfc:	f7ff fb5e 	bl	80013bc <Error_Handler>
 8001d00:	e434      	b.n	800156c <main+0x178>
		Error_Handler();
 8001d02:	f7ff fb5b 	bl	80013bc <Error_Handler>
 8001d06:	e425      	b.n	8001554 <main+0x160>
		Error_Handler();
 8001d08:	f7ff fb58 	bl	80013bc <Error_Handler>
 8001d0c:	e400      	b.n	8001510 <main+0x11c>
		Error_Handler();
 8001d0e:	f7ff fb55 	bl	80013bc <Error_Handler>
 8001d12:	f7ff bbf4 	b.w	80014fe <main+0x10a>
 8001d16:	bf00      	nop
 8001d18:	20000b50 	.word	0x20000b50
 8001d1c:	40006400 	.word	0x40006400
 8001d20:	20000c24 	.word	0x20000c24
 8001d24:	20000a10 	.word	0x20000a10
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	2000020c 	.word	0x2000020c

08001d34 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <MC_StartMotor1+0x8>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f000 b886 	b.w	8001e48 <MCI_StartMotor>
 8001d3c:	20000dec 	.word	0x20000dec

08001d40 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001d40:	4b01      	ldr	r3, [pc, #4]	; (8001d48 <MC_StopMotor1+0x8>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	f000 b88a 	b.w	8001e5c <MCI_StopMotor>
 8001d48:	20000dec 	.word	0x20000dec

08001d4c <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1( float fTargetPosition, float fDuration )
{
	MCI_ExecPositionCommand( pMCI[M1], fTargetPosition, fDuration );
 8001d4c:	4b01      	ldr	r3, [pc, #4]	; (8001d54 <MC_ProgramPositionCommandMotor1+0x8>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f000 b840 	b.w	8001dd4 <MCI_ExecPositionCommand>
 8001d54:	20000dec 	.word	0x20000dec

08001d58 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <MC_AcknowledgeFaultMotor1+0x8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	f000 b882 	b.w	8001e64 <MCI_FaultAcknowledged>
 8001d60:	20000dec 	.word	0x20000dec

08001d64 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <MC_GetSTMStateMotor1+0x8>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	f000 b8be 	b.w	8001ee8 <MCI_GetSTMState>
 8001d6c:	20000dec 	.word	0x20000dec

08001d70 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
 8001d70:	b410      	push	{r4}
 8001d72:	9c01      	ldr	r4, [sp, #4]
  pHandle->pSTM = pSTM;
 8001d74:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
  pHandle->pPosCtrl = pPosCtrl;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001d76:	2100      	movs	r1, #0
  pHandle->pPosCtrl = pPosCtrl;
 8001d78:	60c4      	str	r4, [r0, #12]
  pHandle->pFOCVars = pFOCVars;
 8001d7a:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001d7e:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 8001d80:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8001d84:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001d86:	7701      	strb	r1, [r0, #28]
}
 8001d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop

08001d90 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001d90:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8001d92:	8241      	strh	r1, [r0, #18]
  pHandle->hDurationms = hDurationms;
 8001d94:	8342      	strh	r2, [r0, #26]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001d96:	7403      	strb	r3, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001d98:	7703      	strb	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8001d9a:	7743      	strb	r3, [r0, #29]
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001da0:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001da2:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001da4:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001da6:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001da8:	7405      	strb	r5, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001daa:	7704      	strb	r4, [r0, #28]
  pHandle->hFinalTorque = hFinalTorque;
 8001dac:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = hDurationms;
 8001dae:	8342      	strh	r2, [r0, #26]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001db0:	7743      	strb	r3, [r0, #29]
}
 8001db2:	bc30      	pop	{r4, r5}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001db8:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dba:	2201      	movs	r2, #1
{
 8001dbc:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001dbe:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001dc0:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8001dc2:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001dc6:	7404      	strb	r4, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dc8:	7702      	strb	r2, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001dca:	7743      	strb	r3, [r0, #29]
}
 8001dcc:	b003      	add	sp, #12
 8001dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001ddc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001de0:	2200      	movs	r2, #0
{
 8001de2:	b082      	sub	sp, #8
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 8001de8:	eeb0 8a60 	vmov.f32	s16, s1
 8001dec:	eef0 8a40 	vmov.f32	s17, s0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001df0:	f008 fa8c 	bl	800a30c <STC_GetSpeedSensor>
 8001df4:	f008 fa30 	bl	800a258 <SPD_GetMecAngle>
  if (Duration > 0) {
 8001df8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e00:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8001e02:	dd14      	ble.n	8001e2e <MCI_ExecPositionCommand+0x5a>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e04:	ee07 0a90 	vmov	s15, r0
 8001e08:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001e44 <MCI_ExecPositionCommand+0x70>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001e0c:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001e12:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e16:	ee27 0a80 	vmul.f32	s0, s15, s0
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001e1a:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8001e1e:	f008 fbfb 	bl	800a618 <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	7763      	strb	r3, [r4, #29]
}
 8001e26:	b002      	add	sp, #8
 8001e28:	ecbd 8b02 	vpop	{d8}
 8001e2c:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8001e2e:	eeb0 0a68 	vmov.f32	s0, s17
 8001e32:	68e0      	ldr	r0, [r4, #12]
 8001e34:	f008 fc60 	bl	800a6f8 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	7763      	strb	r3, [r4, #29]
}
 8001e3c:	b002      	add	sp, #8
 8001e3e:	ecbd 8b02 	vpop	{d8}
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	38c90fdb 	.word	0x38c90fdb

08001e48 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001e48:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001e4a:	2103      	movs	r1, #3
{
 8001e4c:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001e4e:	6800      	ldr	r0, [r0, #0]
 8001e50:	f008 fb36 	bl	800a4c0 <STM_NextState>

  if ( RetVal == true )
 8001e54:	b108      	cbz	r0, 8001e5a <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001e56:	2301      	movs	r3, #1
 8001e58:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001e5c:	6800      	ldr	r0, [r0, #0]
 8001e5e:	2107      	movs	r1, #7
 8001e60:	f008 bb2e 	b.w	800a4c0 <STM_NextState>

08001e64 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001e64:	6800      	ldr	r0, [r0, #0]
 8001e66:	f008 bba1 	b.w	800a5ac <STM_FaultAcknowledged>
 8001e6a:	bf00      	nop

08001e6c <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	f008 bb26 	b.w	800a4c0 <STM_NextState>

08001e74 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8001e74:	b110      	cbz	r0, 8001e7c <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001e76:	7f03      	ldrb	r3, [r0, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d000      	beq.n	8001e7e <MCI_ExecBufferedCommands+0xa>
 8001e7c:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8001e7e:	7c01      	ldrb	r1, [r0, #16]
 8001e80:	2902      	cmp	r1, #2
{
 8001e82:	b510      	push	{r4, lr}
 8001e84:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8001e86:	d01f      	beq.n	8001ec8 <MCI_ExecBufferedCommands+0x54>
 8001e88:	2903      	cmp	r1, #3
 8001e8a:	d004      	beq.n	8001e96 <MCI_ExecBufferedCommands+0x22>
 8001e8c:	2901      	cmp	r1, #1
 8001e8e:	d00b      	beq.n	8001ea8 <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001e90:	2303      	movs	r3, #3
 8001e92:	7723      	strb	r3, [r4, #28]
      }
    }
  }
}
 8001e94:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001e96:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001e98:	f8d0 1016 	ldr.w	r1, [r0, #22]
 8001e9c:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001e9e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	7723      	strb	r3, [r4, #28]
}
 8001ea6:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001ea8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001eb2:	f008 fa45 	bl	800a340 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001eb6:	8b62      	ldrh	r2, [r4, #26]
 8001eb8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001ebc:	6860      	ldr	r0, [r4, #4]
 8001ebe:	f008 fa43 	bl	800a348 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d0e4      	beq.n	8001e90 <MCI_ExecBufferedCommands+0x1c>
 8001ec6:	e7ec      	b.n	8001ea2 <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001ec8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001ed2:	f008 fa35 	bl	800a340 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001ed6:	8b62      	ldrh	r2, [r4, #26]
 8001ed8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001edc:	6860      	ldr	r0, [r4, #4]
 8001ede:	f008 fa33 	bl	800a348 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d0d4      	beq.n	8001e90 <MCI_ExecBufferedCommands+0x1c>
 8001ee6:	e7dc      	b.n	8001ea2 <MCI_ExecBufferedCommands+0x2e>

08001ee8 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	f008 bb5d 	b.w	800a5a8 <STM_GetState>
 8001eee:	bf00      	nop

08001ef0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001ef0:	7f40      	ldrb	r0, [r0, #29]
 8001ef2:	4770      	bx	lr

08001ef4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001ef4:	7c03      	ldrb	r3, [r0, #16]
 8001ef6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001ef8:	bf0c      	ite	eq
 8001efa:	f9b0 0012 	ldrsheq.w	r0, [r0, #18]
  int16_t hRetVal = 0;
 8001efe:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001f04:	6840      	ldr	r0, [r0, #4]
 8001f06:	f008 ba69 	b.w	800a3dc <STC_StopRamp>
 8001f0a:	bf00      	nop

08001f0c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001f0c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001f0e:	6840      	ldr	r0, [r0, #4]
 8001f10:	f008 f9fc 	bl	800a30c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001f18:	f008 b9a0 	b.w	800a25c <SPD_GetAvrgMecSpeedUnit>

08001f1c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001f1c:	6840      	ldr	r0, [r0, #4]
 8001f1e:	f008 b9ff 	b.w	800a320 <STC_GetMecSpeedRefUnit>
 8001f22:	bf00      	nop

08001f24 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001f24:	6883      	ldr	r3, [r0, #8]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	b283      	uxth	r3, r0
{
 8001f2a:	b082      	sub	sp, #8
}
 8001f2c:	f363 000f 	bfi	r0, r3, #0, #16
 8001f30:	b002      	add	sp, #8
 8001f32:	4770      	bx	lr

08001f34 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001f34:	6883      	ldr	r3, [r0, #8]
 8001f36:	6858      	ldr	r0, [r3, #4]
 8001f38:	b283      	uxth	r3, r0
{
 8001f3a:	b082      	sub	sp, #8
}
 8001f3c:	f363 000f 	bfi	r0, r3, #0, #16
 8001f40:	b002      	add	sp, #8
 8001f42:	4770      	bx	lr

08001f44 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001f44:	6883      	ldr	r3, [r0, #8]
 8001f46:	68d8      	ldr	r0, [r3, #12]
 8001f48:	b283      	uxth	r3, r0
{
 8001f4a:	b082      	sub	sp, #8
}
 8001f4c:	f363 000f 	bfi	r0, r3, #0, #16
 8001f50:	b002      	add	sp, #8
 8001f52:	4770      	bx	lr

08001f54 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001f54:	6883      	ldr	r3, [r0, #8]
 8001f56:	6918      	ldr	r0, [r3, #16]
 8001f58:	b283      	uxth	r3, r0
{
 8001f5a:	b082      	sub	sp, #8
}
 8001f5c:	f363 000f 	bfi	r0, r3, #0, #16
 8001f60:	b002      	add	sp, #8
 8001f62:	4770      	bx	lr

08001f64 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001f64:	6883      	ldr	r3, [r0, #8]
 8001f66:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8001f6a:	b283      	uxth	r3, r0
{
 8001f6c:	b082      	sub	sp, #8
}
 8001f6e:	f363 000f 	bfi	r0, r3, #0, #16
 8001f72:	b002      	add	sp, #8
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001f78:	6883      	ldr	r3, [r0, #8]
 8001f7a:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8001f7e:	b283      	uxth	r3, r0
{
 8001f80:	b082      	sub	sp, #8
}
 8001f82:	f363 000f 	bfi	r0, r3, #0, #16
 8001f86:	b002      	add	sp, #8
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001f8c:	6883      	ldr	r3, [r0, #8]
}
 8001f8e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001f92:	4770      	bx	lr

08001f94 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001f94:	6883      	ldr	r3, [r0, #8]
 8001f96:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8001f98:	8299      	strh	r1, [r3, #20]
}
 8001f9a:	4770      	bx	lr

08001f9c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001f9c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001f9e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001fa2:	f008 fa59 	bl	800a458 <STC_GetDefaultIqdref>
 8001fa6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001faa:	8220      	strh	r0, [r4, #16]
 8001fac:	8263      	strh	r3, [r4, #18]
}
 8001fae:	bd10      	pop	{r4, pc}

08001fb0 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001fb0:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001fb4:	b202      	sxth	r2, r0
 8001fb6:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001fba:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001fbe:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001fc2:	4240      	negs	r0, r0
 8001fc4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8001fc8:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001fca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8001fce:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8001fd0:	da04      	bge.n	8001fdc <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001fd2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8001fd6:	da0c      	bge.n	8001ff2 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MCM_Clarke+0x48>)
 8001fda:	e001      	b.n	8001fe0 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8001fdc:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f362 000f 	bfi	r0, r2, #0, #16
 8001fea:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001fee:	b004      	add	sp, #16
 8001ff0:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001ff2:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 8001ff4:	d1f4      	bne.n	8001fe0 <MCM_Clarke+0x30>
 8001ff6:	e7ef      	b.n	8001fd8 <MCM_Clarke+0x28>
 8001ff8:	ffff8001 	.word	0xffff8001

08001ffc <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MCM_Trig_Functions+0x28>)
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <MCM_Trig_Functions+0x2c>)
 8002000:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8002002:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8002006:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800200a:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800200c:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 800200e:	2000      	movs	r0, #0
 8002010:	b29a      	uxth	r2, r3
 8002012:	f362 000f 	bfi	r0, r2, #0, #16
 8002016:	0c1b      	lsrs	r3, r3, #16
{
 8002018:	b082      	sub	sp, #8
  return (CosSin.Components);
 800201a:	f363 401f 	bfi	r0, r3, #16, #16

}
 800201e:	b002      	add	sp, #8
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40020c00 	.word	0x40020c00
 8002028:	00600040 	.word	0x00600040

0800202c <MCM_Park>:
{
 800202c:	b530      	push	{r4, r5, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	b204      	sxth	r4, r0
 8002032:	9001      	str	r0, [sp, #4]
 8002034:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002036:	4608      	mov	r0, r1
 8002038:	f7ff ffe0 	bl	8001ffc <MCM_Trig_Functions>
 800203c:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800203e:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002042:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8002044:	fb05 3310 	mls	r3, r5, r0, r3
 8002048:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 800204a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204e:	da04      	bge.n	800205a <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 8002050:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002054:	da1e      	bge.n	8002094 <MCM_Park+0x68>
    Output.q = -32767;
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <MCM_Park+0x70>)
 8002058:	e001      	b.n	800205e <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 800205a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800205e:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002062:	fb04 1000 	mla	r0, r4, r0, r1
 8002066:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8002068:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800206c:	da04      	bge.n	8002078 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 800206e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8002072:	da0c      	bge.n	800208e <MCM_Park+0x62>
    Output.d = -32767;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MCM_Park+0x70>)
 8002076:	e001      	b.n	800207c <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8002078:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800207c:	b292      	uxth	r2, r2
 800207e:	2000      	movs	r0, #0
 8002080:	b29b      	uxth	r3, r3
 8002082:	f362 000f 	bfi	r0, r2, #0, #16
 8002086:	f363 401f 	bfi	r0, r3, #16, #16
}
 800208a:	b005      	add	sp, #20
 800208c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800208e:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 8002090:	d1f4      	bne.n	800207c <MCM_Park+0x50>
 8002092:	e7ef      	b.n	8002074 <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002094:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8002096:	d1e2      	bne.n	800205e <MCM_Park+0x32>
 8002098:	e7dd      	b.n	8002056 <MCM_Park+0x2a>
 800209a:	bf00      	nop
 800209c:	ffff8001 	.word	0xffff8001

080020a0 <MCM_Rev_Park>:
{
 80020a0:	b530      	push	{r4, r5, lr}
 80020a2:	b085      	sub	sp, #20
 80020a4:	b204      	sxth	r4, r0
 80020a6:	1405      	asrs	r5, r0, #16
 80020a8:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80020aa:	4608      	mov	r0, r1
 80020ac:	f7ff ffa6 	bl	8001ffc <MCM_Trig_Functions>
 80020b0:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80020b2:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80020b6:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80020b8:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80020bc:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80020c0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80020c4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80020c8:	2000      	movs	r0, #0
 80020ca:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80020ce:	f362 000f 	bfi	r0, r2, #0, #16
 80020d2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80020d6:	b005      	add	sp, #20
 80020d8:	bd30      	pop	{r4, r5, pc}
 80020da:	bf00      	nop

080020dc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <FOC_Clear+0x68>)
 80020e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2400      	movs	r4, #0
 80020ec:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 80020ee:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 80020f2:	509c      	str	r4, [r3, r2]
{
 80020f4:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 80020f6:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 80020fa:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 80020fc:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80020fe:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8002102:	50b4      	str	r4, [r6, r2]
 8002104:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002106:	4810      	ldr	r0, [pc, #64]	; (8002148 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8002108:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 800210a:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 800210c:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800210e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002112:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002114:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8002116:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002118:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800211a:	f006 fe0f 	bl	8008d3c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <FOC_Clear+0x70>)
 8002120:	4621      	mov	r1, r4
 8002122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002126:	f006 fe09 	bl	8008d3c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <FOC_Clear+0x74>)
 800212c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002130:	f008 f8ee 	bl	800a310 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <FOC_Clear+0x78>)
 8002136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800213a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800213e:	f007 b80b 	b.w	8009158 <PWMC_SwitchOffPWM>
 8002142:	bf00      	nop
 8002144:	20000d2c 	.word	0x20000d2c
 8002148:	20000d1c 	.word	0x20000d1c
 800214c:	20000de4 	.word	0x20000de4
 8002150:	20000de8 	.word	0x20000de8
 8002154:	20000d10 	.word	0x20000d10

08002158 <MCboot>:
{
 8002158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215c:	b089      	sub	sp, #36	; 0x24
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800215e:	4c6f      	ldr	r4, [pc, #444]	; (800231c <MCboot+0x1c4>)
{
 8002160:	9003      	str	r0, [sp, #12]
  STM_Init(&STM[M1]);
 8002162:	486f      	ldr	r0, [pc, #444]	; (8002320 <MCboot+0x1c8>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002164:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8002384 <MCboot+0x22c>
{
 8002168:	9104      	str	r1, [sp, #16]
  STM_Init(&STM[M1]);
 800216a:	f008 f989 	bl	800a480 <STM_Init>
  bMCBootCompleted = 0;
 800216e:	496d      	ldr	r1, [pc, #436]	; (8002324 <MCboot+0x1cc>)
  pCLM[M1] = &CircleLimitationM1;
 8002170:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <MCboot+0x1d0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002172:	486e      	ldr	r0, [pc, #440]	; (800232c <MCboot+0x1d4>)
  pCLM[M1] = &CircleLimitationM1;
 8002174:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <MCboot+0x1d8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002176:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 8002178:	2400      	movs	r4, #0
  ENC_Init (&ENCODER_M1);
 800217a:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8002388 <MCboot+0x230>
  bMCBootCompleted = 0;
 800217e:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8002180:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 8002182:	f007 fb1f 	bl	80097c4 <R3_2_Init>
  startTimers();
 8002186:	f006 fe7f 	bl	8008e88 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800218a:	4658      	mov	r0, fp
 800218c:	f006 fdc2 	bl	8008d14 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002190:	4d68      	ldr	r5, [pc, #416]	; (8002334 <MCboot+0x1dc>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002192:	4f69      	ldr	r7, [pc, #420]	; (8002338 <MCboot+0x1e0>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8002194:	4b69      	ldr	r3, [pc, #420]	; (800233c <MCboot+0x1e4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002196:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800238c <MCboot+0x234>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800219a:	f8c3 b000 	str.w	fp, [r3]
  ENC_Init (&ENCODER_M1);
 800219e:	4650      	mov	r0, sl
  pSTC[M1] = &SpeednTorqCtrlM1;
 80021a0:	f8c5 8000 	str.w	r8, [r5]
  ENC_Init (&ENCODER_M1);
 80021a4:	f006 fba6 	bl	80088f4 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80021a8:	6829      	ldr	r1, [r5, #0]
 80021aa:	4865      	ldr	r0, [pc, #404]	; (8002340 <MCboot+0x1e8>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80021ac:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8002390 <MCboot+0x238>
  PID_HandleInit(&PIDIqHandle_M1);
 80021b0:	4e64      	ldr	r6, [pc, #400]	; (8002344 <MCboot+0x1ec>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80021b2:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8002394 <MCboot+0x23c>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80021b6:	4653      	mov	r3, sl
 80021b8:	463a      	mov	r2, r7
 80021ba:	f006 fb4b 	bl	8008854 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <MCboot+0x1f0>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80021c0:	4862      	ldr	r0, [pc, #392]	; (800234c <MCboot+0x1f4>)
  pEAC[M1] = &EncAlignCtrlM1;
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <MCboot+0x1e8>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80021c4:	f8c9 0000 	str.w	r0, [r9]
  pEAC[M1] = &EncAlignCtrlM1;
 80021c8:	601a      	str	r2, [r3, #0]
  PID_HandleInit(pPIDPosCtrl[M1]);
 80021ca:	f006 fda3 	bl	8008d14 <PID_HandleInit>
  pPosCtrl[M1] = &pPosCtrlM1;
 80021ce:	4a60      	ldr	r2, [pc, #384]	; (8002350 <MCboot+0x1f8>)
 80021d0:	4860      	ldr	r0, [pc, #384]	; (8002354 <MCboot+0x1fc>)
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 80021d2:	f8d9 1000 	ldr.w	r1, [r9]
  pPosCtrl[M1] = &pPosCtrlM1;
 80021d6:	6010      	str	r0, [r2, #0]
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 80021d8:	4653      	mov	r3, sl
 80021da:	4642      	mov	r2, r8
 80021dc:	f008 f9f8 	bl	800a5d0 <TC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 80021e0:	4b56      	ldr	r3, [pc, #344]	; (800233c <MCboot+0x1e4>)
 80021e2:	6828      	ldr	r0, [r5, #0]
 80021e4:	6819      	ldr	r1, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80021e6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002398 <MCboot+0x240>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80021ea:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800239c <MCboot+0x244>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 80021ee:	4652      	mov	r2, sl
 80021f0:	f008 f876 	bl	800a2e0 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80021f4:	4638      	mov	r0, r7
 80021f6:	f008 fdc9 	bl	800ad8c <VSS_Init>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80021fa:	4f57      	ldr	r7, [pc, #348]	; (8002358 <MCboot+0x200>)
  PID_HandleInit(&PIDIqHandle_M1);
 80021fc:	4630      	mov	r0, r6
 80021fe:	f006 fd89 	bl	8008d14 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8002202:	4856      	ldr	r0, [pc, #344]	; (800235c <MCboot+0x204>)
 8002204:	f006 fd86 	bl	8008d14 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002208:	603e      	str	r6, [r7, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 800220a:	4e55      	ldr	r6, [pc, #340]	; (8002360 <MCboot+0x208>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800220c:	4b55      	ldr	r3, [pc, #340]	; (8002364 <MCboot+0x20c>)
  pPIDId[M1] = &PIDIdHandle_M1;
 800220e:	4f53      	ldr	r7, [pc, #332]	; (800235c <MCboot+0x204>)
 8002210:	6037      	str	r7, [r6, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002212:	4f55      	ldr	r7, [pc, #340]	; (8002368 <MCboot+0x210>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002214:	4e4e      	ldr	r6, [pc, #312]	; (8002350 <MCboot+0x1f8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002216:	603b      	str	r3, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8002218:	4618      	mov	r0, r3
 800221a:	f007 ffc3 	bl	800a1a4 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <MCboot+0x214>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002220:	683a      	ldr	r2, [r7, #0]
  NTC_Init(&TempSensorParamsM1);
 8002222:	4853      	ldr	r0, [pc, #332]	; (8002370 <MCboot+0x218>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002224:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002228:	f8cb 3000 	str.w	r3, [fp]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800222c:	f8c3 810c 	str.w	r8, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8002230:	f006 fd2a 	bl	8008c88 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002234:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <MCboot+0x21c>)
 8002236:	4a50      	ldr	r2, [pc, #320]	; (8002378 <MCboot+0x220>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002238:	484d      	ldr	r0, [pc, #308]	; (8002370 <MCboot+0x218>)
 800223a:	f8c9 0000 	str.w	r0, [r9]
  REMNG_Init(pREMNG[M1]);
 800223e:	4618      	mov	r0, r3
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002240:	6013      	str	r3, [r2, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002242:	2701      	movs	r7, #1
  REMNG_Init(pREMNG[M1]);
 8002244:	f007 fffc 	bl	800a240 <REMNG_Init>
  FOC_Clear(M1);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ff47 	bl	80020dc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800224e:	f888 7024 	strb.w	r7, [r8, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002252:	6828      	ldr	r0, [r5, #0]
 8002254:	f008 f900 	bl	800a458 <STC_GetDefaultIqdref>
 8002258:	4603      	mov	r3, r0
 800225a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800225e:	f8a8 3010 	strh.w	r3, [r8, #16]
 8002262:	f8a8 2012 	strh.w	r2, [r8, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002266:	6828      	ldr	r0, [r5, #0]
 8002268:	f008 f8f6 	bl	800a458 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 800226c:	f8df c130 	ldr.w	ip, [pc, #304]	; 80023a0 <MCboot+0x248>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002270:	6833      	ldr	r3, [r6, #0]
  oMCInterface[M1] = & Mci[M1];
 8002272:	4e42      	ldr	r6, [pc, #264]	; (800237c <MCboot+0x224>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002274:	682a      	ldr	r2, [r5, #0]
 8002276:	492a      	ldr	r1, [pc, #168]	; (8002320 <MCboot+0x1c8>)
 8002278:	9300      	str	r3, [sp, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800227a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 800227e:	4643      	mov	r3, r8
  oMCInterface[M1] = & Mci[M1];
 8002280:	f8c6 c000 	str.w	ip, [r6]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002284:	f8a8 0014 	strh.w	r0, [r8, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002288:	4660      	mov	r0, ip
 800228a:	f7ff fd71 	bl	8001d70 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 800228e:	6828      	ldr	r0, [r5, #0]
 8002290:	f8d6 8000 	ldr.w	r8, [r6]
 8002294:	f008 f8d6 	bl	800a444 <STC_GetMecSpeedRefUnitDefault>
 8002298:	4622      	mov	r2, r4
 800229a:	4601      	mov	r1, r0
 800229c:	4640      	mov	r0, r8
 800229e:	f7ff fd77 	bl	8001d90 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80022a2:	4a26      	ldr	r2, [pc, #152]	; (800233c <MCboot+0x1e4>)
  pMCIList[M1] = oMCInterface[M1];
 80022a4:	6830      	ldr	r0, [r6, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80022a6:	f8d2 c000 	ldr.w	ip, [r2]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <MCboot+0x200>)
  pMCIList[M1] = oMCInterface[M1];
 80022ac:	9002      	str	r0, [sp, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80022ae:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <MCboot+0x208>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <MCboot+0x228>)
  MCT[M1].pPIDId = pPIDId[M1];
 80022b4:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <MCboot+0x1c4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80022b8:	f8db 8000 	ldr.w	r8, [fp]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80022bc:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80022be:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80022c0:	f8d9 5000 	ldr.w	r5, [r9]
 80022c4:	9505      	str	r5, [sp, #20]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80022c6:	4d28      	ldr	r5, [pc, #160]	; (8002368 <MCboot+0x210>)
 80022c8:	f8d5 e000 	ldr.w	lr, [r5]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 80022cc:	4d20      	ldr	r5, [pc, #128]	; (8002350 <MCboot+0x1f8>)
 80022ce:	f8d5 9000 	ldr.w	r9, [r5]
  pMCIList[M1] = oMCInterface[M1];
 80022d2:	9d03      	ldr	r5, [sp, #12]
 80022d4:	46ab      	mov	fp, r5
 80022d6:	9d02      	ldr	r5, [sp, #8]
 80022d8:	f8cb 5000 	str.w	r5, [fp]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80022de:	9a05      	ldr	r2, [sp, #20]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80022e0:	6119      	str	r1, [r3, #16]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80022e2:	e9c3 2e0b 	strd	r2, lr, [r3, #44]	; 0x2c
  MCT[M1].pStateMachine = &STM[M1];
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <MCboot+0x1c8>)
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pPIDIq = pPIDIq[M1];
 80022ea:	e9c3 c600 	strd	ip, r6, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 80022ee:	6098      	str	r0, [r3, #8]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80022f0:	f8c3 803c 	str.w	r8, [r3, #60]	; 0x3c
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 80022f4:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80022f8:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 80022fa:	e9c3 4a05 	strd	r4, sl, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80022fe:	e9c3 4407 	strd	r4, r4, [r3, #28]
  bMCBootCompleted = 1;
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <MCboot+0x1cc>)
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8002304:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  pMCTList[M1] = &MCT[M1];
 8002308:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pFF = MC_NULL;
 800230a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pOTT = MC_NULL;
 800230e:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8002312:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8002314:	700f      	strb	r7, [r1, #0]
}
 8002316:	b009      	add	sp, #36	; 0x24
 8002318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231c:	20000d10 	.word	0x20000d10
 8002320:	20000dd4 	.word	0x20000dd4
 8002324:	2000087b 	.word	0x2000087b
 8002328:	20000dac 	.word	0x20000dac
 800232c:	2000034c 	.word	0x2000034c
 8002330:	20000000 	.word	0x20000000
 8002334:	20000de8 	.word	0x20000de8
 8002338:	20000494 	.word	0x20000494
 800233c:	20000d14 	.word	0x20000d14
 8002340:	2000016c 	.word	0x2000016c
 8002344:	200001b4 	.word	0x200001b4
 8002348:	20000d18 	.word	0x20000d18
 800234c:	2000020c 	.word	0x2000020c
 8002350:	20000da8 	.word	0x20000da8
 8002354:	200004cc 	.word	0x200004cc
 8002358:	20000d1c 	.word	0x20000d1c
 800235c:	20000188 	.word	0x20000188
 8002360:	20000de4 	.word	0x20000de4
 8002364:	200003e0 	.word	0x200003e0
 8002368:	20000db0 	.word	0x20000db0
 800236c:	20000238 	.word	0x20000238
 8002370:	2000043c 	.word	0x2000043c
 8002374:	200003c8 	.word	0x200003c8
 8002378:	20000ddc 	.word	0x20000ddc
 800237c:	20000d20 	.word	0x20000d20
 8002380:	20000d54 	.word	0x20000d54
 8002384:	200001e0 	.word	0x200001e0
 8002388:	200000f0 	.word	0x200000f0
 800238c:	20000408 	.word	0x20000408
 8002390:	20000d24 	.word	0x20000d24
 8002394:	20000de0 	.word	0x20000de0
 8002398:	20000d2c 	.word	0x20000d2c
 800239c:	20000d0c 	.word	0x20000d0c
 80023a0:	20000db4 	.word	0x20000db4

080023a4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <FOC_CalcCurrRef+0x24>)
{
 80023aa:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80023ac:	2426      	movs	r4, #38	; 0x26
 80023ae:	fb04 3400 	mla	r4, r4, r0, r3
 80023b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80023b6:	b103      	cbz	r3, 80023ba <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80023b8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <FOC_CalcCurrRef+0x28>)
 80023bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80023c0:	f008 f810 	bl	800a3e4 <STC_CalcTorqueReference>
 80023c4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80023c6:	8220      	strh	r0, [r4, #16]
}
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	20000d2c 	.word	0x20000d2c
 80023d0:	20000de8 	.word	0x20000de8

080023d4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80023d4:	4b01      	ldr	r3, [pc, #4]	; (80023dc <TSK_SetChargeBootCapDelayM1+0x8>)
 80023d6:	8018      	strh	r0, [r3, #0]
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000087c 	.word	0x2000087c

080023e0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80023e2:	8818      	ldrh	r0, [r3, #0]
 80023e4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80023e6:	fab0 f080 	clz	r0, r0
 80023ea:	0940      	lsrs	r0, r0, #5
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000087c 	.word	0x2000087c

080023f4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80023f4:	4b01      	ldr	r3, [pc, #4]	; (80023fc <TSK_SetStopPermanencyTimeM1+0x8>)
 80023f6:	8018      	strh	r0, [r3, #0]
}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000880 	.word	0x20000880

08002400 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002402:	8818      	ldrh	r0, [r3, #0]
 8002404:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002406:	fab0 f080 	clz	r0, r0
 800240a:	0940      	lsrs	r0, r0, #5
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000880 	.word	0x20000880

08002414 <TSK_MediumFrequencyTaskM1>:
{
 8002414:	b510      	push	{r4, lr}
 8002416:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002418:	a902      	add	r1, sp, #8
 800241a:	2300      	movs	r3, #0
  PQD_CalcElMotorPower( pMPM[M1] );
 800241c:	4c90      	ldr	r4, [pc, #576]	; (8002660 <TSK_MediumFrequencyTaskM1+0x24c>)
  int16_t wAux = 0;
 800241e:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002422:	4890      	ldr	r0, [pc, #576]	; (8002664 <TSK_MediumFrequencyTaskM1+0x250>)
 8002424:	f006 fad6 	bl	80089d4 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8002428:	6820      	ldr	r0, [r4, #0]
 800242a:	f006 fcf7 	bl	8008e1c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 800242e:	488e      	ldr	r0, [pc, #568]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002430:	f008 f8ba 	bl	800a5a8 <STM_GetState>
  switch ( StateM1 )
 8002434:	2812      	cmp	r0, #18
 8002436:	d818      	bhi.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
 8002438:	e8df f010 	tbh	[pc, r0, lsl #1]
 800243c:	0038002a 	.word	0x0038002a
 8002440:	00530044 	.word	0x00530044
 8002444:	006b0062 	.word	0x006b0062
 8002448:	008a007e 	.word	0x008a007e
 800244c:	0013009d 	.word	0x0013009d
 8002450:	00170017 	.word	0x00170017
 8002454:	00a70017 	.word	0x00a70017
 8002458:	00c300b6 	.word	0x00c300b6
 800245c:	00e600d7 	.word	0x00e600d7
 8002460:	0019      	.short	0x0019
    STM_NextState( &STM[M1], IDLE );
 8002462:	2100      	movs	r1, #0
 8002464:	4880      	ldr	r0, [pc, #512]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002466:	f008 f82b 	bl	800a4c0 <STM_NextState>
}
 800246a:	b002      	add	sp, #8
 800246c:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 800246e:	487d      	ldr	r0, [pc, #500]	; (8002664 <TSK_MediumFrequencyTaskM1+0x250>)
 8002470:	f006 fa7e 	bl	8008970 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8002474:	2104      	movs	r1, #4
 8002476:	487c      	ldr	r0, [pc, #496]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002478:	f008 f822 	bl	800a4c0 <STM_NextState>
 800247c:	2800      	cmp	r0, #0
 800247e:	d0f4      	beq.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
      FOC_Clear( M1 );
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff fe2b 	bl	80020dc <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f007 f87b 	bl	8009584 <R3_2_SwitchOnPWM>
 800248e:	e7ec      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 8002490:	4877      	ldr	r0, [pc, #476]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002492:	f006 fa2d 	bl	80088f0 <EAC_GetRestartState>
 8002496:	2800      	cmp	r0, #0
 8002498:	d0e7      	beq.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 800249a:	2100      	movs	r1, #0
 800249c:	4874      	ldr	r0, [pc, #464]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 800249e:	f006 fa25 	bl	80088ec <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80024a2:	2103      	movs	r1, #3
 80024a4:	4870      	ldr	r0, [pc, #448]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80024a6:	f008 f80b 	bl	800a4c0 <STM_NextState>
 80024aa:	e7de      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80024ac:	4b6f      	ldr	r3, [pc, #444]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	f007 f840 	bl	8009534 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80024b4:	2014      	movs	r0, #20
 80024b6:	f7ff ff8d 	bl	80023d4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80024ba:	210d      	movs	r1, #13
 80024bc:	486a      	ldr	r0, [pc, #424]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80024be:	f007 ffff 	bl	800a4c0 <STM_NextState>
    break;
 80024c2:	e7d2      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 80024c4:	486a      	ldr	r0, [pc, #424]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 80024c6:	f006 f9f7 	bl	80088b8 <EAC_Exec>
 80024ca:	4604      	mov	r4, r0
 80024cc:	2800      	cmp	r0, #0
 80024ce:	f040 80b4 	bne.w	800263a <TSK_MediumFrequencyTaskM1+0x226>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 80024d2:	4b68      	ldr	r3, [pc, #416]	; (8002674 <TSK_MediumFrequencyTaskM1+0x260>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f007 ff85 	bl	800a3e4 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <TSK_MediumFrequencyTaskM1+0x264>)
 80024dc:	8258      	strh	r0, [r3, #18]
 80024de:	821c      	strh	r4, [r3, #16]
 80024e0:	e7c3      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 80024e2:	4863      	ldr	r0, [pc, #396]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 80024e4:	f006 fa00 	bl	80088e8 <EAC_IsAligned>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	f040 809a 	bne.w	8002622 <TSK_MediumFrequencyTaskM1+0x20e>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 80024ee:	2101      	movs	r1, #1
 80024f0:	485f      	ldr	r0, [pc, #380]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 80024f2:	f006 f9fb 	bl	80088ec <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 80024f6:	2101      	movs	r1, #1
 80024f8:	485b      	ldr	r0, [pc, #364]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80024fa:	f007 ffe1 	bl	800a4c0 <STM_NextState>
      break;
 80024fe:	e7b4      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <TSK_MediumFrequencyTaskM1+0x268>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	f008 fa0a 	bl	800a91c <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002508:	2105      	movs	r1, #5
 800250a:	4857      	ldr	r0, [pc, #348]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 800250c:	f007 ffd8 	bl	800a4c0 <STM_NextState>
    break;
 8002510:	e7ab      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
	  FOC_InitAdditionalMethods(M1);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff ff46 	bl	80023a4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff ff45 	bl	80023a8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800251e:	2106      	movs	r1, #6
 8002520:	4851      	ldr	r0, [pc, #324]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002522:	f007 ffcd 	bl	800a4c0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <TSK_MediumFrequencyTaskM1+0x260>)
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	f007 ffa1 	bl	800a470 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f7ff fc9f 	bl	8001e74 <MCI_ExecBufferedCommands>
    break;
 8002536:	e798      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    TC_PositionRegulation(pPosCtrl[M1]);
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <TSK_MediumFrequencyTaskM1+0x268>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f008 f920 	bl	800a780 <TC_PositionRegulation>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002540:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f7ff fc96 	bl	8001e74 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff ff2d 	bl	80023a8 <FOC_CalcCurrRef>
    break;
 800254e:	e78c      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f007 f85e 	bl	8009614 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff fdbf 	bl	80020dc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	f006 fb52 	bl	8008c08 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002564:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002568:	f7ff ff44 	bl	80023f4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800256c:	2108      	movs	r1, #8
 800256e:	483e      	ldr	r0, [pc, #248]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002570:	f007 ffa6 	bl	800a4c0 <STM_NextState>
    break;
 8002574:	e779      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8002576:	f7ff ff43 	bl	8002400 <TSK_StopPermanencyTimeHasElapsedM1>
 800257a:	2800      	cmp	r0, #0
 800257c:	f43f af75 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], STOP_IDLE );
 8002580:	2109      	movs	r1, #9
 8002582:	4839      	ldr	r0, [pc, #228]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002584:	f007 ff9c 	bl	800a4c0 <STM_NextState>
 8002588:	e76f      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800258a:	f7ff ff29 	bl	80023e0 <TSK_ChargeBootCapDelayHasElapsedM1>
 800258e:	2800      	cmp	r0, #0
 8002590:	f43f af6b 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 8002596:	2100      	movs	r1, #0
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	f006 fddf 	bl	800915c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 800259e:	210e      	movs	r1, #14
 80025a0:	4831      	ldr	r0, [pc, #196]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80025a2:	f007 ff8d 	bl	800a4c0 <STM_NextState>
 80025a6:	e760      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80025a8:	4b30      	ldr	r3, [pc, #192]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	f006 fdd5 	bl	800915c <PWMC_CurrentReadingCalibr>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	f43f af59 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80025b8:	210f      	movs	r1, #15
 80025ba:	482b      	ldr	r0, [pc, #172]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80025bc:	f007 ff80 	bl	800a4c0 <STM_NextState>
 80025c0:	e753      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025c2:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <TSK_MediumFrequencyTaskM1+0x260>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <TSK_MediumFrequencyTaskM1+0x264>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025c6:	6810      	ldr	r0, [r2, #0]
 80025c8:	492e      	ldr	r1, [pc, #184]	; (8002684 <TSK_MediumFrequencyTaskM1+0x270>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80025d0:	f007 fe9a 	bl	800a308 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 80025d4:	4826      	ldr	r0, [pc, #152]	; (8002670 <TSK_MediumFrequencyTaskM1+0x25c>)
 80025d6:	f006 f947 	bl	8008868 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 80025da:	2102      	movs	r1, #2
 80025dc:	4822      	ldr	r0, [pc, #136]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 80025de:	f007 ff6f 	bl	800a4c0 <STM_NextState>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	f43f af41 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
 80025e8:	e74a      	b.n	8002480 <TSK_MediumFrequencyTaskM1+0x6c>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80025ea:	f7ff fef9 	bl	80023e0 <TSK_ChargeBootCapDelayHasElapsedM1>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	f43f af3b 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	f006 fdaf 	bl	800915c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80025fe:	2111      	movs	r1, #17
 8002600:	4819      	ldr	r0, [pc, #100]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002602:	f007 ff5d 	bl	800a4c0 <STM_NextState>
 8002606:	e730      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 800260a:	2101      	movs	r1, #1
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f006 fda5 	bl	800915c <PWMC_CurrentReadingCalibr>
 8002612:	2800      	cmp	r0, #0
 8002614:	f43f af29 	beq.w	800246a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], CLEAR );
 8002618:	2112      	movs	r1, #18
 800261a:	4813      	ldr	r0, [pc, #76]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 800261c:	f007 ff50 	bl	800a4c0 <STM_NextState>
 8002620:	e723      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	f006 ff85 	bl	8009534 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800262a:	2014      	movs	r0, #20
 800262c:	f7ff fed2 	bl	80023d4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002630:	2110      	movs	r1, #16
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002634:	f007 ff44 	bl	800a4c0 <STM_NextState>
    break;
 8002638:	e717      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <TSK_MediumFrequencyTaskM1+0x258>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <TSK_MediumFrequencyTaskM1+0x260>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	f006 ffe8 	bl	8009614 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	f007 fe7a 	bl	800a340 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 800264c:	6820      	ldr	r0, [r4, #0]
 800264e:	4905      	ldr	r1, [pc, #20]	; (8002664 <TSK_MediumFrequencyTaskM1+0x250>)
 8002650:	f007 fe5a 	bl	800a308 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8002654:	2107      	movs	r1, #7
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <TSK_MediumFrequencyTaskM1+0x254>)
 8002658:	f007 ff32 	bl	800a4c0 <STM_NextState>
 800265c:	e705      	b.n	800246a <TSK_MediumFrequencyTaskM1+0x56>
 800265e:	bf00      	nop
 8002660:	20000de0 	.word	0x20000de0
 8002664:	200000f0 	.word	0x200000f0
 8002668:	20000dd4 	.word	0x20000dd4
 800266c:	20000d10 	.word	0x20000d10
 8002670:	2000016c 	.word	0x2000016c
 8002674:	20000de8 	.word	0x20000de8
 8002678:	20000d2c 	.word	0x20000d2c
 800267c:	20000da8 	.word	0x20000da8
 8002680:	20000d20 	.word	0x20000d20
 8002684:	20000494 	.word	0x20000494

08002688 <MC_Scheduler>:
{
 8002688:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MC_Scheduler+0x4c>)
 800268c:	781c      	ldrb	r4, [r3, #0]
 800268e:	2c01      	cmp	r4, #1
 8002690:	d000      	beq.n	8002694 <MC_Scheduler+0xc>
}
 8002692:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8002694:	4d10      	ldr	r5, [pc, #64]	; (80026d8 <MC_Scheduler+0x50>)
 8002696:	882b      	ldrh	r3, [r5, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	b1b3      	cbz	r3, 80026ca <MC_Scheduler+0x42>
      hMFTaskCounterM1--;
 800269c:	882b      	ldrh	r3, [r5, #0]
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <MC_Scheduler+0x54>)
 80026a6:	8813      	ldrh	r3, [r2, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b94b      	cbnz	r3, 80026c0 <MC_Scheduler+0x38>
    if(hStopPermanencyCounterM1 > 0u)
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <MC_Scheduler+0x58>)
 80026ae:	8813      	ldrh	r3, [r2, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ed      	beq.n	8002692 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80026b6:	8813      	ldrh	r3, [r2, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]
}
 80026be:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 80026c0:	8813      	ldrh	r3, [r2, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8013      	strh	r3, [r2, #0]
 80026c8:	e7f0      	b.n	80026ac <MC_Scheduler+0x24>
      TSK_MediumFrequencyTaskM1();
 80026ca:	f7ff fea3 	bl	8002414 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80026ce:	802c      	strh	r4, [r5, #0]
 80026d0:	e7e8      	b.n	80026a4 <MC_Scheduler+0x1c>
 80026d2:	bf00      	nop
 80026d4:	2000087b 	.word	0x2000087b
 80026d8:	2000087e 	.word	0x2000087e
 80026dc:	2000087c 	.word	0x2000087c
 80026e0:	20000880 	.word	0x20000880

080026e4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80026e8:	4833      	ldr	r0, [pc, #204]	; (80027b8 <TSK_HighFrequencyTask+0xd4>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80026ea:	4f34      	ldr	r7, [pc, #208]	; (80027bc <TSK_HighFrequencyTask+0xd8>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80026ec:	4c34      	ldr	r4, [pc, #208]	; (80027c0 <TSK_HighFrequencyTask+0xdc>)
{
 80026ee:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80026f0:	f006 f950 	bl	8008994 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <TSK_HighFrequencyTask+0xe0>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	f007 fe08 	bl	800a30c <STC_GetSpeedSensor>
 80026fc:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80026fe:	f007 fda7 	bl	800a250 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002702:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8002704:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	f006 fc18 	bl	8008f3c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 800270c:	f001 f830 	bl	8003770 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002710:	f000 ffec 	bl	80036ec <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002714:	9803      	ldr	r0, [sp, #12]
 8002716:	f7ff fc4b 	bl	8001fb0 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800271a:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 800271c:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800271e:	f7ff fc85 	bl	800202c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002724:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002728:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800272a:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800272c:	1a09      	subs	r1, r1, r0
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f006 fb10 	bl	8008d54 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002734:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <TSK_HighFrequencyTask+0xe8>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800273a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800273e:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002740:	1a89      	subs	r1, r1, r2
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	f006 fb06 	bl	8008d54 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <TSK_HighFrequencyTask+0xec>)
 800274a:	f8ad 8008 	strh.w	r8, [sp, #8]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002754:	9902      	ldr	r1, [sp, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f006 f838 	bl	80087cc <Circle_Limitation>
 800275c:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800275e:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002760:	fa0f f883 	sxth.w	r8, r3
 8002764:	141d      	asrs	r5, r3, #16
 8002766:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002768:	f007 fd7c 	bl	800a264 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800276c:	4631      	mov	r1, r6
 800276e:	9802      	ldr	r0, [sp, #8]
 8002770:	f7ff fc96 	bl	80020a0 <MCM_Rev_Park>
 8002774:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002776:	4601      	mov	r1, r0
 8002778:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800277a:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800277c:	f006 fbe0 	bl	8008f40 <PWMC_SetPhaseVoltage>
 8002780:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002782:	9803      	ldr	r0, [sp, #12]
 8002784:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002786:	9804      	ldr	r0, [sp, #16]
 8002788:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800278a:	9801      	ldr	r0, [sp, #4]
 800278c:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800278e:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002790:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002792:	f8a4 8016 	strh.w	r8, [r4, #22]
 8002796:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8002798:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800279a:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800279e:	d003      	beq.n	80027a8 <TSK_HighFrequencyTask+0xc4>
}
 80027a0:	2000      	movs	r0, #0
 80027a2:	b006      	add	sp, #24
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	480a      	ldr	r0, [pc, #40]	; (80027d4 <TSK_HighFrequencyTask+0xf0>)
 80027ac:	f007 fe6e 	bl	800a48c <STM_FaultProcessing>
}
 80027b0:	2000      	movs	r0, #0
 80027b2:	b006      	add	sp, #24
 80027b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b8:	200000f0 	.word	0x200000f0
 80027bc:	20000d10 	.word	0x20000d10
 80027c0:	20000d2c 	.word	0x20000d2c
 80027c4:	20000de8 	.word	0x20000de8
 80027c8:	20000d1c 	.word	0x20000d1c
 80027cc:	20000de4 	.word	0x20000de4
 80027d0:	20000dac 	.word	0x20000dac
 80027d4:	20000dd4 	.word	0x20000dd4

080027d8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80027dc:	4f23      	ldr	r7, [pc, #140]	; (800286c <TSK_SafetyTask_PWMOFF+0x94>)
{
 80027de:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80027e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80027e4:	f006 fa62 	bl	8008cac <NTC_CalcAvTemp>
 80027e8:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80027ea:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80027ee:	f006 fcdf 	bl	80091b0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80027f2:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80027f6:	4304      	orrs	r4, r0
 80027f8:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80027fa:	b36d      	cbz	r5, 8002858 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80027fc:	4e1c      	ldr	r6, [pc, #112]	; (8002870 <TSK_SafetyTask_PWMOFF+0x98>)
 80027fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002802:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8002806:	43e2      	mvns	r2, r4
 8002808:	b292      	uxth	r2, r2
 800280a:	4621      	mov	r1, r4
 800280c:	4630      	mov	r0, r6
 800280e:	f007 fe3d 	bl	800a48c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002812:	4630      	mov	r0, r6
 8002814:	f007 fec8 	bl	800a5a8 <STM_GetState>
 8002818:	280a      	cmp	r0, #10
 800281a:	d008      	beq.n	800282e <TSK_SafetyTask_PWMOFF+0x56>
 800281c:	280b      	cmp	r0, #11
 800281e:	d105      	bne.n	800282c <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002820:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002828:	f006 bc96 	b.w	8009158 <PWMC_SwitchOffPWM>
}
 800282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002830:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002834:	b110      	cbz	r0, 800283c <TSK_SafetyTask_PWMOFF+0x64>
      EAC_SetRestartState( pEAC[bMotor], false );
 8002836:	2100      	movs	r1, #0
 8002838:	f006 f858 	bl	80088ec <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800283c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8002840:	f006 fc8a 	bl	8009158 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002844:	4628      	mov	r0, r5
 8002846:	f7ff fc49 	bl	80020dc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <TSK_SafetyTask_PWMOFF+0xa0>)
 800284c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 8002850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002854:	f006 b9d8 	b.w	8008c08 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <TSK_SafetyTask_PWMOFF+0xa4>)
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	f007 fcba 	bl	800a1d4 <RVBS_CalcAvVbus>
 8002860:	f000 000e 	and.w	r0, r0, #14
 8002864:	4304      	orrs	r4, r0
 8002866:	e7c9      	b.n	80027fc <TSK_SafetyTask_PWMOFF+0x24>
 8002868:	20000d0c 	.word	0x20000d0c
 800286c:	20000d10 	.word	0x20000d10
 8002870:	20000dd4 	.word	0x20000dd4
 8002874:	20000d18 	.word	0x20000d18
 8002878:	20000de0 	.word	0x20000de0
 800287c:	20000db0 	.word	0x20000db0

08002880 <TSK_SafetyTask>:
{
 8002880:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <TSK_SafetyTask+0x1c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d000      	beq.n	800288c <TSK_SafetyTask+0xc>
}
 800288a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff ffa3 	bl	80027d8 <TSK_SafetyTask_PWMOFF>
}
 8002892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8002896:	f000 be3f 	b.w	8003518 <RCM_ExecUserConv>
 800289a:	bf00      	nop
 800289c:	2000087b 	.word	0x2000087b

080028a0 <MC_RunMotorControlTasks>:
{
 80028a0:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MC_RunMotorControlTasks+0x1c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b903      	cbnz	r3, 80028aa <MC_RunMotorControlTasks+0xa>
}
 80028a8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80028aa:	f7ff feed 	bl	8002688 <MC_Scheduler>
    TSK_SafetyTask();
 80028ae:	f7ff ffe7 	bl	8002880 <TSK_SafetyTask>
}
 80028b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80028b6:	f001 bc25 	b.w	8004104 <UI_Scheduler>
 80028ba:	bf00      	nop
 80028bc:	2000087b 	.word	0x2000087b

080028c0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80028c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <TSK_HardwareFaultTask+0x18>)
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	f006 fea5 	bl	8009614 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	4803      	ldr	r0, [pc, #12]	; (80028dc <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80028d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80028d4:	f007 bdda 	b.w	800a48c <STM_FaultProcessing>
 80028d8:	20000d10 	.word	0x20000d10
 80028dc:	20000dd4 	.word	0x20000dd4

080028e0 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80028e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028e4:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <mc_lock_pins+0x190>)
 80028e6:	4c63      	ldr	r4, [pc, #396]	; (8002a74 <mc_lock_pins+0x194>)
 80028e8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028ea:	f04f 0c04 	mov.w	ip, #4
 80028ee:	b094      	sub	sp, #80	; 0x50
 80028f0:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028f4:	61d4      	str	r4, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80028f6:	69d3      	ldr	r3, [r2, #28]
 80028f8:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028fa:	4d5f      	ldr	r5, [pc, #380]	; (8002a78 <mc_lock_pins+0x198>)
  (void) temp;
 80028fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028fe:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002900:	f04f 0e02 	mov.w	lr, #2
 8002904:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002908:	61d5      	str	r5, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800290a:	69d3      	ldr	r3, [r2, #28]
 800290c:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800290e:	495b      	ldr	r1, [pc, #364]	; (8002a7c <mc_lock_pins+0x19c>)
  (void) temp;
 8002910:	9b12      	ldr	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002912:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002914:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002918:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800291a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800291c:	69d3      	ldr	r3, [r2, #28]
 800291e:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002920:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002924:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8002928:	9f11      	ldr	r7, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800292a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800292c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800292e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002930:	69d0      	ldr	r0, [r2, #28]
 8002932:	9010      	str	r0, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002938:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 800293c:	2701      	movs	r7, #1
  (void) temp;
 800293e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002942:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002944:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002946:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002948:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800294c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  (void) temp;
 8002950:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002954:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002956:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002958:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800295a:	69d0      	ldr	r0, [r2, #28]
 800295c:	900e      	str	r0, [sp, #56]	; 0x38
  (void) temp;
 800295e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002960:	4847      	ldr	r0, [pc, #284]	; (8002a80 <mc_lock_pins+0x1a0>)
 8002962:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002964:	2780      	movs	r7, #128	; 0x80
 8002966:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002968:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800296a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800296e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  (void) temp;
 8002972:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002976:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002978:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800297c:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800297e:	69dd      	ldr	r5, [r3, #28]
 8002980:	950c      	str	r5, [sp, #48]	; 0x30
  (void) temp;
 8002982:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002986:	4d3f      	ldr	r5, [pc, #252]	; (8002a84 <mc_lock_pins+0x1a4>)
 8002988:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800298a:	f04f 0e08 	mov.w	lr, #8
 800298e:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002992:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002994:	69dd      	ldr	r5, [r3, #28]
 8002996:	950b      	str	r5, [sp, #44]	; 0x2c
  (void) temp;
 8002998:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800299a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800299c:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029a0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029a2:	69dc      	ldr	r4, [r3, #28]
 80029a4:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 80029a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029a8:	4c37      	ldr	r4, [pc, #220]	; (8002a88 <mc_lock_pins+0x1a8>)
 80029aa:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029ac:	2540      	movs	r5, #64	; 0x40
 80029ae:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029b0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029b2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80029b6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  (void) temp;
 80029ba:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029be:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8002a90 <mc_lock_pins+0x1b0>
 80029c2:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029c6:	f04f 0e20 	mov.w	lr, #32
 80029ca:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ce:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029d2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80029d6:	f8cd c020 	str.w	ip, [sp, #32]
  (void) temp;
 80029da:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029de:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029e0:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029e2:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029e4:	69d4      	ldr	r4, [r2, #28]
 80029e6:	9407      	str	r4, [sp, #28]
  (void) temp;
 80029e8:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ea:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029ec:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029ee:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029f0:	69d0      	ldr	r0, [r2, #28]
 80029f2:	9006      	str	r0, [sp, #24]
  (void) temp;
 80029f4:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80029f8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80029fa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80029fc:	69d9      	ldr	r1, [r3, #28]
 80029fe:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a00:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a04:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8002a08:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a0a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a0c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a0e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a10:	69d9      	ldr	r1, [r3, #28]
 8002a12:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a14:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a18:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8002a1c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a1e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a20:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a22:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a24:	69d9      	ldr	r1, [r3, #28]
 8002a26:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a2c:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8002a30:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a32:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a34:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a36:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a40:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8002a44:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a46:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a48:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a4a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a4c:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <mc_lock_pins+0x1ac>)
  temp = READ_REG(GPIOx->LCKR);
 8002a50:	9201      	str	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a56:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002a5a:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a5c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a5e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a60:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	9300      	str	r3, [sp, #0]
  (void) temp;
 8002a66:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002a68:	b014      	add	sp, #80	; 0x50
 8002a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a6e:	bf00      	nop
 8002a70:	48000400 	.word	0x48000400
 8002a74:	00010004 	.word	0x00010004
 8002a78:	00010002 	.word	0x00010002
 8002a7c:	00010100 	.word	0x00010100
 8002a80:	00010080 	.word	0x00010080
 8002a84:	00010008 	.word	0x00010008
 8002a88:	00010040 	.word	0x00010040
 8002a8c:	48000800 	.word	0x48000800
 8002a90:	00010020 	.word	0x00010020

08002a94 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a98:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8002a9a:	2700      	movs	r7, #0
{
 8002a9c:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8002a9e:	094a      	lsrs	r2, r1, #5
{
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 8002aa4:	f88d 7009 	strb.w	r7, [sp, #9]
{
 8002aa8:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 8002aaa:	d123      	bne.n	8002af4 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8002aac:	2912      	cmp	r1, #18
 8002aae:	d814      	bhi.n	8002ada <MCP_ReceivedFrame+0x46>
 8002ab0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002ab4:	00580016 	.word	0x00580016
 8002ab8:	00ea0121 	.word	0x00ea0121
 8002abc:	00130013 	.word	0x00130013
 8002ac0:	01b300f4 	.word	0x01b300f4
 8002ac4:	01fb01c8 	.word	0x01fb01c8
 8002ac8:	022e021d 	.word	0x022e021d
 8002acc:	02620245 	.word	0x02620245
 8002ad0:	00130013 	.word	0x00130013
 8002ad4:	00130013 	.word	0x00130013
 8002ad8:	0272      	.short	0x0272
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8002ae0:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f10d 020e 	add.w	r2, sp, #14
 8002aea:	21ff      	movs	r1, #255	; 0xff
 8002aec:	47a0      	blx	r4
    }
  }
}
 8002aee:	b00d      	add	sp, #52	; 0x34
 8002af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002af4:	f102 38ff 	add.w	r8, r2, #4294967295
 8002af8:	4642      	mov	r2, r8
 8002afa:	4639      	mov	r1, r7
 8002afc:	f001 fb62 	bl	80041c4 <UI_SetReg>
 8002b00:	b300      	cbz	r0, 8002b44 <MCP_ReceivedFrame+0xb0>
      if (pHandle->pDAC)
 8002b02:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002b06:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8002b0a:	b118      	cbz	r0, 8002b14 <MCP_ReceivedFrame+0x80>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	4639      	mov	r1, r7
 8002b10:	f001 fb58 	bl	80041c4 <UI_SetReg>
  switch (Code)
 8002b14:	2c12      	cmp	r4, #18
 8002b16:	f200 82fc 	bhi.w	8003112 <MCP_ReceivedFrame+0x67e>
 8002b1a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002b1e:	01c3      	.short	0x01c3
 8002b20:	00ec0023 	.word	0x00ec0023
 8002b24:	02fa00b5 	.word	0x02fa00b5
 8002b28:	00bf02fa 	.word	0x00bf02fa
 8002b2c:	0193017e 	.word	0x0193017e
 8002b30:	01e801c6 	.word	0x01e801c6
 8002b34:	021001f9 	.word	0x021001f9
 8002b38:	02fa022d 	.word	0x02fa022d
 8002b3c:	02fa02fa 	.word	0x02fa02fa
 8002b40:	023d02fa 	.word	0x023d02fa
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002b44:	230b      	movs	r3, #11
 8002b46:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002b4a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d0c6      	beq.n	8002ae0 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002b52:	2300      	movs	r3, #0
 8002b54:	461a      	mov	r2, r3
 8002b56:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002b5a:	21f0      	movs	r1, #240	; 0xf0
 8002b5c:	47a0      	blx	r4
}
 8002b5e:	b00d      	add	sp, #52	; 0x34
 8002b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002b64:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002b66:	2305      	movs	r3, #5
 8002b68:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002b6c:	2988      	cmp	r1, #136	; 0x88
 8002b6e:	f200 82d6 	bhi.w	800311e <MCP_ReceivedFrame+0x68a>
 8002b72:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002b76:	0294      	.short	0x0294
 8002b78:	02d402d4 	.word	0x02d402d4
 8002b7c:	02d402c7 	.word	0x02d402c7
 8002b80:	02bd02bd 	.word	0x02bd02bd
 8002b84:	02bd02bd 	.word	0x02bd02bd
 8002b88:	02bd02bd 	.word	0x02bd02bd
 8002b8c:	02bd02bd 	.word	0x02bd02bd
 8002b90:	02bd02bd 	.word	0x02bd02bd
 8002b94:	02ad02bd 	.word	0x02ad02bd
 8002b98:	02d402ad 	.word	0x02d402ad
 8002b9c:	02bd02d4 	.word	0x02bd02d4
 8002ba0:	02bd02bd 	.word	0x02bd02bd
 8002ba4:	02bd02bd 	.word	0x02bd02bd
 8002ba8:	02d402d4 	.word	0x02d402d4
 8002bac:	02a302d4 	.word	0x02a302d4
 8002bb0:	02d4028a 	.word	0x02d4028a
 8002bb4:	02d402d4 	.word	0x02d402d4
 8002bb8:	02d402d4 	.word	0x02d402d4
 8002bbc:	02d402d4 	.word	0x02d402d4
 8002bc0:	02d402d4 	.word	0x02d402d4
 8002bc4:	02d402d4 	.word	0x02d402d4
 8002bc8:	02d402d4 	.word	0x02d402d4
 8002bcc:	02d402d4 	.word	0x02d402d4
 8002bd0:	02d402d4 	.word	0x02d402d4
 8002bd4:	02d402d4 	.word	0x02d402d4
 8002bd8:	02d402d4 	.word	0x02d402d4
 8002bdc:	02d402d4 	.word	0x02d402d4
 8002be0:	02d402d4 	.word	0x02d402d4
 8002be4:	02d402d4 	.word	0x02d402d4
 8002be8:	02d402d4 	.word	0x02d402d4
 8002bec:	02d402d4 	.word	0x02d402d4
 8002bf0:	02d402d4 	.word	0x02d402d4
 8002bf4:	02d402d4 	.word	0x02d402d4
 8002bf8:	02d402bd 	.word	0x02d402bd
 8002bfc:	02d402d4 	.word	0x02d402d4
 8002c00:	02ad02d4 	.word	0x02ad02d4
 8002c04:	02ad02ad 	.word	0x02ad02ad
 8002c08:	02d402d4 	.word	0x02d402d4
 8002c0c:	02d402d4 	.word	0x02d402d4
 8002c10:	02d402d4 	.word	0x02d402d4
 8002c14:	02d402bd 	.word	0x02d402bd
 8002c18:	02d402d4 	.word	0x02d402d4
 8002c1c:	02bd02bd 	.word	0x02bd02bd
 8002c20:	02bd02bd 	.word	0x02bd02bd
 8002c24:	02bd02bd 	.word	0x02bd02bd
 8002c28:	02d402bd 	.word	0x02d402bd
 8002c2c:	02d402ad 	.word	0x02d402ad
 8002c30:	02d402d4 	.word	0x02d402d4
 8002c34:	02d402d4 	.word	0x02d402d4
 8002c38:	02d402bd 	.word	0x02d402bd
 8002c3c:	02bd02d4 	.word	0x02bd02d4
 8002c40:	02d402bd 	.word	0x02d402bd
 8002c44:	02d402d4 	.word	0x02d402d4
 8002c48:	02d402d4 	.word	0x02d402d4
 8002c4c:	02d402d4 	.word	0x02d402d4
 8002c50:	02d402d4 	.word	0x02d402d4
 8002c54:	02d402d4 	.word	0x02d402d4
 8002c58:	02d402d4 	.word	0x02d402d4
 8002c5c:	02c702d4 	.word	0x02c702d4
 8002c60:	02ad02ad 	.word	0x02ad02ad
 8002c64:	02ad02ad 	.word	0x02ad02ad
 8002c68:	02d402ad 	.word	0x02d402ad
 8002c6c:	02d402d4 	.word	0x02d402d4
 8002c70:	02ad02ad 	.word	0x02ad02ad
 8002c74:	02d402d4 	.word	0x02d402d4
 8002c78:	02d402d4 	.word	0x02d402d4
 8002c7c:	02d402d4 	.word	0x02d402d4
 8002c80:	02bd02d4 	.word	0x02bd02d4
 8002c84:	02bd02bd 	.word	0x02bd02bd
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002c88:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 8002c8a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002c8c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002c90:	4628      	mov	r0, r5
 8002c92:	f001 fb89 	bl	80043a8 <UI_ExecCmd>
 8002c96:	f88d 0009 	strb.w	r0, [sp, #9]
 8002c9a:	e758      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
 8002c9c:	ac04      	add	r4, sp, #16
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f008 f90a 	bl	800aebc <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002ca8:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8002cac:	f10d 0012 	add.w	r0, sp, #18
 8002cb0:	1e71      	subs	r1, r6, #1
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e005      	b.n	8002cc2 <MCP_ReceivedFrame+0x22e>
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002cba:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002cbe:	f000 8232 	beq.w	8003126 <MCP_ReceivedFrame+0x692>
 8002cc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002cc6:	2a09      	cmp	r2, #9
 8002cc8:	d1f5      	bne.n	8002cb6 <MCP_ReceivedFrame+0x222>
 8002cca:	1d5a      	adds	r2, r3, #5
 8002ccc:	1dd9      	adds	r1, r3, #7
 8002cce:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002cd0:	5cb2      	ldrb	r2, [r6, r2]
 8002cd2:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002cd6:	5c72      	ldrb	r2, [r6, r1]
 8002cd8:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002cdc:	5cf3      	ldrb	r3, [r6, r3]
 8002cde:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002cea:	21f0      	movs	r1, #240	; 0xf0
 8002cec:	47a0      	blx	r4
      bNoError = true;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f88d 3009 	strb.w	r3, [sp, #9]
 8002cf4:	e72d      	b.n	8002b52 <MCP_ReceivedFrame+0xbe>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002cf6:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002cfe:	2988      	cmp	r1, #136	; 0x88
 8002d00:	f200 80d0 	bhi.w	8002ea4 <MCP_ReceivedFrame+0x410>
 8002d04:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d08:	0166018a 	.word	0x0166018a
 8002d0c:	018a018a 	.word	0x018a018a
 8002d10:	01780166 	.word	0x01780166
 8002d14:	01780178 	.word	0x01780178
 8002d18:	01780178 	.word	0x01780178
 8002d1c:	01780178 	.word	0x01780178
 8002d20:	01780178 	.word	0x01780178
 8002d24:	01780178 	.word	0x01780178
 8002d28:	01780178 	.word	0x01780178
 8002d2c:	01780178 	.word	0x01780178
 8002d30:	01780178 	.word	0x01780178
 8002d34:	01780178 	.word	0x01780178
 8002d38:	01780178 	.word	0x01780178
 8002d3c:	01780178 	.word	0x01780178
 8002d40:	019c01b0 	.word	0x019c01b0
 8002d44:	01780166 	.word	0x01780166
 8002d48:	01780178 	.word	0x01780178
 8002d4c:	00ce018a 	.word	0x00ce018a
 8002d50:	00ce00ce 	.word	0x00ce00ce
 8002d54:	00ce00ce 	.word	0x00ce00ce
 8002d58:	00ce00ce 	.word	0x00ce00ce
 8002d5c:	00ce00ce 	.word	0x00ce00ce
 8002d60:	00ce00ce 	.word	0x00ce00ce
 8002d64:	00ce00ce 	.word	0x00ce00ce
 8002d68:	00ce00ce 	.word	0x00ce00ce
 8002d6c:	00ce00ce 	.word	0x00ce00ce
 8002d70:	00ce00ce 	.word	0x00ce00ce
 8002d74:	00ce00ce 	.word	0x00ce00ce
 8002d78:	00ce00ce 	.word	0x00ce00ce
 8002d7c:	00ce00ce 	.word	0x00ce00ce
 8002d80:	00ce00ce 	.word	0x00ce00ce
 8002d84:	00ce00ce 	.word	0x00ce00ce
 8002d88:	017800ce 	.word	0x017800ce
 8002d8c:	00ce00ce 	.word	0x00ce00ce
 8002d90:	00ce00ce 	.word	0x00ce00ce
 8002d94:	01660166 	.word	0x01660166
 8002d98:	01780166 	.word	0x01780166
 8002d9c:	01780178 	.word	0x01780178
 8002da0:	018a0178 	.word	0x018a0178
 8002da4:	01780166 	.word	0x01780166
 8002da8:	01780178 	.word	0x01780178
 8002dac:	01780178 	.word	0x01780178
 8002db0:	01780178 	.word	0x01780178
 8002db4:	01780178 	.word	0x01780178
 8002db8:	01780178 	.word	0x01780178
 8002dbc:	0166018a 	.word	0x0166018a
 8002dc0:	017800ce 	.word	0x017800ce
 8002dc4:	01780178 	.word	0x01780178
 8002dc8:	01780178 	.word	0x01780178
 8002dcc:	00ce00ce 	.word	0x00ce00ce
 8002dd0:	01780178 	.word	0x01780178
 8002dd4:	018a018a 	.word	0x018a018a
 8002dd8:	01660166 	.word	0x01660166
 8002ddc:	01660166 	.word	0x01660166
 8002de0:	018a0166 	.word	0x018a0166
 8002de4:	01780178 	.word	0x01780178
 8002de8:	00ce0166 	.word	0x00ce0166
 8002dec:	01780178 	.word	0x01780178
 8002df0:	0166018a 	.word	0x0166018a
 8002df4:	01660166 	.word	0x01660166
 8002df8:	01660166 	.word	0x01660166
 8002dfc:	01660166 	.word	0x01660166
 8002e00:	01660166 	.word	0x01660166
 8002e04:	01660166 	.word	0x01660166
 8002e08:	00ce018a 	.word	0x00ce018a
 8002e0c:	0166018a 	.word	0x0166018a
 8002e10:	01660166 	.word	0x01660166
 8002e14:	01780178 	.word	0x01780178
 8002e18:	0178      	.short	0x0178
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002e1a:	7877      	ldrb	r7, [r6, #1]
 8002e1c:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002e1e:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002e20:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002e22:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002e24:	78f1      	ldrb	r1, [r6, #3]
 8002e26:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002e2a:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002e2e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002e32:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8002e36:	b292      	uxth	r2, r2
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f001 faf3 	bl	8004424 <UI_ExecSpeedRamp>
 8002e3e:	f88d 0009 	strb.w	r0, [sp, #9]
 8002e42:	e684      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002e44:	f10d 030e 	add.w	r3, sp, #14
 8002e48:	7831      	ldrb	r1, [r6, #0]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f10d 020a 	add.w	r2, sp, #10
 8002e50:	ab03      	add	r3, sp, #12
 8002e52:	4628      	mov	r0, r5
 8002e54:	f001 fb0c 	bl	8004470 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002e58:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8002e5c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002e60:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8002e64:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002e6c:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8002e6e:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002e70:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8002e72:	f363 0207 	bfi	r2, r3, #0, #8
 8002e76:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002e7a:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8002e7c:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002e80:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8002e82:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002e86:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002e88:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8002e8a:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002e8c:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8002e90:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002e94:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002e98:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	aa04      	add	r2, sp, #16
 8002ea0:	21f0      	movs	r1, #240	; 0xf0
 8002ea2:	47a0      	blx	r4
 8002ea4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002ea8:	e651      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002eaa:	78b1      	ldrb	r1, [r6, #2]
 8002eac:	7873      	ldrb	r3, [r6, #1]
 8002eae:	78f2      	ldrb	r2, [r6, #3]
 8002eb0:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002eb2:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002eb4:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002eb6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002eba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002ebe:	4a9c      	ldr	r2, [pc, #624]	; (8003130 <MCP_ReceivedFrame+0x69c>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002ec0:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002ec2:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002ec6:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002eca:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002ecc:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002ed0:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002ed4:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002ed6:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002eda:	7831      	ldrb	r1, [r6, #0]
 8002edc:	9000      	str	r0, [sp, #0]
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f001 fae2 	bl	80044ac <UI_SetRevupData>
 8002ee8:	f88d 0009 	strb.w	r0, [sp, #9]
 8002eec:	e62f      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002eee:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002ef0:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002ef2:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002ef4:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002ef6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002efa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002efe:	b212      	sxth	r2, r2
 8002f00:	b209      	sxth	r1, r1
 8002f02:	4628      	mov	r0, r5
 8002f04:	f001 faec 	bl	80044e0 <UI_SetCurrentReferences>
      bNoError = true;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f88d 3009 	strb.w	r3, [sp, #9]
 8002f0e:	e620      	b.n	8002b52 <MCP_ReceivedFrame+0xbe>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002f10:	4c88      	ldr	r4, [pc, #544]	; (8003134 <MCP_ReceivedFrame+0x6a0>)
      stepList.data = buffer;
 8002f12:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002f14:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002f16:	4621      	mov	r1, r4
 8002f18:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8002f1a:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002f1e:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002f22:	f001 faeb 	bl	80044fc <UI_GetMPInfo>
 8002f26:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	f43f add8 	beq.w	8002ae0 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002f30:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8002f34:	7923      	ldrb	r3, [r4, #4]
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	21f0      	movs	r1, #240	; 0xf0
 8002f3a:	47b0      	blx	r6
 8002f3c:	e5d7      	b.n	8002aee <MCP_ReceivedFrame+0x5a>
 8002f3e:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8002f42:	ac04      	add	r4, sp, #16
 8002f44:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002f46:	4623      	mov	r3, r4
 8002f48:	ae0c      	add	r6, sp, #48	; 0x30
 8002f4a:	e004      	b.n	8002f56 <MCP_ReceivedFrame+0x4c2>
        outBuff[i] = pHandle->s_fwVer[i];
 8002f4c:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002f50:	429e      	cmp	r6, r3
 8002f52:	f43f aec6 	beq.w	8002ce2 <MCP_ReceivedFrame+0x24e>
 8002f56:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002f5a:	1b18      	subs	r0, r3, r4
 8002f5c:	b2c0      	uxtb	r0, r0
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d1f4      	bne.n	8002f4c <MCP_ReceivedFrame+0x4b8>
      for (; i < 32; i++)
 8002f62:	281f      	cmp	r0, #31
 8002f64:	f63f aebd 	bhi.w	8002ce2 <MCP_ReceivedFrame+0x24e>
        outBuff[i] = 0;
 8002f68:	f1c0 021f 	rsb	r2, r0, #31
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	3201      	adds	r2, #1
 8002f70:	4420      	add	r0, r4
 8002f72:	f007 ffa3 	bl	800aebc <memset>
 8002f76:	e6b4      	b.n	8002ce2 <MCP_ReceivedFrame+0x24e>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002f78:	7970      	ldrb	r0, [r6, #5]
 8002f7a:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f7c:	7873      	ldrb	r3, [r6, #1]
 8002f7e:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002f80:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f84:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	b209      	sxth	r1, r1
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f001 fa5b 	bl	8004448 <UI_ExecTorqueRamp>
 8002f92:	f88d 0009 	strb.w	r0, [sp, #9]
 8002f96:	e5da      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002f98:	7970      	ldrb	r0, [r6, #5]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f9a:	7871      	ldrb	r1, [r6, #1]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002f9c:	7932      	ldrb	r2, [r6, #4]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f9e:	7833      	ldrb	r3, [r6, #0]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002fa0:	79b7      	ldrb	r7, [r6, #6]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002fa2:	78b4      	ldrb	r4, [r6, #2]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002fa4:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002fa8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002fac:	79f0      	ldrb	r0, [r6, #7]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002fae:	78f1      	ldrb	r1, [r6, #3]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002fb0:	eb02 4207 	add.w	r2, r2, r7, lsl #16
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002fb4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8002fb8:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8002fbc:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 8002fc0:	ee00 2a90 	vmov	s1, r2
 8002fc4:	ee00 3a10 	vmov	s0, r3
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f001 fa47 	bl	800445c <UI_ExecPositionCmd>
 8002fce:	f88d 0009 	strb.w	r0, [sp, #9]
 8002fd2:	e5bc      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002fd4:	f10d 0209 	add.w	r2, sp, #9
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f001 faa3 	bl	8004524 <UI_GetReg>
          if ( bNoError == true )
 8002fde:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002fe2:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f43f ad7b 	beq.w	8002ae0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002fea:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002fee:	2304      	movs	r3, #4
 8002ff0:	aa04      	add	r2, sp, #16
 8002ff2:	21f0      	movs	r1, #240	; 0xf0
 8002ff4:	47a0      	blx	r4
 8002ff6:	e57a      	b.n	8002aee <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002ff8:	f10d 0209 	add.w	r2, sp, #9
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f001 fa91 	bl	8004524 <UI_GetReg>
          if ( bNoError == true )
 8003002:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003006:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8003008:	2b00      	cmp	r3, #0
 800300a:	f43f ad69 	beq.w	8002ae0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800300e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003012:	2302      	movs	r3, #2
 8003014:	aa04      	add	r2, sp, #16
 8003016:	21f0      	movs	r1, #240	; 0xf0
 8003018:	47a0      	blx	r4
 800301a:	e568      	b.n	8002aee <MCP_ReceivedFrame+0x5a>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800301c:	f10d 0209 	add.w	r2, sp, #9
 8003020:	4628      	mov	r0, r5
 8003022:	f001 fa7f 	bl	8004524 <UI_GetReg>
           if ( bNoError == true )
 8003026:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800302a:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 800302c:	2b00      	cmp	r3, #0
 800302e:	f43f ad57 	beq.w	8002ae0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003032:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003036:	2301      	movs	r3, #1
 8003038:	aa04      	add	r2, sp, #16
 800303a:	21f0      	movs	r1, #240	; 0xf0
 800303c:	47a0      	blx	r4
 800303e:	e556      	b.n	8002aee <MCP_ReceivedFrame+0x5a>
          if (pHandle->pDAC)
 8003040:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8003044:	2800      	cmp	r0, #0
 8003046:	f43f af2d 	beq.w	8002ea4 <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 800304a:	2101      	movs	r1, #1
 800304c:	f001 fa64 	bl	8004518 <UI_GetDAC>
 8003050:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003052:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8003054:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003058:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800305a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800305c:	21f0      	movs	r1, #240	; 0xf0
 800305e:	47a0      	blx	r4
            bNoError = true;
 8003060:	2301      	movs	r3, #1
 8003062:	f88d 3009 	strb.w	r3, [sp, #9]
 8003066:	e574      	b.n	8002b52 <MCP_ReceivedFrame+0xbe>
          if (pHandle->pDAC)
 8003068:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800306c:	2800      	cmp	r0, #0
 800306e:	f43f af19 	beq.w	8002ea4 <MCP_ReceivedFrame+0x410>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8003072:	2100      	movs	r1, #0
 8003074:	f001 fa50 	bl	8004518 <UI_GetDAC>
 8003078:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800307a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 800307c:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003080:	2301      	movs	r3, #1
 8003082:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003084:	21f0      	movs	r1, #240	; 0xf0
 8003086:	47a0      	blx	r4
 8003088:	e531      	b.n	8002aee <MCP_ReceivedFrame+0x5a>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 800308a:	7872      	ldrb	r2, [r6, #1]
 800308c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8003090:	2101      	movs	r1, #1
 8003092:	f001 fa3d 	bl	8004510 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8003096:	2301      	movs	r3, #1
 8003098:	f88d 3009 	strb.w	r3, [sp, #9]
 800309c:	e559      	b.n	8002b52 <MCP_ReceivedFrame+0xbe>
          int32_t wValue = (int32_t)(buffer[1]);
 800309e:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 80030a0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80030a4:	4622      	mov	r2, r4
 80030a6:	2100      	movs	r1, #0
 80030a8:	f001 f88c 	bl	80041c4 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80030ac:	4622      	mov	r2, r4
 80030ae:	2100      	movs	r1, #0
 80030b0:	4628      	mov	r0, r5
 80030b2:	f001 f887 	bl	80041c4 <UI_SetReg>
 80030b6:	f88d 0009 	strb.w	r0, [sp, #9]
 80030ba:	e548      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 80030bc:	7872      	ldrb	r2, [r6, #1]
 80030be:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80030c2:	2100      	movs	r1, #0
 80030c4:	f001 fa24 	bl	8004510 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 80030c8:	2301      	movs	r3, #1
 80030ca:	f88d 3009 	strb.w	r3, [sp, #9]
 80030ce:	e540      	b.n	8002b52 <MCP_ReceivedFrame+0xbe>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80030d0:	78b4      	ldrb	r4, [r6, #2]
 80030d2:	7873      	ldrb	r3, [r6, #1]
 80030d4:	78f0      	ldrb	r0, [r6, #3]
 80030d6:	7932      	ldrb	r2, [r6, #4]
 80030d8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80030dc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80030e0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 80030e4:	4628      	mov	r0, r5
 80030e6:	f001 f86d 	bl	80041c4 <UI_SetReg>
 80030ea:	f88d 0009 	strb.w	r0, [sp, #9]
 80030ee:	e52e      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80030f0:	78b2      	ldrb	r2, [r6, #2]
 80030f2:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80030f4:	4628      	mov	r0, r5
 80030f6:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80030fa:	f001 f863 	bl	80041c4 <UI_SetReg>
 80030fe:	f88d 0009 	strb.w	r0, [sp, #9]
 8003102:	e524      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8003104:	7872      	ldrb	r2, [r6, #1]
 8003106:	4628      	mov	r0, r5
 8003108:	f001 f85c 	bl	80041c4 <UI_SetReg>
 800310c:	f88d 0009 	strb.w	r0, [sp, #9]
 8003110:	e51d      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003112:	2301      	movs	r3, #1
 8003114:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003118:	f88d 300e 	strb.w	r3, [sp, #14]
 800311c:	e517      	b.n	8002b4e <MCP_ReceivedFrame+0xba>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 800311e:	2302      	movs	r3, #2
 8003120:	f88d 300e 	strb.w	r3, [sp, #14]
 8003124:	e6be      	b.n	8002ea4 <MCP_ReceivedFrame+0x410>
 8003126:	2326      	movs	r3, #38	; 0x26
 8003128:	2124      	movs	r1, #36	; 0x24
 800312a:	2222      	movs	r2, #34	; 0x22
 800312c:	e5d0      	b.n	8002cd0 <MCP_ReceivedFrame+0x23c>
 800312e:	bf00      	nop
 8003130:	2aaaaaab 	.word	0x2aaaaaab
 8003134:	20000884 	.word	0x20000884

08003138 <MCP_WaitNextFrame>:
{
 8003138:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800313a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800313c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800313e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003140:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8003148:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800314a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8003150:	4718      	bx	r3
 8003152:	bf00      	nop

08003154 <MCP_Init>:
{
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b083      	sub	sp, #12
 8003158:	4604      	mov	r4, r0
 800315a:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 800315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 800315e:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 8003160:	4f0b      	ldr	r7, [pc, #44]	; (8003190 <MCP_Init+0x3c>)
  pHandle->pDAC = pDAC;
 8003162:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8003166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003168:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 800316c:	4608      	mov	r0, r1
{
 800316e:	4615      	mov	r5, r2
  FCP_SetClient( pFCP, pHandle,
 8003170:	4621      	mov	r1, r4
 8003172:	9700      	str	r7, [sp, #0]
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <MCP_Init+0x40>)
{
 8003176:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <MCP_Init+0x44>)
 800317a:	f005 fd27 	bl	8008bcc <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 800317e:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8003182:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff ffd7 	bl	8003138 <MCP_WaitNextFrame>
}
 800318a:	b003      	add	sp, #12
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318e:	bf00      	nop
 8003190:	0800319d 	.word	0x0800319d
 8003194:	08002a95 	.word	0x08002a95
 8003198:	080031a5 	.word	0x080031a5

0800319c <MCP_OnTimeOut>:
{
 800319c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800319e:	f7ff ffcb 	bl	8003138 <MCP_WaitNextFrame>
}
 80031a2:	bd08      	pop	{r3, pc}

080031a4 <MCP_SentFrame>:
{
 80031a4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80031a6:	f7ff ffc7 	bl	8003138 <MCP_WaitNextFrame>
}
 80031aa:	bd08      	pop	{r3, pc}

080031ac <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80031ac:	b530      	push	{r4, r5, lr}
 80031ae:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80031b0:	f003 fdee 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80031b6:	4d0c      	ldr	r5, [pc, #48]	; (80031e8 <MX_MotorControl_Init+0x3c>)
 80031b8:	4c0c      	ldr	r4, [pc, #48]	; (80031ec <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80031ba:	fba3 3000 	umull	r3, r0, r3, r0
 80031be:	09c0      	lsrs	r0, r0, #7
 80031c0:	f002 fc08 	bl	80059d4 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80031c4:	4629      	mov	r1, r5
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7fe ffc6 	bl	8002158 <MCboot>
  mc_lock_pins();
 80031cc:	f7ff fb88 	bl	80028e0 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <MX_MotorControl_Init+0x44>)
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4622      	mov	r2, r4
 80031d6:	462b      	mov	r3, r5
 80031d8:	2101      	movs	r1, #1
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_MotorControl_Init+0x48>)
 80031dc:	f000 ff22 	bl	8004024 <UI_TaskInit>
}
 80031e0:	b003      	add	sp, #12
 80031e2:	bd30      	pop	{r4, r5, pc}
 80031e4:	10624dd3 	.word	0x10624dd3
 80031e8:	20000df0 	.word	0x20000df0
 80031ec:	20000dec 	.word	0x20000dec
 80031f0:	0800d0bc 	.word	0x0800d0bc
 80031f4:	20000678 	.word	0x20000678

080031f8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80031f8:	4963      	ldr	r1, [pc, #396]	; (8003388 <RCM_RegisterRegConv+0x190>)
 80031fa:	680a      	ldr	r2, [r1, #0]
{
 80031fc:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80031fe:	2a00      	cmp	r2, #0
 8003200:	f000 8081 	beq.w	8003306 <RCM_RegisterRegConv+0x10e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003204:	7904      	ldrb	r4, [r0, #4]
 8003206:	7913      	ldrb	r3, [r2, #4]
 8003208:	429c      	cmp	r4, r3
 800320a:	d01f      	beq.n	800324c <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800320c:	684b      	ldr	r3, [r1, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 808c 	beq.w	800332c <RCM_RegisterRegConv+0x134>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003214:	791d      	ldrb	r5, [r3, #4]
 8003216:	42a5      	cmp	r5, r4
  uint8_t handle=255;
 8003218:	f04f 02ff 	mov.w	r2, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800321c:	d07a      	beq.n	8003314 <RCM_RegisterRegConv+0x11c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800321e:	688d      	ldr	r5, [r1, #8]
 8003220:	2d00      	cmp	r5, #0
 8003222:	f000 80a2 	beq.w	800336a <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003226:	792b      	ldrb	r3, [r5, #4]
 8003228:	42a3      	cmp	r3, r4
 800322a:	d079      	beq.n	8003320 <RCM_RegisterRegConv+0x128>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800322c:	68cb      	ldr	r3, [r1, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8096 	beq.w	8003360 <RCM_RegisterRegConv+0x168>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003234:	791d      	ldrb	r5, [r3, #4]
 8003236:	42a5      	cmp	r5, r4
 8003238:	f000 8084 	beq.w	8003344 <RCM_RegisterRegConv+0x14c>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800323c:	2a03      	cmp	r2, #3
 800323e:	bf88      	it	hi
 8003240:	22ff      	movhi	r2, #255	; 0xff
 8003242:	f240 8097 	bls.w	8003374 <RCM_RegisterRegConv+0x17c>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003246:	4610      	mov	r0, r2
 8003248:	bcf0      	pop	{r4, r5, r6, r7}
 800324a:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	6803      	ldr	r3, [r0, #0]
 8003250:	4293      	cmp	r3, r2
 8003252:	d1db      	bne.n	800320c <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8003254:	2200      	movs	r2, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003256:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003258:	4d4c      	ldr	r5, [pc, #304]	; (800338c <RCM_RegisterRegConv+0x194>)
      RCM_handle_array [handle] = regConv;
 800325a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800325e:	2100      	movs	r1, #0
 8003260:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 8003264:	07e5      	lsls	r5, r4, #31
 8003266:	d422      	bmi.n	80032ae <RCM_RegisterRegConv+0xb6>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003268:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800326a:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800326c:	f021 0104 	bic.w	r1, r1, #4
 8003270:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003272:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003274:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003276:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003278:	f021 0120 	bic.w	r1, r1, #32
 800327c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800327e:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003286:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800328a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800328e:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003290:	6899      	ldr	r1, [r3, #8]
 8003292:	2900      	cmp	r1, #0
 8003294:	dbfc      	blt.n	8003290 <RCM_RegisterRegConv+0x98>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	07cc      	lsls	r4, r1, #31
 800329a:	d408      	bmi.n	80032ae <RCM_RegisterRegConv+0xb6>
  MODIFY_REG(ADCx->CR,
 800329c:	4c3c      	ldr	r4, [pc, #240]	; (8003390 <RCM_RegisterRegConv+0x198>)
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	4021      	ands	r1, r4
 80032a2:	f041 0101 	orr.w	r1, r1, #1
 80032a6:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	07c9      	lsls	r1, r1, #31
 80032ac:	d5f7      	bpl.n	800329e <RCM_RegisterRegConv+0xa6>
      RCM_NoInj_array [handle].enable = false;
 80032ae:	4e39      	ldr	r6, [pc, #228]	; (8003394 <RCM_RegisterRegConv+0x19c>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80032b0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80032b2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80032b6:	0049      	lsls	r1, r1, #1
 80032b8:	1875      	adds	r5, r6, r1
 80032ba:	2700      	movs	r7, #0
 80032bc:	5477      	strb	r7, [r6, r1]
 80032be:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80032c2:	716a      	strb	r2, [r5, #5]
      RCM_NoInj_array [handle].prev = handle;
 80032c4:	712a      	strb	r2, [r5, #4]
 80032c6:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80032c8:	7904      	ldrb	r4, [r0, #4]
 80032ca:	2101      	movs	r1, #1
 80032cc:	2c09      	cmp	r4, #9
 80032ce:	ea4f 6684 	mov.w	r6, r4, lsl #26
 80032d2:	fa01 f104 	lsl.w	r1, r1, r4
 80032d6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80032da:	d83a      	bhi.n	8003352 <RCM_RegisterRegConv+0x15a>
 80032dc:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
 80032e0:	4329      	orrs	r1, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032e2:	0dcc      	lsrs	r4, r1, #23
 80032e4:	f004 0404 	and.w	r4, r4, #4
 80032e8:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80032ea:	6885      	ldr	r5, [r0, #8]
 80032ec:	58e0      	ldr	r0, [r4, r3]
 80032ee:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80032f2:	2607      	movs	r6, #7
 80032f4:	408e      	lsls	r6, r1
 80032f6:	408d      	lsls	r5, r1
 80032f8:	ea20 0106 	bic.w	r1, r0, r6
 80032fc:	4329      	orrs	r1, r5
 80032fe:	50e1      	str	r1, [r4, r3]
}
 8003300:	4610      	mov	r0, r2
 8003302:	bcf0      	pop	{r4, r5, r6, r7}
 8003304:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003306:	684b      	ldr	r3, [r1, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d035      	beq.n	8003378 <RCM_RegisterRegConv+0x180>
 800330c:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800330e:	791d      	ldrb	r5, [r3, #4]
 8003310:	42a5      	cmp	r5, r4
 8003312:	d184      	bne.n	800321e <RCM_RegisterRegConv+0x26>
 8003314:	681d      	ldr	r5, [r3, #0]
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	42ab      	cmp	r3, r5
 800331a:	d180      	bne.n	800321e <RCM_RegisterRegConv+0x26>
 800331c:	2201      	movs	r2, #1
 800331e:	e79a      	b.n	8003256 <RCM_RegisterRegConv+0x5e>
 8003320:	682d      	ldr	r5, [r5, #0]
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	429d      	cmp	r5, r3
 8003326:	d181      	bne.n	800322c <RCM_RegisterRegConv+0x34>
      i++;
 8003328:	2202      	movs	r2, #2
 800332a:	e794      	b.n	8003256 <RCM_RegisterRegConv+0x5e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800332c:	688d      	ldr	r5, [r1, #8]
      i++;
 800332e:	2201      	movs	r2, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003330:	2d00      	cmp	r5, #0
 8003332:	f47f af78 	bne.w	8003226 <RCM_RegisterRegConv+0x2e>
 8003336:	68cb      	ldr	r3, [r1, #12]
 8003338:	b1e3      	cbz	r3, 8003374 <RCM_RegisterRegConv+0x17c>
 800333a:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800333c:	791d      	ldrb	r5, [r3, #4]
 800333e:	42a5      	cmp	r5, r4
 8003340:	f47f af7c 	bne.w	800323c <RCM_RegisterRegConv+0x44>
 8003344:	681c      	ldr	r4, [r3, #0]
 8003346:	6803      	ldr	r3, [r0, #0]
 8003348:	429c      	cmp	r4, r3
 800334a:	f47f af77 	bne.w	800323c <RCM_RegisterRegConv+0x44>
      i++;
 800334e:	2203      	movs	r2, #3
 8003350:	e781      	b.n	8003256 <RCM_RegisterRegConv+0x5e>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003352:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003356:	4331      	orrs	r1, r6
 8003358:	3d1e      	subs	r5, #30
 800335a:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 800335e:	e7c0      	b.n	80032e2 <RCM_RegisterRegConv+0xea>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003360:	2a04      	cmp	r2, #4
 8003362:	f67f af6b 	bls.w	800323c <RCM_RegisterRegConv+0x44>
 8003366:	6803      	ldr	r3, [r0, #0]
 8003368:	e7f1      	b.n	800334e <RCM_RegisterRegConv+0x156>
 800336a:	2a04      	cmp	r2, #4
 800336c:	bf8c      	ite	hi
 800336e:	2202      	movhi	r2, #2
 8003370:	2200      	movls	r2, #0
 8003372:	e7e0      	b.n	8003336 <RCM_RegisterRegConv+0x13e>
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	e76e      	b.n	8003256 <RCM_RegisterRegConv+0x5e>
 8003378:	688d      	ldr	r5, [r1, #8]
 800337a:	b115      	cbz	r5, 8003382 <RCM_RegisterRegConv+0x18a>
 800337c:	461a      	mov	r2, r3
 800337e:	7904      	ldrb	r4, [r0, #4]
 8003380:	e751      	b.n	8003226 <RCM_RegisterRegConv+0x2e>
 8003382:	462a      	mov	r2, r5
 8003384:	e7d7      	b.n	8003336 <RCM_RegisterRegConv+0x13e>
 8003386:	bf00      	nop
 8003388:	20000e34 	.word	0x20000e34
 800338c:	20000e10 	.word	0x20000e10
 8003390:	7fffffc0 	.word	0x7fffffc0
 8003394:	20000df8 	.word	0x20000df8

08003398 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003398:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 800339a:	0044      	lsls	r4, r0, #1
 800339c:	1822      	adds	r2, r4, r0
 800339e:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <RCM_ExecRegularConv+0x170>)
 80033a0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80033a4:	2a00      	cmp	r2, #0
 80033a6:	d139      	bne.n	800341c <RCM_ExecRegularConv+0x84>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80033a8:	7819      	ldrb	r1, [r3, #0]
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d178      	bne.n	80034a0 <RCM_ExecRegularConv+0x108>
 80033ae:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80033b0:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d07a      	beq.n	80034ac <RCM_ExecRegularConv+0x114>
      {
        if (RCM_NoInj_array [i].next > handle)
 80033b6:	7ade      	ldrb	r6, [r3, #11]
 80033b8:	4286      	cmp	r6, r0
 80033ba:	f200 8097 	bhi.w	80034ec <RCM_ExecRegularConv+0x154>
      if (RCM_NoInj_array [i].enable == true)
 80033be:	7b1a      	ldrb	r2, [r3, #12]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	f000 8096 	beq.w	80034f2 <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array [i].next > handle)
 80033c6:	7c5e      	ldrb	r6, [r3, #17]
 80033c8:	42b0      	cmp	r0, r6
 80033ca:	d305      	bcc.n	80033d8 <RCM_ExecRegularConv+0x40>
      if (RCM_NoInj_array [i].enable == true)
 80033cc:	7c9a      	ldrb	r2, [r3, #18]
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	f040 8093 	bne.w	80034fa <RCM_ExecRegularConv+0x162>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80033d4:	2202      	movs	r2, #2
 80033d6:	e070      	b.n	80034ba <RCM_ExecRegularConv+0x122>
 80033d8:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 80033da:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 80033dc:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80033e0:	1821      	adds	r1, r4, r0
 80033e2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80033e6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80033ea:	714e      	strb	r6, [r1, #5]
 80033ec:	4e47      	ldr	r6, [pc, #284]	; (800350c <RCM_ExecRegularConv+0x174>)
          RCM_NoInj_array [handle].prev = i;
 80033ee:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 80033f0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80033f4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80033f8:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 80033fa:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80033fc:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 80033fe:	1821      	adds	r1, r4, r0
 8003400:	0049      	lsls	r1, r1, #1
 8003402:	185d      	adds	r5, r3, r1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003404:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003408:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    RCM_NoInj_array [handle].status = notvalid;
 800340c:	2700      	movs	r7, #0
 800340e:	706f      	strb	r7, [r5, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003410:	7852      	ldrb	r2, [r2, #1]
    RCM_NoInj_array [handle].enable = true;
 8003412:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003414:	42aa      	cmp	r2, r5
    RCM_NoInj_array [handle].enable = true;
 8003416:	545d      	strb	r5, [r3, r1]
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8003418:	bf18      	it	ne
 800341a:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 800341c:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <RCM_ExecRegularConv+0x178>)
 800341e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8003422:	2a00      	cmp	r2, #0
 8003424:	d132      	bne.n	800348c <RCM_ExecRegularConv+0xf4>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003426:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <RCM_ExecRegularConv+0x17c>)
 8003428:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800342c:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800342e:	6811      	ldr	r1, [r2, #0]
 8003430:	2d09      	cmp	r5, #9
 8003432:	f04f 0201 	mov.w	r2, #1
 8003436:	ea4f 6785 	mov.w	r7, r5, lsl #26
 800343a:	fa02 f205 	lsl.w	r2, r2, r5
 800343e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8003442:	d929      	bls.n	8003498 <RCM_ExecRegularConv+0x100>
 8003444:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003448:	433a      	orrs	r2, r7
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800344a:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800344c:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  MODIFY_REG(*preg,
 8003450:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003452:	0d12      	lsrs	r2, r2, #20
 8003454:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003458:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800345c:	432a      	orrs	r2, r5
 800345e:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003460:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003462:	688a      	ldr	r2, [r1, #8]
 8003464:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003468:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800346c:	f042 0204 	orr.w	r2, r2, #4
 8003470:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003472:	680a      	ldr	r2, [r1, #0]
 8003474:	0752      	lsls	r2, r2, #29
 8003476:	d5fc      	bpl.n	8003472 <RCM_ExecRegularConv+0xda>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003478:	1822      	adds	r2, r4, r0
 800347a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800347e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003480:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003482:	4d22      	ldr	r5, [pc, #136]	; (800350c <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array [handle].status = valid;
 8003484:	2102      	movs	r1, #2
 8003486:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003488:	7952      	ldrb	r2, [r2, #5]
 800348a:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 800348c:	4420      	add	r0, r4
 800348e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8003492:	bcf0      	pop	{r4, r5, r6, r7}
 8003494:	8858      	ldrh	r0, [r3, #2]
 8003496:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003498:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 800349c:	4332      	orrs	r2, r6
 800349e:	e7d7      	b.n	8003450 <RCM_ExecRegularConv+0xb8>
        if (RCM_NoInj_array [i].next > handle)
 80034a0:	795e      	ldrb	r6, [r3, #5]
 80034a2:	42b0      	cmp	r0, r6
 80034a4:	d399      	bcc.n	80033da <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80034a6:	7999      	ldrb	r1, [r3, #6]
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d184      	bne.n	80033b6 <RCM_ExecRegularConv+0x1e>
 80034ac:	7b19      	ldrb	r1, [r3, #12]
 80034ae:	2900      	cmp	r1, #0
 80034b0:	d189      	bne.n	80033c6 <RCM_ExecRegularConv+0x2e>
 80034b2:	7c99      	ldrb	r1, [r3, #18]
 80034b4:	bb09      	cbnz	r1, 80034fa <RCM_ExecRegularConv+0x162>
       if (LastEnable != RCM_MAX_CONV )
 80034b6:	2a04      	cmp	r2, #4
 80034b8:	d014      	beq.n	80034e4 <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80034ba:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80034be:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80034c2:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80034c4:	f895 c005 	ldrb.w	ip, [r5, #5]
 80034c8:	4e10      	ldr	r6, [pc, #64]	; (800350c <RCM_ExecRegularConv+0x174>)
         RCM_NoInj_array [formerNext].prev = handle;
 80034ca:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80034ce:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80034d2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80034d6:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 80034d8:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80034dc:	7138      	strb	r0, [r7, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 80034de:	7168      	strb	r0, [r5, #5]
 80034e0:	7832      	ldrb	r2, [r6, #0]
 80034e2:	e78c      	b.n	80033fe <RCM_ExecRegularConv+0x66>
         RCM_currentHandle = handle;
 80034e4:	4e09      	ldr	r6, [pc, #36]	; (800350c <RCM_ExecRegularConv+0x174>)
 80034e6:	4602      	mov	r2, r0
 80034e8:	7030      	strb	r0, [r6, #0]
 80034ea:	e788      	b.n	80033fe <RCM_ExecRegularConv+0x66>
      i++;
 80034ec:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80034ee:	4611      	mov	r1, r2
 80034f0:	e774      	b.n	80033dc <RCM_ExecRegularConv+0x44>
 80034f2:	7c9a      	ldrb	r2, [r3, #18]
 80034f4:	b90a      	cbnz	r2, 80034fa <RCM_ExecRegularConv+0x162>
      i++;
 80034f6:	2201      	movs	r2, #1
 80034f8:	e7df      	b.n	80034ba <RCM_ExecRegularConv+0x122>
        if (RCM_NoInj_array [i].next > handle)
 80034fa:	7dde      	ldrb	r6, [r3, #23]
 80034fc:	4286      	cmp	r6, r0
      i++;
 80034fe:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8003502:	d9da      	bls.n	80034ba <RCM_ExecRegularConv+0x122>
 8003504:	e769      	b.n	80033da <RCM_ExecRegularConv+0x42>
 8003506:	bf00      	nop
 8003508:	20000df8 	.word	0x20000df8
 800350c:	20000df4 	.word	0x20000df4
 8003510:	2000034c 	.word	0x2000034c
 8003514:	20000e34 	.word	0x20000e34

08003518 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003518:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800351a:	4c6c      	ldr	r4, [pc, #432]	; (80036cc <RCM_ExecUserConv+0x1b4>)
 800351c:	7823      	ldrb	r3, [r4, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d000      	beq.n	8003524 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <RCM_ExecUserConv+0x1b8>)
  if (RCM_NoInj_array [handle].enable == false)
 8003526:	4b6b      	ldr	r3, [pc, #428]	; (80036d4 <RCM_ExecUserConv+0x1bc>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003528:	7810      	ldrb	r0, [r2, #0]
  if (RCM_NoInj_array [handle].enable == false)
 800352a:	0042      	lsls	r2, r0, #1
 800352c:	1811      	adds	r1, r2, r0
 800352e:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 8003532:	2900      	cmp	r1, #0
 8003534:	d150      	bne.n	80035d8 <RCM_ExecUserConv+0xc0>
      if (RCM_NoInj_array [i].enable == true)
 8003536:	781d      	ldrb	r5, [r3, #0]
 8003538:	b1b5      	cbz	r5, 8003568 <RCM_ExecUserConv+0x50>
        if (RCM_NoInj_array [i].next > handle)
 800353a:	795e      	ldrb	r6, [r3, #5]
 800353c:	42b0      	cmp	r0, r6
 800353e:	d214      	bcs.n	800356a <RCM_ExecUserConv+0x52>
      if (RCM_NoInj_array [i].enable == true)
 8003540:	460d      	mov	r5, r1
          RCM_NoInj_array [i].next = handle;
 8003542:	eb05 0745 	add.w	r7, r5, r5, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8003546:	1815      	adds	r5, r2, r0
 8003548:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800354c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8003550:	716e      	strb	r6, [r5, #5]
          RCM_NoInj_array [i].next = handle;
 8003552:	eb03 0747 	add.w	r7, r3, r7, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8003556:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 800355a:	4e5f      	ldr	r6, [pc, #380]	; (80036d8 <RCM_ExecUserConv+0x1c0>)
          RCM_NoInj_array [handle].prev = i;
 800355c:	7129      	strb	r1, [r5, #4]
          RCM_NoInj_array [i].next = handle;
 800355e:	7178      	strb	r0, [r7, #5]
 8003560:	7831      	ldrb	r1, [r6, #0]
          RCM_NoInj_array [formerNext].prev = handle;
 8003562:	f88c 0004 	strb.w	r0, [ip, #4]
 8003566:	e026      	b.n	80035b6 <RCM_ExecUserConv+0x9e>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003568:	2104      	movs	r1, #4
      if (RCM_NoInj_array [i].enable == true)
 800356a:	799d      	ldrb	r5, [r3, #6]
 800356c:	2d00      	cmp	r5, #0
 800356e:	f000 808e 	beq.w	800368e <RCM_ExecUserConv+0x176>
        if (RCM_NoInj_array [i].next > handle)
 8003572:	7ade      	ldrb	r6, [r3, #11]
 8003574:	42b0      	cmp	r0, r6
 8003576:	f0c0 809c 	bcc.w	80036b2 <RCM_ExecUserConv+0x19a>
      if (RCM_NoInj_array [i].enable == true)
 800357a:	7b19      	ldrb	r1, [r3, #12]
 800357c:	2900      	cmp	r1, #0
 800357e:	f040 809b 	bne.w	80036b8 <RCM_ExecUserConv+0x1a0>
 8003582:	7c99      	ldrb	r1, [r3, #18]
 8003584:	2900      	cmp	r1, #0
 8003586:	f040 8086 	bne.w	8003696 <RCM_ExecUserConv+0x17e>
      i++;
 800358a:	2101      	movs	r1, #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 800358c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8003590:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8003594:	1815      	adds	r5, r2, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003596:	f897 e005 	ldrb.w	lr, [r7, #5]
 800359a:	4e4f      	ldr	r6, [pc, #316]	; (80036d8 <RCM_ExecUserConv+0x1c0>)
         RCM_NoInj_array [handle].next = formerNext;
 800359c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80035a0:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 80035a4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80035a8:	7129      	strb	r1, [r5, #4]
 80035aa:	7831      	ldrb	r1, [r6, #0]
         RCM_NoInj_array [handle].next = formerNext;
 80035ac:	f885 e005 	strb.w	lr, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80035b0:	f88c 0004 	strb.w	r0, [ip, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 80035b4:	7178      	strb	r0, [r7, #5]
    RCM_NoInj_array [handle].enable = true;
 80035b6:	1815      	adds	r5, r2, r0
 80035b8:	006d      	lsls	r5, r5, #1
 80035ba:	195f      	adds	r7, r3, r5
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80035bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80035c0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RCM_NoInj_array [handle].status = notvalid;
 80035c4:	f04f 0c00 	mov.w	ip, #0
 80035c8:	f887 c001 	strb.w	ip, [r7, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80035cc:	7849      	ldrb	r1, [r1, #1]
    RCM_NoInj_array [handle].enable = true;
 80035ce:	2701      	movs	r7, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80035d0:	42b9      	cmp	r1, r7
    RCM_NoInj_array [handle].enable = true;
 80035d2:	555f      	strb	r7, [r3, r5]
      RCM_currentHandle = handle;
 80035d4:	bf18      	it	ne
 80035d6:	7030      	strbne	r0, [r6, #0]
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80035d8:	4940      	ldr	r1, [pc, #256]	; (80036dc <RCM_ExecUserConv+0x1c4>)
 80035da:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 80035de:	2900      	cmp	r1, #0
 80035e0:	d143      	bne.n	800366a <RCM_ExecUserConv+0x152>
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80035e2:	493f      	ldr	r1, [pc, #252]	; (80036e0 <RCM_ExecUserConv+0x1c8>)
 80035e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80035e8:	790e      	ldrb	r6, [r1, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80035ea:	680d      	ldr	r5, [r1, #0]
 80035ec:	2e09      	cmp	r6, #9
 80035ee:	f04f 0101 	mov.w	r1, #1
 80035f2:	ea4f 6c86 	mov.w	ip, r6, lsl #26
 80035f6:	fa01 f106 	lsl.w	r1, r1, r6
 80035fa:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80035fe:	d83e      	bhi.n	800367e <RCM_ExecUserConv+0x166>
 8003600:	ea4c 5707 	orr.w	r7, ip, r7, lsl #20
 8003604:	4339      	orrs	r1, r7
  MODIFY_REG(*preg,
 8003606:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8003608:	0d09      	lsrs	r1, r1, #20
 800360a:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 800360e:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
 8003612:	4331      	orrs	r1, r6
 8003614:	6329      	str	r1, [r5, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003616:	6c29      	ldr	r1, [r5, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003618:	68a9      	ldr	r1, [r5, #8]
 800361a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800361e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003622:	f041 0104 	orr.w	r1, r1, #4
 8003626:	60a9      	str	r1, [r5, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003628:	6829      	ldr	r1, [r5, #0]
 800362a:	0749      	lsls	r1, r1, #29
 800362c:	d5fc      	bpl.n	8003628 <RCM_ExecUserConv+0x110>
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800362e:	4402      	add	r2, r0
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003630:	6c29      	ldr	r1, [r5, #64]	; 0x40
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003632:	4d29      	ldr	r5, [pc, #164]	; (80036d8 <RCM_ExecUserConv+0x1c0>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003634:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003638:	b289      	uxth	r1, r1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <RCM_ExecUserConv+0x1cc>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800363c:	8059      	strh	r1, [r3, #2]
    RCM_NoInj_array [handle].status = valid;
 800363e:	2602      	movs	r6, #2
 8003640:	705e      	strb	r6, [r3, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003642:	795b      	ldrb	r3, [r3, #5]
 8003644:	702b      	strb	r3, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003646:	8011      	strh	r1, [r2, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003648:	2302      	movs	r3, #2
 800364a:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800364c:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <RCM_ExecUserConv+0x1d0>)
 800364e:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8003652:	2d00      	cmp	r5, #0
 8003654:	f43f af65 	beq.w	8003522 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003658:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800365c:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800365e:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003660:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003662:	462b      	mov	r3, r5
}
 8003664:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003668:	4718      	bx	r3
 800366a:	4402      	add	r2, r0
 800366c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003670:	4d1c      	ldr	r5, [pc, #112]	; (80036e4 <RCM_ExecUserConv+0x1cc>)
 8003672:	785a      	ldrb	r2, [r3, #1]
  retVal = RCM_NoInj_array [handle].value;
 8003674:	8859      	ldrh	r1, [r3, #2]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003676:	8029      	strh	r1, [r5, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003678:	2a00      	cmp	r2, #0
 800367a:	d0e7      	beq.n	800364c <RCM_ExecUserConv+0x134>
 800367c:	e7e4      	b.n	8003648 <RCM_ExecUserConv+0x130>
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800367e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003682:	ea41 010c 	orr.w	r1, r1, ip
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003686:	3f1e      	subs	r7, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003688:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
 800368c:	e7bb      	b.n	8003606 <RCM_ExecUserConv+0xee>
      if (RCM_NoInj_array [i].enable == true)
 800368e:	7b1d      	ldrb	r5, [r3, #12]
 8003690:	b995      	cbnz	r5, 80036b8 <RCM_ExecUserConv+0x1a0>
 8003692:	7c9d      	ldrb	r5, [r3, #18]
 8003694:	b135      	cbz	r5, 80036a4 <RCM_ExecUserConv+0x18c>
        if (RCM_NoInj_array [i].next > handle)
 8003696:	7dde      	ldrb	r6, [r3, #23]
 8003698:	42b0      	cmp	r0, r6
      i++;
 800369a:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array [i].next > handle)
 800369e:	f4bf af75 	bcs.w	800358c <RCM_ExecUserConv+0x74>
 80036a2:	e74d      	b.n	8003540 <RCM_ExecUserConv+0x28>
       if (LastEnable != RCM_MAX_CONV )
 80036a4:	2904      	cmp	r1, #4
 80036a6:	f47f af71 	bne.w	800358c <RCM_ExecUserConv+0x74>
         RCM_currentHandle = handle;
 80036aa:	4e0b      	ldr	r6, [pc, #44]	; (80036d8 <RCM_ExecUserConv+0x1c0>)
 80036ac:	4601      	mov	r1, r0
 80036ae:	7030      	strb	r0, [r6, #0]
 80036b0:	e781      	b.n	80035b6 <RCM_ExecUserConv+0x9e>
      i++;
 80036b2:	2101      	movs	r1, #1
      if (RCM_NoInj_array [i].enable == true)
 80036b4:	460d      	mov	r5, r1
 80036b6:	e744      	b.n	8003542 <RCM_ExecUserConv+0x2a>
        if (RCM_NoInj_array [i].next > handle)
 80036b8:	7c5e      	ldrb	r6, [r3, #17]
 80036ba:	42b0      	cmp	r0, r6
 80036bc:	d304      	bcc.n	80036c8 <RCM_ExecUserConv+0x1b0>
      if (RCM_NoInj_array [i].enable == true)
 80036be:	7c99      	ldrb	r1, [r3, #18]
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d1e8      	bne.n	8003696 <RCM_ExecUserConv+0x17e>
      i++;
 80036c4:	2102      	movs	r1, #2
 80036c6:	e761      	b.n	800358c <RCM_ExecUserConv+0x74>
 80036c8:	2102      	movs	r1, #2
 80036ca:	e739      	b.n	8003540 <RCM_ExecUserConv+0x28>
 80036cc:	20000e30 	.word	0x20000e30
 80036d0:	20000df5 	.word	0x20000df5
 80036d4:	20000df8 	.word	0x20000df8
 80036d8:	20000df4 	.word	0x20000df4
 80036dc:	2000034c 	.word	0x2000034c
 80036e0:	20000e34 	.word	0x20000e34
 80036e4:	20000e44 	.word	0x20000e44
 80036e8:	20000e10 	.word	0x20000e10

080036ec <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
 80036ec:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <RCM_ExecNextConv+0x78>)
 80036f0:	481d      	ldr	r0, [pc, #116]	; (8003768 <RCM_ExecNextConv+0x7c>)
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	0054      	lsls	r4, r2, #1
 80036f6:	18a3      	adds	r3, r4, r2
 80036f8:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80036fc:	b35b      	cbz	r3, 8003756 <RCM_ExecNextConv+0x6a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <RCM_ExecNextConv+0x80>)
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003706:	2504      	movs	r5, #4
 8003708:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800370a:	791d      	ldrb	r5, [r3, #4]
 800370c:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800370e:	2d09      	cmp	r5, #9
 8003710:	ea4f 6785 	mov.w	r7, r5, lsl #26
 8003714:	fa03 f305 	lsl.w	r3, r3, r5
 8003718:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800371c:	d91d      	bls.n	800375a <RCM_ExecNextConv+0x6e>
 800371e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003722:	433b      	orrs	r3, r7
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003724:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003726:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(*preg,
 800372a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003732:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003736:	432b      	orrs	r3, r5
 8003738:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800373a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800373c:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800373e:	4422      	add	r2, r4
 8003740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003744:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	2201      	movs	r2, #1
 8003752:	608b      	str	r3, [r1, #8]
 8003754:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003756:	bcf0      	pop	{r4, r5, r6, r7}
 8003758:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800375a:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 800375e:	4333      	orrs	r3, r6
 8003760:	e7e3      	b.n	800372a <RCM_ExecNextConv+0x3e>
 8003762:	bf00      	nop
 8003764:	20000df4 	.word	0x20000df4
 8003768:	20000df8 	.word	0x20000df8
 800376c:	20000e34 	.word	0x20000e34

08003770 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8003770:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8003772:	4c0e      	ldr	r4, [pc, #56]	; (80037ac <RCM_ReadOngoingConv+0x3c>)
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <RCM_ReadOngoingConv+0x40>)
 8003776:	7820      	ldrb	r0, [r4, #0]
 8003778:	0042      	lsls	r2, r0, #1
 800377a:	1811      	adds	r1, r2, r0
 800377c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003780:	784d      	ldrb	r5, [r1, #1]
 8003782:	2d01      	cmp	r5, #1
 8003784:	d006      	beq.n	8003794 <RCM_ReadOngoingConv+0x24>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003786:	4402      	add	r2, r0
 8003788:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800378c:	795b      	ldrb	r3, [r3, #5]
 800378e:	7023      	strb	r3, [r4, #0]
}
 8003790:	bc70      	pop	{r4, r5, r6}
 8003792:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8003794:	4d07      	ldr	r5, [pc, #28]	; (80037b4 <RCM_ReadOngoingConv+0x44>)
 8003796:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 800379a:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800379c:	682e      	ldr	r6, [r5, #0]
 800379e:	0776      	lsls	r6, r6, #29
 80037a0:	d5f1      	bpl.n	8003786 <RCM_ReadOngoingConv+0x16>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80037a2:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 80037a4:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 80037a6:	2502      	movs	r5, #2
 80037a8:	704d      	strb	r5, [r1, #1]
 80037aa:	e7ec      	b.n	8003786 <RCM_ReadOngoingConv+0x16>
 80037ac:	20000df4 	.word	0x20000df4
 80037b0:	20000df8 	.word	0x20000df8
 80037b4:	20000e34 	.word	0x20000e34

080037b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_MspInit+0x3c>)
{
 80037ba:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
 80037c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80037c6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c8:	f002 0201 	and.w	r2, r2, #1
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037e0:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037e4:	f002 f8a0 	bl	8005928 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e8:	b003      	add	sp, #12
 80037ea:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80037ee:	f002 becf 	b.w	8006590 <HAL_PWREx_DisableUCPDDeadBattery>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80037fa:	6802      	ldr	r2, [r0, #0]
{
 80037fc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fe:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003800:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003808:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800380c:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800380e:	d01f      	beq.n	8003850 <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_ADC_MspInit+0xe0>)
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003816:	b00a      	add	sp, #40	; 0x28
 8003818:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800381a:	4a30      	ldr	r2, [pc, #192]	; (80038dc <HAL_ADC_MspInit+0xe4>)
 800381c:	6813      	ldr	r3, [r2, #0]
 800381e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003820:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003824:	d04d      	beq.n	80038c2 <HAL_ADC_MspInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_ADC_MspInit+0xe8>)
 8003828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003838:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383a:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800383c:	a905      	add	r1, sp, #20
 800383e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003842:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003844:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003848:	f002 fcb4 	bl	80061b4 <HAL_GPIO_Init>
}
 800384c:	b00a      	add	sp, #40	; 0x28
 800384e:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <HAL_ADC_MspInit+0xe4>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003856:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003858:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800385a:	d027      	beq.n	80038ac <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_ADC_MspInit+0xe8>)
 800385e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	64da      	str	r2, [r3, #76]	; 0x4c
 8003866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003868:	f002 0201 	and.w	r2, r2, #1
 800386c:	9201      	str	r2, [sp, #4]
 800386e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003872:	f042 0202 	orr.w	r2, r2, #2
 8003876:	64da      	str	r2, [r3, #76]	; 0x4c
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003880:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003882:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	a905      	add	r1, sp, #20
 8003886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388c:	e9cd 3405 	strd	r3, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	f002 fc90 	bl	80061b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003894:	f244 0202 	movw	r2, #16386	; 0x4002
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	a905      	add	r1, sp, #20
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 80038a0:	e9cd 2405 	strd	r2, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	f002 fc86 	bl	80061b4 <HAL_GPIO_Init>
}
 80038a8:	b00a      	add	sp, #40	; 0x28
 80038aa:	bd10      	pop	{r4, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_ADC_MspInit+0xe8>)
 80038ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	e7cc      	b.n	800385c <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_ADC_MspInit+0xe8>)
 80038c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	9b03      	ldr	r3, [sp, #12]
 80038d6:	e7a6      	b.n	8003826 <HAL_ADC_MspInit+0x2e>
 80038d8:	50000100 	.word	0x50000100
 80038dc:	2000088c 	.word	0x2000088c
 80038e0:	40021000 	.word	0x40021000
 80038e4:	48000400 	.word	0x48000400

080038e8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80038e8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	492c      	ldr	r1, [pc, #176]	; (80039a0 <HAL_COMP_MspInit+0xb8>)
{
 80038ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80038f2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80038f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80038fc:	9307      	str	r3, [sp, #28]
  if(hcomp->Instance==COMP1)
 80038fe:	d007      	beq.n	8003910 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <HAL_COMP_MspInit+0xbc>)
 8003902:	429a      	cmp	r2, r3
 8003904:	d033      	beq.n	800396e <HAL_COMP_MspInit+0x86>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_COMP_MspInit+0xc0>)
 8003908:	429a      	cmp	r2, r3
 800390a:	d019      	beq.n	8003940 <HAL_COMP_MspInit+0x58>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800390c:	b008      	add	sp, #32
 800390e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003914:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003918:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	64da      	str	r2, [r3, #76]	; 0x4c
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800392a:	2202      	movs	r2, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800392c:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800392e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003934:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003938:	f002 fc3c 	bl	80061b4 <HAL_GPIO_Init>
}
 800393c:	b008      	add	sp, #32
 800393e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003944:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800394a:	4818      	ldr	r0, [pc, #96]	; (80039ac <HAL_COMP_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394c:	f042 0202 	orr.w	r2, r2, #2
 8003950:	64da      	str	r2, [r3, #76]	; 0x4c
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800395a:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800395c:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800395e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003962:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003966:	f002 fc25 	bl	80061b4 <HAL_GPIO_Init>
}
 800396a:	b008      	add	sp, #32
 800396c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003972:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	64da      	str	r2, [r3, #76]	; 0x4c
 800397e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003986:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003988:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800398a:	a903      	add	r1, sp, #12
 800398c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003990:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003992:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003996:	f002 fc0d 	bl	80061b4 <HAL_GPIO_Init>
}
 800399a:	b008      	add	sp, #32
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	40010200 	.word	0x40010200
 80039a4:	40010204 	.word	0x40010204
 80039a8:	4001020c 	.word	0x4001020c
 80039ac:	48000400 	.word	0x48000400

080039b0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80039b0:	6802      	ldr	r2, [r0, #0]
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_CORDIC_MspInit+0x2c>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d000      	beq.n	80039ba <HAL_CORDIC_MspInit+0xa>
 80039b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80039ba:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80039c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80039ca:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80039d6:	b002      	add	sp, #8
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40020c00 	.word	0x40020c00

080039e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80039e0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80039e2:	6801      	ldr	r1, [r0, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_DAC_MspInit+0x60>)
{
 80039e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 80039ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80039f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039f4:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80039f6:	d001      	beq.n	80039fc <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80039f8:	b008      	add	sp, #32
 80039fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80039fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003a04:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a10:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003a14:	9201      	str	r2, [sp, #4]
 8003a16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8003a28:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a2a:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a32:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003a36:	f002 fbbd 	bl	80061b4 <HAL_GPIO_Init>
}
 8003a3a:	b008      	add	sp, #32
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	bf00      	nop
 8003a40:	50000800 	.word	0x50000800

08003a44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003a44:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 8003a46:	6802      	ldr	r2, [r0, #0]
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_FDCAN_MspInit+0xa8>)
{
 8003a4a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 8003a4e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a54:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003a58:	9407      	str	r4, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 8003a5a:	d001      	beq.n	8003a60 <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003a5c:	b008      	add	sp, #32
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003a60:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2602      	movs	r6, #2
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003a66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a70:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003a74:	9200      	str	r2, [sp, #0]
 8003a76:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a82:	f002 0201 	and.w	r2, r2, #1
 8003a86:	9201      	str	r2, [sp, #4]
 8003a88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a8c:	f042 0202 	orr.w	r2, r2, #2
 8003a90:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003a9a:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	a903      	add	r1, sp, #12
 8003aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003aa8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aaa:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f002 fb81 	bl	80061b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab6:	a903      	add	r1, sp, #12
 8003ab8:	480d      	ldr	r0, [pc, #52]	; (8003af0 <HAL_FDCAN_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003abe:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac0:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	f002 fb76 	bl	80061b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 7, 0);
 8003ac8:	4622      	mov	r2, r4
 8003aca:	2107      	movs	r1, #7
 8003acc:	2015      	movs	r0, #21
 8003ace:	f001 ff3d 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003ad2:	2015      	movs	r0, #21
 8003ad4:	f001 ff70 	bl	80059b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 7, 0);
 8003ad8:	4622      	mov	r2, r4
 8003ada:	2107      	movs	r1, #7
 8003adc:	2016      	movs	r0, #22
 8003ade:	f001 ff35 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003ae2:	2016      	movs	r0, #22
 8003ae4:	f001 ff68 	bl	80059b8 <HAL_NVIC_EnableIRQ>
}
 8003ae8:	b008      	add	sp, #32
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	40006400 	.word	0x40006400
 8003af0:	48000400 	.word	0x48000400

08003af4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003af4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8003af6:	6802      	ldr	r2, [r0, #0]
 8003af8:	492b      	ldr	r1, [pc, #172]	; (8003ba8 <HAL_OPAMP_MspInit+0xb4>)
{
 8003afa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003afe:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003b04:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003b08:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 8003b0a:	d007      	beq.n	8003b1c <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_OPAMP_MspInit+0xb8>)
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d032      	beq.n	8003b78 <HAL_OPAMP_MspInit+0x84>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8003b12:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <HAL_OPAMP_MspInit+0xbc>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d019      	beq.n	8003b4c <HAL_OPAMP_MspInit+0x58>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8003b18:	b008      	add	sp, #32
 8003b1a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b24:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003b36:	220e      	movs	r2, #14
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b38:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b40:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b44:	f002 fb36 	bl	80061b4 <HAL_GPIO_Init>
}
 8003b48:	b008      	add	sp, #32
 8003b4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003b50:	33f8      	adds	r3, #248	; 0xf8
 8003b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b54:	4817      	ldr	r0, [pc, #92]	; (8003bb4 <HAL_OPAMP_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	f042 0202 	orr.w	r2, r2, #2
 8003b5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003b64:	2207      	movs	r2, #7
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b66:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6a:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b70:	f002 fb20 	bl	80061b4 <HAL_GPIO_Init>
}
 8003b74:	b008      	add	sp, #32
 8003b76:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b78:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003b7c:	33fc      	adds	r3, #252	; 0xfc
 8003b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003b8e:	22e0      	movs	r2, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b90:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	a903      	add	r1, sp, #12
 8003b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b9a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f002 fb09 	bl	80061b4 <HAL_GPIO_Init>
}
 8003ba2:	b008      	add	sp, #32
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40010300 	.word	0x40010300
 8003bac:	40010304 	.word	0x40010304
 8003bb0:	40010308 	.word	0x40010308
 8003bb4:	48000400 	.word	0x48000400

08003bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bb8:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_TIM_Base_MspInit+0x90>)
 8003bbe:	4293      	cmp	r3, r2
{
 8003bc0:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8003bc2:	d008      	beq.n	8003bd6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d027      	beq.n	8003c1a <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003bca:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <HAL_TIM_Base_MspInit+0x94>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <HAL_TIM_Base_MspInit+0x38>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bd0:	b005      	add	sp, #20
 8003bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_TIM_Base_MspInit+0x98>)
 8003bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	9b01      	ldr	r3, [sp, #4]
}
 8003bea:	b005      	add	sp, #20
 8003bec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <HAL_TIM_Base_MspInit+0x98>)
 8003bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bf4:	f042 0202 	orr.w	r2, r2, #2
 8003bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2106      	movs	r1, #6
 8003c06:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c08:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003c0a:	f001 fe9f 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c0e:	201d      	movs	r0, #29
}
 8003c10:	b005      	add	sp, #20
 8003c12:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c16:	f001 becf 	b.w	80059b8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003c1e:	2106      	movs	r1, #6
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	659a      	str	r2, [r3, #88]	; 0x58
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003c30:	2200      	movs	r2, #0
 8003c32:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003c36:	f001 fe89 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c3a:	201c      	movs	r0, #28
}
 8003c3c:	b005      	add	sp, #20
 8003c3e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c42:	f001 beb9 	b.w	80059b8 <HAL_NVIC_EnableIRQ>
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c54:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003c56:	6801      	ldr	r1, [r0, #0]
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x60>)
{
 8003c5a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003c5e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003c64:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003c68:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM4)
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c6c:	b008      	add	sp, #32
 8003c6e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c78:	480f      	ldr	r0, [pc, #60]	; (8003cb8 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c7c:	f042 0204 	orr.w	r2, r2, #4
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
 8003c82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c84:	f002 0204 	and.w	r2, r2, #4
 8003c88:	9201      	str	r2, [sp, #4]
 8003c8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c8e:	f042 0202 	orr.w	r2, r2, #2
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003c9c:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ca4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003caa:	f002 fa83 	bl	80061b4 <HAL_GPIO_Init>
}
 8003cae:	b008      	add	sp, #32
 8003cb0:	bd10      	pop	{r4, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	48000400 	.word	0x48000400

08003cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cbc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003cbe:	6801      	ldr	r1, [r0, #0]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <HAL_TIM_MspPostInit+0xa8>)
{
 8003cc2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003cc6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003ccc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003cd0:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8003cd2:	d001      	beq.n	8003cd8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cd4:	b009      	add	sp, #36	; 0x24
 8003cd6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003ce4:	4820      	ldr	r0, [pc, #128]	; (8003d68 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce6:	f042 0204 	orr.w	r2, r2, #4
 8003cea:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cee:	f002 0204 	and.w	r2, r2, #4
 8003cf2:	9200      	str	r2, [sp, #0]
 8003cf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cf8:	f042 0202 	orr.w	r2, r2, #2
 8003cfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d00:	f002 0202 	and.w	r2, r2, #2
 8003d04:	9201      	str	r2, [sp, #4]
 8003d06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003d18:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003d1e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003d22:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d24:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d28:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f002 fa42 	bl	80061b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003d34:	a903      	add	r1, sp, #12
 8003d36:	480d      	ldr	r0, [pc, #52]	; (8003d6c <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003d38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d3a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003d3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003d42:	f002 fa37 	bl	80061b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003d46:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003d4a:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4c:	a903      	add	r1, sp, #12
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d52:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d56:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003d58:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003d5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5c:	f002 fa2a 	bl	80061b4 <HAL_GPIO_Init>
}
 8003d60:	b009      	add	sp, #36	; 0x24
 8003d62:	bd30      	pop	{r4, r5, pc}
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	48000800 	.word	0x48000800
 8003d6c:	48000400 	.word	0x48000400

08003d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d70:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003d72:	6801      	ldr	r1, [r0, #0]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <HAL_UART_MspInit+0x60>)
{
 8003d76:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8003d7a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003d80:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003d84:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d88:	b009      	add	sp, #36	; 0x24
 8003d8a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d90:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d94:	480f      	ldr	r0, [pc, #60]	; (8003dd4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003da0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003da4:	9201      	str	r2, [sp, #4]
 8003da6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003daa:	f042 0202 	orr.w	r2, r2, #2
 8003dae:	64da      	str	r2, [r3, #76]	; 0x4c
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dba:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003dbe:	2418      	movs	r4, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc0:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dc2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc8:	f002 f9f4 	bl	80061b4 <HAL_GPIO_Init>
}
 8003dcc:	b009      	add	sp, #36	; 0x24
 8003dce:	bd30      	pop	{r4, r5, pc}
 8003dd0:	40004400 	.word	0x40004400
 8003dd4:	48000400 	.word	0x48000400

08003dd8 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <FDCAN1_IT0_IRQHandler+0x8>)
 8003dda:	f002 b921 	b.w	8006020 <HAL_FDCAN_IRQHandler>
 8003dde:	bf00      	nop
 8003de0:	20000b50 	.word	0x20000b50

08003de4 <FDCAN1_IT1_IRQHandler>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <FDCAN1_IT1_IRQHandler+0x8>)
 8003de6:	f002 b91b 	b.w	8006020 <HAL_FDCAN_IRQHandler>
 8003dea:	bf00      	nop
 8003dec:	20000b50 	.word	0x20000b50

08003df0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <TIM2_IRQHandler+0x8>)
 8003df2:	f003 bee7 	b.w	8007bc4 <HAL_TIM_IRQHandler>
 8003df6:	bf00      	nop
 8003df8:	20000c24 	.word	0x20000c24

08003dfc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <TIM3_IRQHandler+0x8>)
 8003dfe:	f003 bee1 	b.w	8007bc4 <HAL_TIM_IRQHandler>
 8003e02:	bf00      	nop
 8003e04:	20000a10 	.word	0x20000a10

08003e08 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8003e08:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003e0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e0e:	2240      	movs	r2, #64	; 0x40
 8003e10:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 8003e12:	f7fe fc67 	bl	80026e4 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8003e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8003e1a:	f000 b993 	b.w	8004144 <UI_DACUpdate>
 8003e1e:	bf00      	nop

08003e20 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003e22:	4804      	ldr	r0, [pc, #16]	; (8003e34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003e24:	f06f 0201 	mvn.w	r2, #1
 8003e28:	611a      	str	r2, [r3, #16]
 8003e2a:	f005 bfd7 	b.w	8009ddc <R3_2_TIMx_UP_IRQHandler>
 8003e2e:	bf00      	nop
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	2000034c 	.word	0x2000034c

08003e38 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003e38:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	0611      	lsls	r1, r2, #24
 8003e40:	d40d      	bmi.n	8003e5e <TIM1_BRK_TIM15_IRQHandler+0x26>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	05d2      	lsls	r2, r2, #23
 8003e48:	d505      	bpl.n	8003e56 <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e4e:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8003e50:	4807      	ldr	r0, [pc, #28]	; (8003e70 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003e52:	f006 f80f 	bl	8009e74 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003e5a:	f7fe bc15 	b.w	8002688 <MC_Scheduler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003e5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e62:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003e66:	f006 f825 	bl	8009eb4 <R3_2_BRK_IRQHandler>
 8003e6a:	e7ea      	b.n	8003e42 <TIM1_BRK_TIM15_IRQHandler+0xa>
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	2000034c 	.word	0x2000034c

08003e74 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003e74:	4806      	ldr	r0, [pc, #24]	; (8003e90 <TIM4_IRQHandler+0x1c>)
 8003e76:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	07d1      	lsls	r1, r2, #31
 8003e7c:	d502      	bpl.n	8003e84 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	07d2      	lsls	r2, r2, #31
 8003e82:	d400      	bmi.n	8003e86 <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003e84:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003e86:	f06f 0201 	mvn.w	r2, #1
 8003e8a:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8003e8c:	f004 be86 	b.w	8008b9c <ENC_IRQHandler>
 8003e90:	200000f0 	.word	0x200000f0

08003e94 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003e94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003e96:	4c19      	ldr	r4, [pc, #100]	; (8003efc <USART2_IRQHandler+0x68>)
 8003e98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	0691      	lsls	r1, r2, #26
 8003ea0:	d417      	bmi.n	8003ed2 <USART2_IRQHandler+0x3e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	0612      	lsls	r2, r2, #24
 8003ea6:	d40e      	bmi.n	8003ec6 <USART2_IRQHandler+0x32>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	d400      	bmi.n	8003eb0 <USART2_IRQHandler+0x1c>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003eae:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003eb0:	4812      	ldr	r0, [pc, #72]	; (8003efc <USART2_IRQHandler+0x68>)
 8003eb2:	f006 ff45 	bl	800ad40 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003eb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003eba:	2208      	movs	r2, #8
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8003ec2:	f000 b94f 	b.w	8004164 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler(&pUSART);
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <USART2_IRQHandler+0x68>)
 8003ec8:	f006 fe04 	bl	800aad4 <UFCP_TX_IRQ_Handler>
 8003ecc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ed0:	e7ea      	b.n	8003ea8 <USART2_IRQHandler+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003ed2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	b2c9      	uxtb	r1, r1
 8003ed8:	f006 fed0 	bl	800ac7c <UFCP_RX_IRQ_Handler>
 8003edc:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d007      	beq.n	8003ef2 <USART2_IRQHandler+0x5e>
    if (retVal == 2)
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d002      	beq.n	8003eec <USART2_IRQHandler+0x58>
 8003ee6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003eea:	e7da      	b.n	8003ea2 <USART2_IRQHandler+0xe>
      UI_SerialCommunicationTimeOutStop();
 8003eec:	f000 f93a 	bl	8004164 <UI_SerialCommunicationTimeOutStop>
 8003ef0:	e7f9      	b.n	8003ee6 <USART2_IRQHandler+0x52>
      UI_SerialCommunicationTimeOutStart();
 8003ef2:	f000 f93d 	bl	8004170 <UI_SerialCommunicationTimeOutStart>
 8003ef6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003efa:	e7d2      	b.n	8003ea2 <USART2_IRQHandler+0xe>
 8003efc:	2000053c 	.word	0x2000053c

08003f00 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003f00:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003f02:	f7fe fcdd 	bl	80028c0 <TSK_HardwareFaultTask>
 8003f06:	4c1a      	ldr	r4, [pc, #104]	; (8003f70 <HardFault_Handler+0x70>)
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003f08:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003f0a:	4625      	mov	r5, r4
 8003f0c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	0712      	lsls	r2, r2, #28
 8003f14:	d41d      	bmi.n	8003f52 <HardFault_Handler+0x52>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	0610      	lsls	r0, r2, #24
 8003f1a:	d40f      	bmi.n	8003f3c <HardFault_Handler+0x3c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	0692      	lsls	r2, r2, #26
 8003f20:	d5f6      	bpl.n	8003f10 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003f22:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8003f24:	4628      	mov	r0, r5
 8003f26:	b2c9      	uxtb	r1, r1
 8003f28:	f006 fea8 	bl	800ac7c <UFCP_RX_IRQ_Handler>
 8003f2c:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d01a      	beq.n	8003f68 <HardFault_Handler+0x68>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d1ea      	bne.n	8003f0c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8003f36:	f000 f915 	bl	8004164 <UI_SerialCommunicationTimeOutStop>
 8003f3a:	e7e7      	b.n	8003f0c <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f006 fdc9 	bl	800aad4 <UFCP_TX_IRQ_Handler>
 8003f42:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	0691      	lsls	r1, r2, #26
 8003f4a:	d4ea      	bmi.n	8003f22 <HardFault_Handler+0x22>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	0712      	lsls	r2, r2, #28
 8003f50:	d5e1      	bpl.n	8003f16 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003f52:	4628      	mov	r0, r5
 8003f54:	f006 fef4 	bl	800ad40 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003f58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003f5c:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8003f5e:	f000 f901 	bl	8004164 <UI_SerialCommunicationTimeOutStop>
 8003f62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f66:	e7d6      	b.n	8003f16 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8003f68:	f000 f902 	bl	8004170 <UI_SerialCommunicationTimeOutStart>
 8003f6c:	e7ce      	b.n	8003f0c <HardFault_Handler+0xc>
 8003f6e:	bf00      	nop
 8003f70:	2000053c 	.word	0x2000053c

08003f74 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003f74:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003f76:	4c0a      	ldr	r4, [pc, #40]	; (8003fa0 <SysTick_Handler+0x2c>)
 8003f78:	7823      	ldrb	r3, [r4, #0]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d009      	beq.n	8003f92 <SysTick_Handler+0x1e>
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003f82:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8003f84:	f7fe fc8c 	bl	80028a0 <MC_RunMotorControlTasks>
    TC_IncTick(&pPosCtrlM1);
 8003f88:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <SysTick_Handler+0x30>)

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&pPosCtrlM1);
 8003f8e:	f006 bd9b 	b.w	800aac8 <TC_IncTick>
    HAL_IncTick();
 8003f92:	f000 fd6b 	bl	8004a6c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003f96:	f001 fd39 	bl	8005a0c <HAL_SYSTICK_IRQHandler>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e7f1      	b.n	8003f82 <SysTick_Handler+0xe>
 8003f9e:	bf00      	nop
 8003fa0:	2000067c 	.word	0x2000067c
 8003fa4:	200004cc 	.word	0x200004cc

08003fa8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <EXTI15_10_IRQHandler+0x14>)
 8003faa:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8003fac:	0552      	lsls	r2, r2, #21
 8003fae:	d400      	bmi.n	8003fb2 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8003fb0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb6:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003fb8:	f000 b8e0 	b.w	800417c <UI_HandleStartStopButton_cb>
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <EXTI9_5_IRQHandler>:
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <EXTI9_5_IRQHandler+0x18>)
 8003fc2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles M1 Encoder Index IRQ on PIN PB8.
  */
void EXTI9_5_IRQHandler (void)
{
	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_8))
 8003fc4:	05d2      	lsls	r2, r2, #23
 8003fc6:	d400      	bmi.n	8003fca <EXTI9_5_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_8);
    TC_EncoderReset(&pPosCtrlM1);
  }

}
 8003fc8:	4770      	bx	lr
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fce:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&pPosCtrlM1);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <EXTI9_5_IRQHandler+0x1c>)
 8003fd2:	f006 bd41 	b.w	800aa58 <TC_EncoderReset>
 8003fd6:	bf00      	nop
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	200004cc 	.word	0x200004cc

08003fe0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003fe4:	680b      	ldr	r3, [r1, #0]
{
 8003fe6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe8:	4c0c      	ldr	r4, [pc, #48]	; (800401c <_sbrk+0x3c>)
 8003fea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003fec:	b12b      	cbz	r3, 8003ffa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fee:	4418      	add	r0, r3
 8003ff0:	4290      	cmp	r0, r2
 8003ff2:	d807      	bhi.n	8004004 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003ff4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <_sbrk+0x40>)
 8003ffc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003ffe:	4418      	add	r0, r3
 8004000:	4290      	cmp	r0, r2
 8004002:	d9f7      	bls.n	8003ff4 <_sbrk+0x14>
    errno = ENOMEM;
 8004004:	f006 ff30 	bl	800ae68 <__errno>
 8004008:	230c      	movs	r3, #12
 800400a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd10      	pop	{r4, pc}
 8004014:	20000890 	.word	0x20000890
 8004018:	20008000 	.word	0x20008000
 800401c:	00000400 	.word	0x00000400
 8004020:	20000f20 	.word	0x20000f20

08004024 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 800402a:	4d2d      	ldr	r5, [pc, #180]	; (80040e0 <UI_TaskInit+0xbc>)
{
 800402c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800402e:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8004030:	462c      	mov	r4, r5
{
 8004032:	4682      	mov	sl, r0
 8004034:	460f      	mov	r7, r1
 8004036:	4690      	mov	r8, r2
 8004038:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 800403a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;
 800403c:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80040f8 <UI_TaskInit+0xd4>
 8004040:	4e28      	ldr	r6, [pc, #160]	; (80040e4 <UI_TaskInit+0xc0>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8004042:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80040fc <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8004046:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 800404a:	46f4      	mov	ip, lr
 800404c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004056:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 800405a:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 800405e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8004062:	464b      	mov	r3, r9
 8004064:	4670      	mov	r0, lr
 8004066:	4642      	mov	r2, r8
 8004068:	4639      	mov	r1, r7
 800406a:	f000 f893 	bl	8004194 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800406e:	6830      	ldr	r0, [r6, #0]
 8004070:	f000 fa46 	bl	8004500 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_OBS_EL_ANGLE );
 8004074:	6830      	ldr	r0, [r6, #0]
 8004076:	2231      	movs	r2, #49	; 0x31
 8004078:	2100      	movs	r1, #0
 800407a:	f000 fa49 	bl	8004510 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 800407e:	6830      	ldr	r0, [r6, #0]
 8004080:	2224      	movs	r2, #36	; 0x24
 8004082:	2101      	movs	r1, #1
 8004084:	f000 fa44 	bl	8004510 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 8004088:	46ae      	mov	lr, r5
 800408a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 800408e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8004100 <UI_TaskInit+0xdc>
    pMCP->_Super = UI_Params;
 8004092:	4665      	mov	r5, ip
 8004094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004096:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800409a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 80040a0:	4c11      	ldr	r4, [pc, #68]	; (80040e8 <UI_TaskInit+0xc4>)
    pMCP->_Super = UI_Params;
 80040a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 80040a6:	4658      	mov	r0, fp
    pMCP = &MCP_UI_Params;
 80040a8:	f8c4 c000 	str.w	ip, [r4]
    UFCP_Init( & pUSART );
 80040ac:	f006 fd10 	bl	800aad0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	9905      	ldr	r1, [sp, #20]
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <UI_TaskInit+0xc8>)
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <UI_TaskInit+0xcc>)
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <UI_TaskInit+0xd0>)
 80040c2:	4659      	mov	r1, fp
 80040c4:	f7ff f846 	bl	8003154 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80040ce:	464b      	mov	r3, r9
 80040d0:	4642      	mov	r2, r8
 80040d2:	4639      	mov	r1, r7

}
 80040d4:	b007      	add	sp, #28
 80040d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80040da:	f000 b85b 	b.w	8004194 <UI_Init>
 80040de:	bf00      	nop
 80040e0:	20000464 	.word	0x20000464
 80040e4:	20000898 	.word	0x20000898
 80040e8:	2000089c 	.word	0x2000089c
 80040ec:	0800ad5d 	.word	0x0800ad5d
 80040f0:	0800ab35 	.word	0x0800ab35
 80040f4:	0800ab59 	.word	0x0800ab59
 80040f8:	200000b4 	.word	0x200000b4
 80040fc:	2000053c 	.word	0x2000053c
 8004100:	20000e48 	.word	0x20000e48

08004104 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <UI_Scheduler+0x34>)
 8004106:	8813      	ldrh	r3, [r2, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	b11b      	cbz	r3, 8004114 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 800410c:	8813      	ldrh	r3, [r2, #0]
 800410e:	3b01      	subs	r3, #1
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <UI_Scheduler+0x38>)
 8004116:	8813      	ldrh	r3, [r2, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d903      	bls.n	8004124 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 800411c:	8813      	ldrh	r3, [r2, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004124:	4a06      	ldr	r2, [pc, #24]	; (8004140 <UI_Scheduler+0x3c>)
 8004126:	8813      	ldrh	r3, [r2, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d903      	bls.n	8004134 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 800412c:	8813      	ldrh	r3, [r2, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	8013      	strh	r3, [r2, #0]
  }
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000896 	.word	0x20000896
 800413c:	20000894 	.word	0x20000894
 8004140:	2000067e 	.word	0x2000067e

08004144 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8004144:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8004146:	4c06      	ldr	r4, [pc, #24]	; (8004160 <UI_DACUpdate+0x1c>)
{
 8004148:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	f000 f836 	bl	80041bc <UI_GetSelectedMC>
 8004150:	42a8      	cmp	r0, r5
 8004152:	d000      	beq.n	8004156 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8004154:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8004156:	6820      	ldr	r0, [r4, #0]
}
 8004158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 800415c:	f000 b9d4 	b.w	8004508 <UI_DACExec>
 8004160:	20000898 	.word	0x20000898

08004164 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <UI_SerialCommunicationTimeOutStop+0x8>)
 8004166:	2200      	movs	r2, #0
 8004168:	801a      	strh	r2, [r3, #0]
}
 800416a:	4770      	bx	lr
 800416c:	20000894 	.word	0x20000894

08004170 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004170:	4b01      	ldr	r3, [pc, #4]	; (8004178 <UI_SerialCommunicationTimeOutStart+0x8>)
 8004172:	224f      	movs	r2, #79	; 0x4f
 8004174:	801a      	strh	r2, [r3, #0]
}
 8004176:	4770      	bx	lr
 8004178:	20000894 	.word	0x20000894

0800417c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800417c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 800417e:	f7fd fdf1 	bl	8001d64 <MC_GetSTMStateMotor1>
 8004182:	b118      	cbz	r0, 800418c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8004184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8004188:	f7fd bdda 	b.w	8001d40 <MC_StopMotor1>
}
 800418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8004190:	f7fd bdd0 	b.w	8001d34 <MC_StartMotor1>

08004194 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004194:	b430      	push	{r4, r5}
 8004196:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8004198:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 800419a:	2500      	movs	r5, #0
 800419c:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 80041a0:	7701      	strb	r1, [r0, #28]
  pHandle->pMCT = pMCT;
 80041a2:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 80041a6:	bc30      	pop	{r4, r5}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80041ac:	7f03      	ldrb	r3, [r0, #28]
 80041ae:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80041b0:	bf86      	itte	hi
 80041b2:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 80041b6:	2001      	movhi	r0, #1
    retVal = false;
 80041b8:	2000      	movls	r0, #0
  }
  return retVal;
}
 80041ba:	4770      	bx	lr

080041bc <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80041bc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80041c4:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80041c6:	e9d0 5408 	ldrd	r5, r4, [r0, #32]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041ca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80041ce:	b085      	sub	sp, #20
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041d0:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80041d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 80041d8:	2988      	cmp	r1, #136	; 0x88
 80041da:	f200 80cc 	bhi.w	8004376 <UI_SetReg+0x1b2>
 80041de:	e8df f001 	tbb	[pc, r1]
 80041e2:	ca4d      	.short	0xca4d
 80041e4:	58ca51ca 	.word	0x58ca51ca
 80041e8:	786a645e 	.word	0x786a645e
 80041ec:	988a847e 	.word	0x988a847e
 80041f0:	cacaa49e 	.word	0xcacaa49e
 80041f4:	cacacaca 	.word	0xcacacaca
 80041f8:	cacacaca 	.word	0xcacacaca
 80041fc:	cacacaca 	.word	0xcacacaca
 8004200:	cacacaca 	.word	0xcacacaca
 8004204:	cacacaca 	.word	0xcacacaca
 8004208:	cacacaca 	.word	0xcacacaca
 800420c:	cacacaca 	.word	0xcacacaca
 8004210:	cacacaca 	.word	0xcacacaca
 8004214:	cacacaca 	.word	0xcacacaca
 8004218:	cacacaca 	.word	0xcacacaca
 800421c:	cacacaca 	.word	0xcacacaca
 8004220:	aacacaca 	.word	0xaacacaca
 8004224:	cacacaca 	.word	0xcacacaca
 8004228:	cacacaca 	.word	0xcacacaca
 800422c:	cacacaca 	.word	0xcacacaca
 8004230:	cacacaca 	.word	0xcacacaca
 8004234:	cacacaca 	.word	0xcacacaca
 8004238:	cacacaca 	.word	0xcacacaca
 800423c:	cacab0ca 	.word	0xcacab0ca
 8004240:	cacacaca 	.word	0xcacacaca
 8004244:	cacacaca 	.word	0xcacacaca
 8004248:	cacacaca 	.word	0xcacacaca
 800424c:	cacacaca 	.word	0xcacacaca
 8004250:	cacacaca 	.word	0xcacacaca
 8004254:	cacacaca 	.word	0xcacacaca
 8004258:	cacacaca 	.word	0xcacacaca
 800425c:	cacacaca 	.word	0xcacacaca
 8004260:	cacacaca 	.word	0xcacacaca
 8004264:	cacacaca 	.word	0xcacacaca
 8004268:	c3bc      	.short	0xc3bc
 800426a:	45          	.byte	0x45
 800426b:	00          	.byte	0x00
    }
    break;

  case MC_PROTOCOL_REG_POSITION_KD:
    {
      PID_SetKD(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	b211      	sxth	r1, r2
 8004270:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004272:	f004 fd69 	bl	8008d48 <PID_SetKD>
  bool retVal = true;
 8004276:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 8004278:	b005      	add	sp, #20
 800427a:	bd30      	pop	{r4, r5, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800427c:	b2d1      	uxtb	r1, r2
 800427e:	f7ff ff95 	bl	80041ac <UI_SelectMC>
    break;
 8004282:	e7f9      	b.n	8004278 <UI_SetReg+0xb4>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8004284:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 8004288:	d077      	beq.n	800437a <UI_SetReg+0x1b6>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800428a:	2c01      	cmp	r4, #1
 800428c:	d07f      	beq.n	800438e <UI_SetReg+0x1ca>
  bool retVal = true;
 800428e:	2001      	movs	r0, #1
 8004290:	e7f2      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	b211      	sxth	r1, r2
 8004296:	f004 fd45 	bl	8008d24 <PID_SetKP>
  bool retVal = true;
 800429a:	2001      	movs	r0, #1
    break;
 800429c:	e7ec      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	b211      	sxth	r1, r2
 80042a2:	f004 fd41 	bl	8008d28 <PID_SetKI>
  bool retVal = true;
 80042a6:	2001      	movs	r0, #1
    break;
 80042a8:	e7e6      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	b211      	sxth	r1, r2
 80042ae:	f004 fd4b 	bl	8008d48 <PID_SetKD>
  bool retVal = true;
 80042b2:	2001      	movs	r0, #1
    break;
 80042b4:	e7e0      	b.n	8004278 <UI_SetReg+0xb4>
      currComp = MCI_GetIqdref(pMCI);
 80042b6:	4628      	mov	r0, r5
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	f7fd fe4b 	bl	8001f54 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 80042be:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 80042c0:	9003      	str	r0, [sp, #12]
      currComp.q = (int16_t)wValue;
 80042c2:	f8ad 200c 	strh.w	r2, [sp, #12]
      MCI_SetCurrentReferences(pMCI,currComp);
 80042c6:	4628      	mov	r0, r5
 80042c8:	9903      	ldr	r1, [sp, #12]
 80042ca:	f7fd fd75 	bl	8001db8 <MCI_SetCurrentReferences>
  bool retVal = true;
 80042ce:	2001      	movs	r0, #1
    break;
 80042d0:	e7d2      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80042d2:	6858      	ldr	r0, [r3, #4]
 80042d4:	b211      	sxth	r1, r2
 80042d6:	f004 fd25 	bl	8008d24 <PID_SetKP>
  bool retVal = true;
 80042da:	2001      	movs	r0, #1
    break;
 80042dc:	e7cc      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80042de:	6858      	ldr	r0, [r3, #4]
 80042e0:	b211      	sxth	r1, r2
 80042e2:	f004 fd21 	bl	8008d28 <PID_SetKI>
  bool retVal = true;
 80042e6:	2001      	movs	r0, #1
    break;
 80042e8:	e7c6      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80042ea:	6858      	ldr	r0, [r3, #4]
 80042ec:	b211      	sxth	r1, r2
 80042ee:	f004 fd2b 	bl	8008d48 <PID_SetKD>
  bool retVal = true;
 80042f2:	2001      	movs	r0, #1
    break;
 80042f4:	e7c0      	b.n	8004278 <UI_SetReg+0xb4>
      currComp = MCI_GetIqdref(pMCI);
 80042f6:	4628      	mov	r0, r5
 80042f8:	9201      	str	r2, [sp, #4]
 80042fa:	f7fd fe2b 	bl	8001f54 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 80042fe:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 8004300:	9003      	str	r0, [sp, #12]
      currComp.d = (int16_t)wValue;
 8004302:	f8ad 200e 	strh.w	r2, [sp, #14]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004306:	4628      	mov	r0, r5
 8004308:	9903      	ldr	r1, [sp, #12]
 800430a:	f7fd fd55 	bl	8001db8 <MCI_SetCurrentReferences>
  bool retVal = true;
 800430e:	2001      	movs	r0, #1
    break;
 8004310:	e7b2      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004312:	6898      	ldr	r0, [r3, #8]
 8004314:	b211      	sxth	r1, r2
 8004316:	f004 fd05 	bl	8008d24 <PID_SetKP>
  bool retVal = true;
 800431a:	2001      	movs	r0, #1
    break;
 800431c:	e7ac      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800431e:	6898      	ldr	r0, [r3, #8]
 8004320:	b211      	sxth	r1, r2
 8004322:	f004 fd01 	bl	8008d28 <PID_SetKI>
  bool retVal = true;
 8004326:	2001      	movs	r0, #1
    break;
 8004328:	e7a6      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800432a:	6898      	ldr	r0, [r3, #8]
 800432c:	b211      	sxth	r1, r2
 800432e:	f004 fd0b 	bl	8008d48 <PID_SetKD>
  bool retVal = true;
 8004332:	2001      	movs	r0, #1
    break;
 8004334:	e7a0      	b.n	8004278 <UI_SetReg+0xb4>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004336:	4628      	mov	r0, r5
 8004338:	b211      	sxth	r1, r2
 800433a:	f7fd fe2b 	bl	8001f94 <MCI_SetIdref>
  bool retVal = true;
 800433e:	2001      	movs	r0, #1
    break;
 8004340:	e79a      	b.n	8004278 <UI_SetReg+0xb4>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004342:	4918      	ldr	r1, [pc, #96]	; (80043a4 <UI_SetReg+0x1e0>)
 8004344:	fb81 3102 	smull	r3, r1, r1, r2
 8004348:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800434c:	4628      	mov	r0, r5
 800434e:	b209      	sxth	r1, r1
 8004350:	2200      	movs	r2, #0
 8004352:	f7fd fd1d 	bl	8001d90 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8004356:	2001      	movs	r0, #1
    break;
 8004358:	e78e      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKP(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	b211      	sxth	r1, r2
 800435e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004360:	f004 fce0 	bl	8008d24 <PID_SetKP>
  bool retVal = true;
 8004364:	2001      	movs	r0, #1
    break;
 8004366:	e787      	b.n	8004278 <UI_SetReg+0xb4>
      PID_SetKI(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	b211      	sxth	r1, r2
 800436c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800436e:	f004 fcdb 	bl	8008d28 <PID_SetKI>
  bool retVal = true;
 8004372:	2001      	movs	r0, #1
    break;
 8004374:	e780      	b.n	8004278 <UI_SetReg+0xb4>
    retVal = false;
 8004376:	2000      	movs	r0, #0
 8004378:	e77e      	b.n	8004278 <UI_SetReg+0xb4>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800437a:	4628      	mov	r0, r5
 800437c:	f7fd fe06 	bl	8001f8c <MCI_GetTeref>
 8004380:	4622      	mov	r2, r4
 8004382:	4601      	mov	r1, r0
 8004384:	4628      	mov	r0, r5
 8004386:	f7fd fd0b 	bl	8001da0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800438a:	2001      	movs	r0, #1
 800438c:	e774      	b.n	8004278 <UI_SetReg+0xb4>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800438e:	4628      	mov	r0, r5
 8004390:	f7fd fdc4 	bl	8001f1c <MCI_GetMecSpeedRefUnit>
 8004394:	2200      	movs	r2, #0
 8004396:	4601      	mov	r1, r0
 8004398:	4628      	mov	r0, r5
 800439a:	f7fd fcf9 	bl	8001d90 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800439e:	4620      	mov	r0, r4
 80043a0:	e76a      	b.n	8004278 <UI_SetReg+0xb4>
 80043a2:	bf00      	nop
 80043a4:	2aaaaaab 	.word	0x2aaaaaab

080043a8 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80043a8:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80043aa:	6a03      	ldr	r3, [r0, #32]
 80043ac:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 80043b0:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80043b2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 80043b6:	290d      	cmp	r1, #13
 80043b8:	d82c      	bhi.n	8004414 <UI_ExecCmd+0x6c>
 80043ba:	e8df f001 	tbb	[pc, r1]
 80043be:	1217      	.short	0x1217
 80043c0:	0e0c0c07 	.word	0x0e0c0c07
 80043c4:	2b21261c 	.word	0x2b21261c
 80043c8:	122b2b2b 	.word	0x122b2b2b
    }
    break;

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7fd fd8b 	bl	8001ee8 <MCI_GetSTMState>
 80043d2:	2806      	cmp	r0, #6
 80043d4:	d020      	beq.n	8004418 <UI_ExecCmd+0x70>
  bool retVal = true;
 80043d6:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80043d8:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80043da:	4620      	mov	r0, r4
 80043dc:	f7fd fd84 	bl	8001ee8 <MCI_GetSTMState>
 80043e0:	b120      	cbz	r0, 80043ec <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7fd fd3a 	bl	8001e5c <MCI_StopMotor>
  bool retVal = true;
 80043e8:	2001      	movs	r0, #1
}
 80043ea:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7fd fd2b 	bl	8001e48 <MCI_StartMotor>
  bool retVal = true;
 80043f2:	2001      	movs	r0, #1
}
 80043f4:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fd fd34 	bl	8001e64 <MCI_FaultAcknowledged>
  bool retVal = true;
 80043fc:	2001      	movs	r0, #1
}
 80043fe:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8004400:	4620      	mov	r0, r4
 8004402:	f7fd fdcb 	bl	8001f9c <MCI_Clear_Iqdref>
  bool retVal = true;
 8004406:	2001      	movs	r0, #1
}
 8004408:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800440a:	4620      	mov	r0, r4
 800440c:	f7fd fd2e 	bl	8001e6c <MCI_EncoderAlign>
  bool retVal = true;
 8004410:	2001      	movs	r0, #1
}
 8004412:	bd10      	pop	{r4, pc}
    retVal = false;
 8004414:	2000      	movs	r0, #0
}
 8004416:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8004418:	4620      	mov	r0, r4
 800441a:	f7fd fd73 	bl	8001f04 <MCI_StopRamp>
  bool retVal = true;
 800441e:	2001      	movs	r0, #1
}
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop

08004424 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004424:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004428:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800442c:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800442e:	fb83 c301 	smull	ip, r3, r3, r1
 8004432:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8004436:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800443a:	b209      	sxth	r1, r1
 800443c:	f7fd fca8 	bl	8001d90 <MCI_ExecSpeedRamp>
  return true;
}
 8004440:	2001      	movs	r0, #1
 8004442:	bd10      	pop	{r4, pc}
 8004444:	2aaaaaab 	.word	0x2aaaaaab

08004448 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8004448:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800444a:	6a03      	ldr	r3, [r0, #32]
 800444c:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004450:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004454:	f7fd fca4 	bl	8001da0 <MCI_ExecTorqueRamp>
  return true;
}
 8004458:	2001      	movs	r0, #1
 800445a:	bd10      	pop	{r4, pc}

0800445c <UI_ExecPositionCmd>:
  * @param  fTargetPosition: final position value.
  * @param  fDuration: duration alllowed to complete the positioning (expressed in seconds).
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_ExecPositionCmd(UI_Handle_t *pHandle, float fTargetPosition, float fDuration)
{
 800445c:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800445e:	6a03      	ldr	r3, [r0, #32]
 8004460:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  /* Call MCI Position Command */
  MCI_ExecPositionCommand(pMCI,fTargetPosition,fDuration);
 8004464:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004468:	f7fd fcb4 	bl	8001dd4 <MCI_ExecPositionCommand>
  return true;
}
 800446c:	2001      	movs	r0, #1
 800446e:	bd08      	pop	{r3, pc}

08004470 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004472:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8004476:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004478:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800447c:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 800447e:	b194      	cbz	r4, 80044a6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004480:	4620      	mov	r0, r4
 8004482:	461e      	mov	r6, r3
 8004484:	4617      	mov	r7, r2
 8004486:	460d      	mov	r5, r1
 8004488:	f006 fcd4 	bl	800ae34 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800448c:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800448e:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004490:	4620      	mov	r0, r4
 8004492:	f006 fcd5 	bl	800ae40 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004496:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004498:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800449a:	4620      	mov	r0, r4
 800449c:	f006 fcd8 	bl	800ae50 <RUC_GetPhaseFinalTorque>
 80044a0:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 80044a2:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80044a4:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80044a6:	4620      	mov	r0, r4
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044aa:	bf00      	nop

080044ac <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80044b0:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80044b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80044b6:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80044ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80044be:	695c      	ldr	r4, [r3, #20]
{
 80044c0:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80044c2:	4620      	mov	r0, r4
 80044c4:	f006 fca4 	bl	800ae10 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80044c8:	463a      	mov	r2, r7
 80044ca:	4629      	mov	r1, r5
 80044cc:	4620      	mov	r0, r4
 80044ce:	f006 fca5 	bl	800ae1c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80044d2:	4620      	mov	r0, r4
 80044d4:	4632      	mov	r2, r6
 80044d6:	4629      	mov	r1, r5
 80044d8:	f006 fca6 	bl	800ae28 <RUC_SetPhaseFinalTorque>
  return true;
}
 80044dc:	2001      	movs	r0, #1
 80044de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044e0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80044e0:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80044e2:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 80044e4:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80044e8:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.d = hIdRef;
 80044ec:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80044f0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 80044f4:	9901      	ldr	r1, [sp, #4]
}
 80044f6:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80044f8:	f7fd bc5e 	b.w	8001db8 <MCI_SetCurrentReferences>

080044fc <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80044fc:	2000      	movs	r0, #0
 80044fe:	4770      	bx	lr

08004500 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8004500:	6943      	ldr	r3, [r0, #20]
 8004502:	b103      	cbz	r3, 8004506 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8004504:	4718      	bx	r3
  }
}
 8004506:	4770      	bx	lr

08004508 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8004508:	6983      	ldr	r3, [r0, #24]
 800450a:	b103      	cbz	r3, 800450e <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 800450c:	4718      	bx	r3
  }
}
 800450e:	4770      	bx	lr

08004510 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8004510:	6843      	ldr	r3, [r0, #4]
 8004512:	b103      	cbz	r3, 8004516 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8004514:	4718      	bx	r3
  }
}
 8004516:	4770      	bx	lr

08004518 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8004518:	6883      	ldr	r3, [r0, #8]
 800451a:	b103      	cbz	r3, 800451e <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 800451c:	4718      	bx	r3
  }
  return retVal;
}
 800451e:	2089      	movs	r0, #137	; 0x89
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <UI_GetReg>:
{
 8004524:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004526:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800452a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800452e:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004530:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004534:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 )
 8004538:	2a00      	cmp	r2, #0
 800453a:	f000 8090 	beq.w	800465e <UI_GetReg+0x13a>
    *success = true;
 800453e:	2401      	movs	r4, #1
 8004540:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8004542:	2988      	cmp	r1, #136	; 0x88
 8004544:	f200 8235 	bhi.w	80049b2 <UI_GetReg+0x48e>
 8004548:	e8df f011 	tbh	[pc, r1, lsl #1]
 800454c:	014e0154 	.word	0x014e0154
 8004550:	022f01bb 	.word	0x022f01bb
 8004554:	0168016c 	.word	0x0168016c
 8004558:	01600164 	.word	0x01600164
 800455c:	01570122 	.word	0x01570122
 8004560:	01300134 	.word	0x01300134
 8004564:	01270117 	.word	0x01270117
 8004568:	02020206 	.word	0x02020206
 800456c:	02330233 	.word	0x02330233
 8004570:	02330233 	.word	0x02330233
 8004574:	02330233 	.word	0x02330233
 8004578:	02330233 	.word	0x02330233
 800457c:	01fe0233 	.word	0x01fe0233
 8004580:	01f601fa 	.word	0x01f601fa
 8004584:	01ee01f2 	.word	0x01ee01f2
 8004588:	021b01e7 	.word	0x021b01e7
 800458c:	02330216 	.word	0x02330216
 8004590:	020a020f 	.word	0x020a020f
 8004594:	0138013d 	.word	0x0138013d
 8004598:	021b01bf 	.word	0x021b01bf
 800459c:	01220216 	.word	0x01220216
 80045a0:	02250117 	.word	0x02250117
 80045a4:	01730220 	.word	0x01730220
 80045a8:	0178018c 	.word	0x0178018c
 80045ac:	023301a5 	.word	0x023301a5
 80045b0:	02330233 	.word	0x02330233
 80045b4:	02330233 	.word	0x02330233
 80045b8:	02330233 	.word	0x02330233
 80045bc:	02330233 	.word	0x02330233
 80045c0:	02330233 	.word	0x02330233
 80045c4:	019e0233 	.word	0x019e0233
 80045c8:	01910198 	.word	0x01910198
 80045cc:	011701e0 	.word	0x011701e0
 80045d0:	02330233 	.word	0x02330233
 80045d4:	02330233 	.word	0x02330233
 80045d8:	02330233 	.word	0x02330233
 80045dc:	02330233 	.word	0x02330233
 80045e0:	02330233 	.word	0x02330233
 80045e4:	02330233 	.word	0x02330233
 80045e8:	02330233 	.word	0x02330233
 80045ec:	02330233 	.word	0x02330233
 80045f0:	02330233 	.word	0x02330233
 80045f4:	02330233 	.word	0x02330233
 80045f8:	02330233 	.word	0x02330233
 80045fc:	02330233 	.word	0x02330233
 8004600:	01c80233 	.word	0x01c80233
 8004604:	02330233 	.word	0x02330233
 8004608:	02330233 	.word	0x02330233
 800460c:	02330233 	.word	0x02330233
 8004610:	02330233 	.word	0x02330233
 8004614:	02330233 	.word	0x02330233
 8004618:	02330233 	.word	0x02330233
 800461c:	02330233 	.word	0x02330233
 8004620:	02330233 	.word	0x02330233
 8004624:	02330233 	.word	0x02330233
 8004628:	01dc01c4 	.word	0x01dc01c4
 800462c:	023301da 	.word	0x023301da
 8004630:	011f011f 	.word	0x011f011f
 8004634:	02330233 	.word	0x02330233
 8004638:	02330233 	.word	0x02330233
 800463c:	02330233 	.word	0x02330233
 8004640:	02330233 	.word	0x02330233
 8004644:	02330233 	.word	0x02330233
 8004648:	02330233 	.word	0x02330233
 800464c:	011d0233 	.word	0x011d0233
 8004650:	01480233 	.word	0x01480233
 8004654:	01d40142 	.word	0x01d40142
 8004658:	015b012b 	.word	0x015b012b
 800465c:	022a      	.short	0x022a
 800465e:	2988      	cmp	r1, #136	; 0x88
 8004660:	f200 8091 	bhi.w	8004786 <UI_GetReg+0x262>
 8004664:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004668:	00c000c6 	.word	0x00c000c6
 800466c:	01a1012d 	.word	0x01a1012d
 8004670:	00da00de 	.word	0x00da00de
 8004674:	00d200d6 	.word	0x00d200d6
 8004678:	00c90094 	.word	0x00c90094
 800467c:	00a200a6 	.word	0x00a200a6
 8004680:	00990089 	.word	0x00990089
 8004684:	01740178 	.word	0x01740178
 8004688:	008f008f 	.word	0x008f008f
 800468c:	008f008f 	.word	0x008f008f
 8004690:	008f008f 	.word	0x008f008f
 8004694:	008f008f 	.word	0x008f008f
 8004698:	0170008f 	.word	0x0170008f
 800469c:	0168016c 	.word	0x0168016c
 80046a0:	01600164 	.word	0x01600164
 80046a4:	018d0159 	.word	0x018d0159
 80046a8:	008f0188 	.word	0x008f0188
 80046ac:	017c0181 	.word	0x017c0181
 80046b0:	00aa00af 	.word	0x00aa00af
 80046b4:	018d0131 	.word	0x018d0131
 80046b8:	00940188 	.word	0x00940188
 80046bc:	01970089 	.word	0x01970089
 80046c0:	00e50192 	.word	0x00e50192
 80046c4:	00ea00fe 	.word	0x00ea00fe
 80046c8:	008f0117 	.word	0x008f0117
 80046cc:	008f008f 	.word	0x008f008f
 80046d0:	008f008f 	.word	0x008f008f
 80046d4:	008f008f 	.word	0x008f008f
 80046d8:	008f008f 	.word	0x008f008f
 80046dc:	008f008f 	.word	0x008f008f
 80046e0:	0110008f 	.word	0x0110008f
 80046e4:	0103010a 	.word	0x0103010a
 80046e8:	00890152 	.word	0x00890152
 80046ec:	008f008f 	.word	0x008f008f
 80046f0:	008f008f 	.word	0x008f008f
 80046f4:	008f008f 	.word	0x008f008f
 80046f8:	008f008f 	.word	0x008f008f
 80046fc:	008f008f 	.word	0x008f008f
 8004700:	008f008f 	.word	0x008f008f
 8004704:	008f008f 	.word	0x008f008f
 8004708:	008f008f 	.word	0x008f008f
 800470c:	008f008f 	.word	0x008f008f
 8004710:	008f008f 	.word	0x008f008f
 8004714:	008f008f 	.word	0x008f008f
 8004718:	008f008f 	.word	0x008f008f
 800471c:	013a008f 	.word	0x013a008f
 8004720:	008f008f 	.word	0x008f008f
 8004724:	008f008f 	.word	0x008f008f
 8004728:	008f008f 	.word	0x008f008f
 800472c:	008f008f 	.word	0x008f008f
 8004730:	008f008f 	.word	0x008f008f
 8004734:	008f008f 	.word	0x008f008f
 8004738:	008f008f 	.word	0x008f008f
 800473c:	008f008f 	.word	0x008f008f
 8004740:	008f008f 	.word	0x008f008f
 8004744:	014e0136 	.word	0x014e0136
 8004748:	008f014c 	.word	0x008f014c
 800474c:	00910091 	.word	0x00910091
 8004750:	008f008f 	.word	0x008f008f
 8004754:	008f008f 	.word	0x008f008f
 8004758:	008f008f 	.word	0x008f008f
 800475c:	008f008f 	.word	0x008f008f
 8004760:	008f008f 	.word	0x008f008f
 8004764:	008f008f 	.word	0x008f008f
 8004768:	008f008f 	.word	0x008f008f
 800476c:	00ba008f 	.word	0x00ba008f
 8004770:	014600b4 	.word	0x014600b4
 8004774:	00cd009d 	.word	0x00cd009d
 8004778:	019c      	.short	0x019c
      bRetVal = MCI_GetIqdref(pMCI).d;
 800477a:	4630      	mov	r0, r6
 800477c:	f7fd fbea 	bl	8001f54 <MCI_GetIqdref>
 8004780:	1400      	asrs	r0, r0, #16
}
 8004782:	b00c      	add	sp, #48	; 0x30
 8004784:	bd70      	pop	{r4, r5, r6, pc}
        bRetVal = (uint32_t) 0;
 8004786:	2000      	movs	r0, #0
 8004788:	e7fb      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = CTRBDID;
 800478a:	f242 701f 	movw	r0, #10015	; 0x271f
 800478e:	e7f8      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8004790:	4630      	mov	r0, r6
 8004792:	f7fd fbdf 	bl	8001f54 <MCI_GetIqdref>
 8004796:	b200      	sxth	r0, r0
    break;
 8004798:	e7f3      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800479a:	68a8      	ldr	r0, [r5, #8]
 800479c:	f004 fac6 	bl	8008d2c <PID_GetKP>
    break;
 80047a0:	e7ef      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t) PID_GetKP( pMCT->pPosCtrl->PIDPosRegulator );
 80047a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80047a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80047a6:	f004 fac1 	bl	8008d2c <PID_GetKP>
      break;
 80047aa:	e7ea      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80047ac:	6868      	ldr	r0, [r5, #4]
 80047ae:	f004 facd 	bl	8008d4c <PID_GetKD>
    break;
 80047b2:	e7e6      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80047b4:	6868      	ldr	r0, [r5, #4]
 80047b6:	f004 fabd 	bl	8008d34 <PID_GetKI>
    break;
 80047ba:	e7e2      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80047bc:	4630      	mov	r0, r6
 80047be:	f7fd fbb9 	bl	8001f34 <MCI_GetIalphabeta>
 80047c2:	b200      	sxth	r0, r0
    break;
 80047c4:	e7dd      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIab(pMCI).b;
 80047c6:	4630      	mov	r0, r6
 80047c8:	f7fd fbac 	bl	8001f24 <MCI_GetIab>
 80047cc:	1400      	asrs	r0, r0, #16
    break;
 80047ce:	e7d8      	b.n	8004782 <UI_GetReg+0x25e>
        ReadVal.Float_Val = TC_GetTargetPosition(pMCT->pPosCtrl);
 80047d0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80047d2:	f006 f971 	bl	800aab8 <TC_GetTargetPosition>
        bRetVal = ReadVal.U32_Val;
 80047d6:	ee10 0a10 	vmov	r0, s0
      break;
 80047da:	e7d2      	b.n	8004782 <UI_GetReg+0x25e>
        ReadVal.Float_Val = TC_GetCurrentPosition(pMCT->pPosCtrl);
 80047dc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80047de:	f006 f959 	bl	800aa94 <TC_GetCurrentPosition>
        bRetVal = ReadVal.U32_Val;
 80047e2:	ee10 0a10 	vmov	r0, s0
      break;
 80047e6:	e7cc      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80047e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 80047ea:	b00c      	add	sp, #48	; 0x30
 80047ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80047f0:	f005 bee8 	b.w	800a5c4 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80047f4:	f7ff fce2 	bl	80041bc <UI_GetSelectedMC>
    break;
 80047f8:	e7c3      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80047fa:	6868      	ldr	r0, [r5, #4]
 80047fc:	f004 fa96 	bl	8008d2c <PID_GetKP>
    break;
 8004800:	e7bf      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t) PID_GetKI( pMCT->pPosCtrl->PIDPosRegulator );
 8004802:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004804:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004806:	f004 fa95 	bl	8008d34 <PID_GetKI>
      break;
 800480a:	e7ba      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800480c:	6828      	ldr	r0, [r5, #0]
 800480e:	f004 fa9d 	bl	8008d4c <PID_GetKD>
    break;
 8004812:	e7b6      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8004814:	6828      	ldr	r0, [r5, #0]
 8004816:	f004 fa8d 	bl	8008d34 <PID_GetKI>
    break;
 800481a:	e7b2      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800481c:	6828      	ldr	r0, [r5, #0]
 800481e:	f004 fa85 	bl	8008d2c <PID_GetKP>
    break;
 8004822:	e7ae      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004824:	4630      	mov	r0, r6
 8004826:	f7fd fb79 	bl	8001f1c <MCI_GetMecSpeedRefUnit>
 800482a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800482e:	0040      	lsls	r0, r0, #1
    break;
 8004830:	e7a7      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004832:	4630      	mov	r0, r6
 8004834:	f7fd fba0 	bl	8001f78 <MCI_GetValphabeta>
 8004838:	b200      	sxth	r0, r0
    break;
 800483a:	e7a2      	b.n	8004782 <UI_GetReg+0x25e>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800483c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004842:	0f1a      	lsrs	r2, r3, #28
 8004844:	3a01      	subs	r2, #1
 8004846:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800484a:	2a01      	cmp	r2, #1
 800484c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004850:	f240 80b7 	bls.w	80049c2 <UI_GetReg+0x49e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004854:	2b01      	cmp	r3, #1
 8004856:	d896      	bhi.n	8004786 <UI_GetReg+0x262>
        pSPD = pMCT->pSpeedSensorAux;
 8004858:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800485a:	2800      	cmp	r0, #0
 800485c:	d093      	beq.n	8004786 <UI_GetReg+0x262>
        bRetVal = SPD_GetElAngle(pSPD);
 800485e:	f005 fcf7 	bl	800a250 <SPD_GetElAngle>
 8004862:	e78e      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004864:	4630      	mov	r0, r6
 8004866:	f7fd fb87 	bl	8001f78 <MCI_GetValphabeta>
 800486a:	1400      	asrs	r0, r0, #16
    break;
 800486c:	e789      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800486e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004870:	f005 fdec 	bl	800a44c <STC_GetMaxAppPositiveMecSpeedUnit>
 8004874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004878:	0040      	lsls	r0, r0, #1
    break;
 800487a:	e782      	b.n	8004782 <UI_GetReg+0x25e>
      if (pHandle->pFctDACGetUserChannelValue)
 800487c:	6903      	ldr	r3, [r0, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d081      	beq.n	8004786 <UI_GetReg+0x262>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8004882:	2101      	movs	r1, #1
 8004884:	4798      	blx	r3
 8004886:	e77c      	b.n	8004782 <UI_GetReg+0x25e>
      if (pHandle->pFctDACGetUserChannelValue)
 8004888:	6903      	ldr	r3, [r0, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f43f af7b 	beq.w	8004786 <UI_GetReg+0x262>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8004890:	2100      	movs	r1, #0
 8004892:	4798      	blx	r3
 8004894:	e775      	b.n	8004782 <UI_GetReg+0x25e>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004896:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800489c:	0f1a      	lsrs	r2, r3, #28
 800489e:	3a01      	subs	r2, #1
 80048a0:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80048aa:	f240 8085 	bls.w	80049b8 <UI_GetReg+0x494>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	f63f af69 	bhi.w	8004786 <UI_GetReg+0x262>
        pSPD = pMCT->pSpeedSensorAux;
 80048b4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f43f af65 	beq.w	8004786 <UI_GetReg+0x262>
        bRetVal = SPD_GetS16Speed(pSPD);
 80048bc:	f005 fd06 	bl	800a2cc <SPD_GetS16Speed>
 80048c0:	e75f      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80048c2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80048c4:	f005 fe70 	bl	800a5a8 <STM_GetState>
	break;
 80048c8:	e75b      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7fd fb32 	bl	8001f34 <MCI_GetIalphabeta>
 80048d0:	1400      	asrs	r0, r0, #16
    break;
 80048d2:	e756      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80048d4:	6828      	ldr	r0, [r5, #0]
 80048d6:	f004 fa33 	bl	8008d40 <PID_GetKPDivisor>
    break;
 80048da:	e752      	b.n	8004782 <UI_GetReg+0x25e>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80048dc:	4630      	mov	r0, r6
 80048de:	f7fd fb07 	bl	8001ef0 <MCI_GetControlMode>
 80048e2:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80048e4:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80048e6:	d071      	beq.n	80049cc <UI_GetReg+0x4a8>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80048e8:	f7fd fb18 	bl	8001f1c <MCI_GetMecSpeedRefUnit>
 80048ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80048f0:	0040      	lsls	r0, r0, #1
 80048f2:	e746      	b.n	8004782 <UI_GetReg+0x25e>
        ReadVal.Float_Val = TC_GetMoveDuration(pMCT->pPosCtrl);
 80048f4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80048f6:	f006 f8e3 	bl	800aac0 <TC_GetMoveDuration>
        bRetVal = ReadVal.U32_Val;
 80048fa:	ee10 0a10 	vmov	r0, s0
      break;
 80048fe:	e740      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)(MC_UID);
 8004900:	4835      	ldr	r0, [pc, #212]	; (80049d8 <UI_GetReg+0x4b4>)
 8004902:	e73e      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004904:	6828      	ldr	r0, [r5, #0]
 8004906:	f004 fa1d 	bl	8008d44 <PID_GetKIDivisor>
    break;
 800490a:	e73a      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800490c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800490e:	f005 fd9f 	bl	800a450 <STC_GetMinAppNegativeMecSpeedUnit>
 8004912:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004916:	0040      	lsls	r0, r0, #1
    break;
 8004918:	e733      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800491a:	4630      	mov	r0, r6
 800491c:	f7fd faf6 	bl	8001f0c <MCI_GetAvrgMecSpeedUnit>
 8004920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004924:	0040      	lsls	r0, r0, #1
    break;
 8004926:	e72c      	b.n	8004782 <UI_GetReg+0x25e>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8004928:	2101      	movs	r1, #1
 800492a:	f7ff fdf5 	bl	8004518 <UI_GetDAC>
    break;
 800492e:	e728      	b.n	8004782 <UI_GetReg+0x25e>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8004930:	2100      	movs	r1, #0
 8004932:	f7ff fdf1 	bl	8004518 <UI_GetDAC>
    break;
 8004936:	e724      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8004938:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800493a:	f004 f98f 	bl	8008c5c <MPM_GetAvrgElMotorPowerW>
    break;
 800493e:	e720      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8004940:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004942:	f004 f9d1 	bl	8008ce8 <NTC_GetAvTemp_C>
    break;
 8004946:	e71c      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004948:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800494a:	f003 ff39 	bl	80087c0 <VBS_GetAvBusVoltage_V>
    break;
 800494e:	e718      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8004950:	68a8      	ldr	r0, [r5, #8]
 8004952:	f004 f9fb 	bl	8008d4c <PID_GetKD>
    break;
 8004956:	e714      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8004958:	68a8      	ldr	r0, [r5, #8]
 800495a:	f004 f9eb 	bl	8008d34 <PID_GetKI>
    break;
 800495e:	e710      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIab(pMCI).a;
 8004960:	4630      	mov	r0, r6
 8004962:	f7fd fadf 	bl	8001f24 <MCI_GetIab>
 8004966:	b200      	sxth	r0, r0
    break;
 8004968:	e70b      	b.n	8004782 <UI_GetReg+0x25e>
      if (pMCT->pRevupCtrl)
 800496a:	6968      	ldr	r0, [r5, #20]
 800496c:	2800      	cmp	r0, #0
 800496e:	f43f af0a 	beq.w	8004786 <UI_GetReg+0x262>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004972:	f006 fa75 	bl	800ae60 <RUC_GetNumberOfPhases>
 8004976:	e704      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIqd(pMCI).d;
 8004978:	4630      	mov	r0, r6
 800497a:	f7fd fae3 	bl	8001f44 <MCI_GetIqd>
 800497e:	1400      	asrs	r0, r0, #16
    break;
 8004980:	e6ff      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetIqd(pMCI).q;
 8004982:	4630      	mov	r0, r6
 8004984:	f7fd fade 	bl	8001f44 <MCI_GetIqd>
 8004988:	b200      	sxth	r0, r0
    break;
 800498a:	e6fa      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetVqd(pMCI).d;
 800498c:	4630      	mov	r0, r6
 800498e:	f7fd fae9 	bl	8001f64 <MCI_GetVqd>
 8004992:	1400      	asrs	r0, r0, #16
    break;
 8004994:	e6f5      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = MCI_GetVqd(pMCI).q;
 8004996:	4630      	mov	r0, r6
 8004998:	f7fd fae4 	bl	8001f64 <MCI_GetVqd>
 800499c:	b200      	sxth	r0, r0
    break;
 800499e:	e6f0      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t) PID_GetKD( pMCT->pPosCtrl->PIDPosRegulator );
 80049a0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80049a2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80049a4:	f004 f9d2 	bl	8008d4c <PID_GetKD>
      break;
 80049a8:	e6eb      	b.n	8004782 <UI_GetReg+0x25e>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7fd faa0 	bl	8001ef0 <MCI_GetControlMode>
    break;
 80049b0:	e6e7      	b.n	8004782 <UI_GetReg+0x25e>
        *success = false;
 80049b2:	2000      	movs	r0, #0
 80049b4:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80049b6:	e6e4      	b.n	8004782 <UI_GetReg+0x25e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049b8:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80049ba:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049bc:	f63f af7b 	bhi.w	80048b6 <UI_GetReg+0x392>
 80049c0:	e778      	b.n	80048b4 <UI_GetReg+0x390>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049c2:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80049c4:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80049c6:	f63f af48 	bhi.w	800485a <UI_GetReg+0x336>
 80049ca:	e745      	b.n	8004858 <UI_GetReg+0x334>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80049cc:	f7fd fa92 	bl	8001ef4 <MCI_GetLastRampFinalSpeed>
 80049d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80049d4:	0040      	lsls	r0, r0, #1
 80049d6:	e6d4      	b.n	8004782 <UI_GetReg+0x25e>
 80049d8:	34a6847a 	.word	0x34a6847a

080049dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <SystemInit+0x18>)
 80049de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80049ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049ee:	6099      	str	r1, [r3, #8]
#endif
}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_InitTick+0x40>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b90b      	cbnz	r3, 8004a04 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a00:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a04:	490d      	ldr	r1, [pc, #52]	; (8004a3c <HAL_InitTick+0x44>)
 8004a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	6808      	ldr	r0, [r1, #0]
 8004a12:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a16:	f000 ffdd 	bl	80059d4 <HAL_SYSTICK_Config>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d1ef      	bne.n	8004a00 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a20:	2d0f      	cmp	r5, #15
 8004a22:	d8ed      	bhi.n	8004a00 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a24:	4602      	mov	r2, r0
 8004a26:	4629      	mov	r1, r5
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	f000 ff8e 	bl	800594c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_InitTick+0x48>)
 8004a32:	4620      	mov	r0, r4
 8004a34:	601d      	str	r5, [r3, #0]
}
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	20000684 	.word	0x20000684
 8004a3c:	20000680 	.word	0x20000680
 8004a40:	20000688 	.word	0x20000688

08004a44 <HAL_Init>:
{
 8004a44:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a46:	2003      	movs	r0, #3
{
 8004a48:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a4a:	f000 ff6d 	bl	8005928 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a4e:	2004      	movs	r0, #4
 8004a50:	f7ff ffd2 	bl	80049f8 <HAL_InitTick>
 8004a54:	b118      	cbz	r0, 8004a5e <HAL_Init+0x1a>
    status = HAL_ERROR;
 8004a56:	2001      	movs	r0, #1
}
 8004a58:	b003      	add	sp, #12
 8004a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a5e:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8004a60:	f7fe feaa 	bl	80037b8 <HAL_MspInit>
 8004a64:	9801      	ldr	r0, [sp, #4]
}
 8004a66:	b003      	add	sp, #12
 8004a68:	f85d fb04 	ldr.w	pc, [sp], #4

08004a6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <HAL_IncTick+0x10>)
 8004a6e:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_IncTick+0x14>)
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	6809      	ldr	r1, [r1, #0]
 8004a74:	440b      	add	r3, r1
 8004a76:	6013      	str	r3, [r2, #0]
}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000f14 	.word	0x20000f14
 8004a80:	20000684 	.word	0x20000684

08004a84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a84:	4b01      	ldr	r3, [pc, #4]	; (8004a8c <HAL_GetTick+0x8>)
 8004a86:	6818      	ldr	r0, [r3, #0]
}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000f14 	.word	0x20000f14

08004a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a94:	f7ff fff6 	bl	8004a84 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a98:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004a9a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004a9c:	d002      	beq.n	8004aa4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_Delay+0x20>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa4:	f7ff ffee 	bl	8004a84 <HAL_GetTick>
 8004aa8:	1b40      	subs	r0, r0, r5
 8004aaa:	42a0      	cmp	r0, r4
 8004aac:	d3fa      	bcc.n	8004aa4 <HAL_Delay+0x14>
  {
  }
}
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	20000684 	.word	0x20000684

08004ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f000 80a1 	beq.w	8004c04 <HAL_ADC_Init+0x150>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ac2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	f000 8091 	beq.w	8004bee <HAL_ADC_Init+0x13a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004acc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ace:	6893      	ldr	r3, [r2, #8]
 8004ad0:	009d      	lsls	r5, r3, #2
 8004ad2:	d505      	bpl.n	8004ae0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ad4:	6893      	ldr	r3, [r2, #8]
 8004ad6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004ada:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ade:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ae0:	6893      	ldr	r3, [r2, #8]
 8004ae2:	00d8      	lsls	r0, r3, #3
 8004ae4:	d417      	bmi.n	8004b16 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004ae6:	4b75      	ldr	r3, [pc, #468]	; (8004cbc <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8004ae8:	6891      	ldr	r1, [r2, #8]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4874      	ldr	r0, [pc, #464]	; (8004cc0 <HAL_ADC_Init+0x20c>)
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004af4:	fba0 0303 	umull	r0, r3, r0, r3
 8004af8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004b02:	6091      	str	r1, [r2, #8]
 8004b04:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	b12b      	cbz	r3, 8004b16 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f9      	bne.n	8004b0a <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b16:	6893      	ldr	r3, [r2, #8]
 8004b18:	00d9      	lsls	r1, r3, #3
 8004b1a:	d45a      	bmi.n	8004bd2 <HAL_ADC_Init+0x11e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b1e:	f043 0310 	orr.w	r3, r3, #16
 8004b22:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b24:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b2c:	6893      	ldr	r3, [r2, #8]
 8004b2e:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8004b32:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b38:	d152      	bne.n	8004be0 <HAL_ADC_Init+0x12c>
 8004b3a:	06db      	lsls	r3, r3, #27
 8004b3c:	d450      	bmi.n	8004be0 <HAL_ADC_Init+0x12c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b44:	f043 0302 	orr.w	r3, r3, #2
 8004b48:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b4a:	6893      	ldr	r3, [r2, #8]
 8004b4c:	07de      	lsls	r6, r3, #31
 8004b4e:	d409      	bmi.n	8004b64 <HAL_ADC_Init+0xb0>
 8004b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b54:	495b      	ldr	r1, [pc, #364]	; (8004cc4 <HAL_ADC_Init+0x210>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	6889      	ldr	r1, [r1, #8]
 8004b5a:	07cd      	lsls	r5, r1, #31
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	f140 8083 	bpl.w	8004c6a <HAL_ADC_Init+0x1b6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004b64:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b6a:	432b      	orrs	r3, r5
 8004b6c:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b6e:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b70:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004b74:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b78:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b7e:	d103      	bne.n	8004b88 <HAL_ADC_Init+0xd4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b82:	3901      	subs	r1, #1
 8004b84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b8a:	b121      	cbz	r1, 8004b96 <HAL_ADC_Init+0xe2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004b8c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b8e:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b92:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b94:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b96:	68d6      	ldr	r6, [r2, #12]
 8004b98:	494b      	ldr	r1, [pc, #300]	; (8004cc8 <HAL_ADC_Init+0x214>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b9a:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b9c:	4031      	ands	r1, r6
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ba2:	6913      	ldr	r3, [r2, #16]
 8004ba4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ba8:	432b      	orrs	r3, r5
 8004baa:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bac:	6893      	ldr	r3, [r2, #8]
 8004bae:	0759      	lsls	r1, r3, #29
 8004bb0:	d52b      	bpl.n	8004c0a <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bb2:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bb4:	6963      	ldr	r3, [r4, #20]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d04f      	beq.n	8004c5a <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004bbc:	f023 030f 	bic.w	r3, r3, #15
 8004bc0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bc4:	f023 0303 	bic.w	r3, r3, #3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004bce:	b002      	add	sp, #8
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bd2:	6893      	ldr	r3, [r2, #8]
 8004bd4:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd8:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bde:	d0ac      	beq.n	8004b3a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be4:	f043 0310 	orr.w	r3, r3, #16
 8004be8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004bea:	b002      	add	sp, #8
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004bee:	f7fe fe03 	bl	80037f8 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bf2:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf4:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bf6:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8004bf8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004bfc:	009d      	lsls	r5, r3, #2
 8004bfe:	f57f af6f 	bpl.w	8004ae0 <HAL_ADC_Init+0x2c>
 8004c02:	e767      	b.n	8004ad4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8004c04:	2001      	movs	r0, #1
}
 8004c06:	b002      	add	sp, #8
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c0a:	6893      	ldr	r3, [r2, #8]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	d4d1      	bmi.n	8004bb4 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c10:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c16:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8004c18:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c1a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c1e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c20:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c24:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c2c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004c2e:	b33d      	cbz	r5, 8004c80 <HAL_ADC_Init+0x1cc>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004c36:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004c3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c42:	432b      	orrs	r3, r5
 8004c44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004c48:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d023      	beq.n	8004c98 <HAL_ADC_Init+0x1e4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c50:	6913      	ldr	r3, [r2, #16]
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6113      	str	r3, [r2, #16]
 8004c58:	e7ac      	b.n	8004bb4 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c5c:	6a23      	ldr	r3, [r4, #32]
 8004c5e:	f021 010f 	bic.w	r1, r1, #15
 8004c62:	3b01      	subs	r3, #1
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6313      	str	r3, [r2, #48]	; 0x30
 8004c68:	e7ab      	b.n	8004bc2 <HAL_ADC_Init+0x10e>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f47f af7a 	bne.w	8004b64 <HAL_ADC_Init+0xb0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c70:	4916      	ldr	r1, [pc, #88]	; (8004ccc <HAL_ADC_Init+0x218>)
 8004c72:	6865      	ldr	r5, [r4, #4]
 8004c74:	688b      	ldr	r3, [r1, #8]
 8004c76:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004c7a:	432b      	orrs	r3, r5
 8004c7c:	608b      	str	r3, [r1, #8]
 8004c7e:	e771      	b.n	8004b64 <HAL_ADC_Init+0xb0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c84:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004c86:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004c96:	e7d7      	b.n	8004c48 <HAL_ADC_Init+0x194>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c98:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 8004c9c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8004c9e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6911      	ldr	r1, [r2, #16]
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	4333      	orrs	r3, r6
 8004caa:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004cae:	432b      	orrs	r3, r5
 8004cb0:	f021 0104 	bic.w	r1, r1, #4
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6113      	str	r3, [r2, #16]
 8004cb8:	e77c      	b.n	8004bb4 <HAL_ADC_Init+0x100>
 8004cba:	bf00      	nop
 8004cbc:	20000680 	.word	0x20000680
 8004cc0:	053e2d63 	.word	0x053e2d63
 8004cc4:	50000100 	.word	0x50000100
 8004cc8:	fff04007 	.word	0xfff04007
 8004ccc:	50000300 	.word	0x50000300

08004cd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	b082      	sub	sp, #8
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
 8004cdc:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004cde:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8004ce0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004ce2:	f000 8111 	beq.w	8004f08 <HAL_ADC_ConfigChannel+0x238>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ce6:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ce8:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8004cea:	2001      	movs	r0, #1
 8004cec:	0765      	lsls	r5, r4, #29
 8004cee:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8004cf2:	d44f      	bmi.n	8004d94 <HAL_ADC_ConfigChannel+0xc4>
  MODIFY_REG(*preg,
 8004cf4:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004cf8:	09a6      	lsrs	r6, r4, #6
 8004cfa:	f006 060c 	and.w	r6, r6, #12
 8004cfe:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8004d02:	f004 041f 	and.w	r4, r4, #31
 8004d06:	5977      	ldr	r7, [r6, r5]
 8004d08:	f04f 0c1f 	mov.w	ip, #31
 8004d0c:	fa0c fc04 	lsl.w	ip, ip, r4
 8004d10:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004d14:	40a0      	lsls	r0, r4
 8004d16:	ea27 070c 	bic.w	r7, r7, ip
 8004d1a:	4338      	orrs	r0, r7
 8004d1c:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d1e:	6890      	ldr	r0, [r2, #8]
 8004d20:	0744      	lsls	r4, r0, #29
 8004d22:	d549      	bpl.n	8004db8 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d24:	6890      	ldr	r0, [r2, #8]
 8004d26:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d28:	6890      	ldr	r0, [r2, #8]
 8004d2a:	07c0      	lsls	r0, r0, #31
 8004d2c:	d413      	bmi.n	8004d56 <HAL_ADC_ConfigChannel+0x86>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d2e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004d30:	48c6      	ldr	r0, [pc, #792]	; (800504c <HAL_ADC_ConfigChannel+0x37c>)
 8004d32:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d36:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8005074 <HAL_ADC_ConfigChannel+0x3a4>
 8004d3a:	f006 0718 	and.w	r7, r6, #24
 8004d3e:	40f8      	lsrs	r0, r7
 8004d40:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8004d44:	4020      	ands	r0, r4
 8004d46:	ea25 0507 	bic.w	r5, r5, r7
 8004d4a:	4328      	orrs	r0, r5
 8004d4c:	4566      	cmp	r6, ip
 8004d4e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8004d52:	f000 808b 	beq.w	8004e6c <HAL_ADC_ConfigChannel+0x19c>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d56:	49be      	ldr	r1, [pc, #760]	; (8005050 <HAL_ADC_ConfigChannel+0x380>)
 8004d58:	420c      	tst	r4, r1
 8004d5a:	d02b      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d5c:	4dbd      	ldr	r5, [pc, #756]	; (8005054 <HAL_ADC_ConfigChannel+0x384>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d5e:	49be      	ldr	r1, [pc, #760]	; (8005058 <HAL_ADC_ConfigChannel+0x388>)
 8004d60:	68a8      	ldr	r0, [r5, #8]
 8004d62:	428c      	cmp	r4, r1
 8004d64:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004d68:	d01e      	beq.n	8004da8 <HAL_ADC_ConfigChannel+0xd8>
 8004d6a:	49bc      	ldr	r1, [pc, #752]	; (800505c <HAL_ADC_ConfigChannel+0x38c>)
 8004d6c:	428c      	cmp	r4, r1
 8004d6e:	d01b      	beq.n	8004da8 <HAL_ADC_ConfigChannel+0xd8>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d70:	49bb      	ldr	r1, [pc, #748]	; (8005060 <HAL_ADC_ConfigChannel+0x390>)
 8004d72:	428c      	cmp	r4, r1
 8004d74:	f040 80cc 	bne.w	8004f10 <HAL_ADC_ConfigChannel+0x240>
 8004d78:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004d7c:	d11a      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xe4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d7e:	49b9      	ldr	r1, [pc, #740]	; (8005064 <HAL_ADC_ConfigChannel+0x394>)
 8004d80:	428a      	cmp	r2, r1
 8004d82:	d017      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d84:	68aa      	ldr	r2, [r5, #8]
 8004d86:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004d8a:	4316      	orrs	r6, r2
 8004d8c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8004d90:	60ae      	str	r6, [r5, #8]
 8004d92:	e003      	b.n	8004d9c <HAL_ADC_ConfigChannel+0xcc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004da2:	b002      	add	sp, #8
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004da8:	0201      	lsls	r1, r0, #8
 8004daa:	d403      	bmi.n	8004db4 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dac:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004db0:	f000 80d3 	beq.w	8004f5a <HAL_ADC_ConfigChannel+0x28a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7f1      	b.n	8004d9c <HAL_ADC_ConfigChannel+0xcc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004db8:	6895      	ldr	r5, [r2, #8]
 8004dba:	680c      	ldr	r4, [r1, #0]
 8004dbc:	f015 0508 	ands.w	r5, r5, #8
 8004dc0:	d1b2      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x58>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004dc2:	688e      	ldr	r6, [r1, #8]
 8004dc4:	f3c4 5e04 	ubfx	lr, r4, #20, #5
 8004dc8:	2007      	movs	r0, #7
 8004dca:	0de4      	lsrs	r4, r4, #23
 8004dcc:	fa00 f00e 	lsl.w	r0, r0, lr
 8004dd0:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004dd4:	f004 0404 	and.w	r4, r4, #4
 8004dd8:	ea6f 0000 	mvn.w	r0, r0
 8004ddc:	f102 0c14 	add.w	ip, r2, #20
 8004de0:	f000 80d9 	beq.w	8004f96 <HAL_ADC_ConfigChannel+0x2c6>
  MODIFY_REG(*preg,
 8004de4:	f854 700c 	ldr.w	r7, [r4, ip]
 8004de8:	fa06 f60e 	lsl.w	r6, r6, lr
 8004dec:	4038      	ands	r0, r7
 8004dee:	4306      	orrs	r6, r0
 8004df0:	f844 600c 	str.w	r6, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004df4:	6950      	ldr	r0, [r2, #20]
 8004df6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004dfa:	6150      	str	r0, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dfc:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e00:	68d7      	ldr	r7, [r2, #12]
 8004e02:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e04:	f1bc 0f04 	cmp.w	ip, #4
 8004e08:	f102 0060 	add.w	r0, r2, #96	; 0x60
 8004e0c:	f000 80cd 	beq.w	8004faa <HAL_ADC_ConfigChannel+0x2da>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e10:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(*preg,
 8004e12:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 8004e16:	f8df e260 	ldr.w	lr, [pc, #608]	; 8005078 <HAL_ADC_ConfigChannel+0x3a8>
 8004e1a:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8004e1e:	007f      	lsls	r7, r7, #1
 8004e20:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004e24:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004e28:	40be      	lsls	r6, r7
 8004e2a:	4326      	orrs	r6, r4
 8004e2c:	ea08 0e0e 	and.w	lr, r8, lr
 8004e30:	ea46 060e 	orr.w	r6, r6, lr
 8004e34:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e38:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004e3a:	698e      	ldr	r6, [r1, #24]
 8004e3c:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e40:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8004e44:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004e48:	4334      	orrs	r4, r6
 8004e4a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8004e4e:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(*preg,
 8004e50:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8004e54:	f1bc 0f01 	cmp.w	ip, #1
 8004e58:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004e5c:	bf08      	it	eq
 8004e5e:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004e62:	4325      	orrs	r5, r4
 8004e64:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
 8004e68:	680c      	ldr	r4, [r1, #0]
 8004e6a:	e75d      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x58>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	d063      	beq.n	8004f38 <HAL_ADC_ConfigChannel+0x268>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	fa94 f0a4 	rbit	r0, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f000 8121 	beq.w	80050bc <HAL_ADC_ConfigChannel+0x3ec>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004e7a:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f000 001f 	and.w	r0, r0, #31
 8004e84:	2809      	cmp	r0, #9
 8004e86:	f240 8119 	bls.w	80050bc <HAL_ADC_ConfigChannel+0x3ec>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f000 813f 	beq.w	8005112 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8004e94:	fab0 f080 	clz	r0, r0
 8004e98:	3001      	adds	r0, #1
 8004e9a:	0680      	lsls	r0, r0, #26
 8004e9c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	f000 8139 	beq.w	800511c <HAL_ADC_ConfigChannel+0x44c>
  return __builtin_clz(value);
 8004eaa:	fab5 f585 	clz	r5, r5
 8004eae:	3501      	adds	r5, #1
 8004eb0:	f005 051f 	and.w	r5, r5, #31
 8004eb4:	2601      	movs	r6, #1
 8004eb6:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004eba:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004ec0:	2c00      	cmp	r4, #0
 8004ec2:	f000 8129 	beq.w	8005118 <HAL_ADC_ConfigChannel+0x448>
  return __builtin_clz(value);
 8004ec6:	fab4 f484 	clz	r4, r4
 8004eca:	3401      	adds	r4, #1
 8004ecc:	f004 041f 	and.w	r4, r4, #31
 8004ed0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004ed4:	3c1e      	subs	r4, #30
 8004ed6:	0524      	lsls	r4, r4, #20
 8004ed8:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004edc:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ede:	0dc7      	lsrs	r7, r0, #23
 8004ee0:	f007 0704 	and.w	r7, r7, #4
 8004ee4:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004ee8:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004eec:	597c      	ldr	r4, [r7, r5]
 8004eee:	688e      	ldr	r6, [r1, #8]
 8004ef0:	f04f 0c07 	mov.w	ip, #7
 8004ef4:	fa0c fc00 	lsl.w	ip, ip, r0
 8004ef8:	ea24 040c 	bic.w	r4, r4, ip
 8004efc:	fa06 f000 	lsl.w	r0, r6, r0
 8004f00:	4320      	orrs	r0, r4
 8004f02:	5178      	str	r0, [r7, r5]
 8004f04:	680c      	ldr	r4, [r1, #0]
 8004f06:	e726      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 8004f08:	2002      	movs	r0, #2
}
 8004f0a:	b002      	add	sp, #8
 8004f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f10:	4955      	ldr	r1, [pc, #340]	; (8005068 <HAL_ADC_ConfigChannel+0x398>)
 8004f12:	428c      	cmp	r4, r1
 8004f14:	f47f af4e 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0xe4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f18:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004f1c:	f47f af4a 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f20:	4950      	ldr	r1, [pc, #320]	; (8005064 <HAL_ADC_ConfigChannel+0x394>)
 8004f22:	428a      	cmp	r2, r1
 8004f24:	f43f af46 	beq.w	8004db4 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f28:	68aa      	ldr	r2, [r5, #8]
 8004f2a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004f2e:	4332      	orrs	r2, r6
 8004f30:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f34:	60aa      	str	r2, [r5, #8]
 8004f36:	e731      	b.n	8004d9c <HAL_ADC_ConfigChannel+0xcc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	0ea4      	lsrs	r4, r4, #26
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	f004 051f 	and.w	r5, r4, #31
 8004f40:	06a0      	lsls	r0, r4, #26
 8004f42:	2401      	movs	r4, #1
 8004f44:	40ac      	lsls	r4, r5
 8004f46:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4a:	2d09      	cmp	r5, #9
 8004f4c:	ea40 0004 	orr.w	r0, r0, r4
 8004f50:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8004f54:	d8be      	bhi.n	8004ed4 <HAL_ADC_ConfigChannel+0x204>
 8004f56:	0524      	lsls	r4, r4, #20
 8004f58:	e7c0      	b.n	8004edc <HAL_ADC_ConfigChannel+0x20c>
 8004f5a:	483e      	ldr	r0, [pc, #248]	; (8005054 <HAL_ADC_ConfigChannel+0x384>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f5c:	4a43      	ldr	r2, [pc, #268]	; (800506c <HAL_ADC_ConfigChannel+0x39c>)
 8004f5e:	6881      	ldr	r1, [r0, #8]
 8004f60:	4c43      	ldr	r4, [pc, #268]	; (8005070 <HAL_ADC_ConfigChannel+0x3a0>)
 8004f62:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004f66:	430e      	orrs	r6, r1
 8004f68:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004f6c:	6086      	str	r6, [r0, #8]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	0992      	lsrs	r2, r2, #6
 8004f72:	fba4 1202 	umull	r1, r2, r4, r2
 8004f76:	0992      	lsrs	r2, r2, #6
 8004f78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004f7c:	0092      	lsls	r2, r2, #2
 8004f7e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f80:	9a01      	ldr	r2, [sp, #4]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f43f af16 	beq.w	8004db4 <HAL_ADC_ConfigChannel+0xe4>
            wait_loop_index--;
 8004f88:	9a01      	ldr	r2, [sp, #4]
 8004f8a:	3a01      	subs	r2, #1
 8004f8c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f8e:	9a01      	ldr	r2, [sp, #4]
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d1f9      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x2b8>
 8004f94:	e70e      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(*preg,
 8004f96:	f854 600c 	ldr.w	r6, [r4, ip]
 8004f9a:	4030      	ands	r0, r6
 8004f9c:	f844 000c 	str.w	r0, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004fa0:	6950      	ldr	r0, [r2, #20]
 8004fa2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004fa6:	6150      	str	r0, [r2, #20]
 8004fa8:	e728      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x12c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004faa:	6e15      	ldr	r5, [r2, #96]	; 0x60
 8004fac:	6e15      	ldr	r5, [r2, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fae:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8004fb2:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004fb6:	2f00      	cmp	r7, #0
 8004fb8:	d141      	bne.n	800503e <HAL_ADC_ConfigChannel+0x36e>
 8004fba:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004fbe:	42b5      	cmp	r5, r6
 8004fc0:	d106      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x300>
  MODIFY_REG(*preg,
 8004fc2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004fc4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004fc8:	6614      	str	r4, [r2, #96]	; 0x60
 8004fca:	680c      	ldr	r4, [r1, #0]
 8004fcc:	f3c4 0712 	ubfx	r7, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fd0:	6845      	ldr	r5, [r0, #4]
 8004fd2:	6846      	ldr	r6, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fd4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	d14f      	bne.n	800507c <HAL_ADC_ConfigChannel+0x3ac>
 8004fdc:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004fe0:	42ae      	cmp	r6, r5
 8004fe2:	f040 809d 	bne.w	8005120 <HAL_ADC_ConfigChannel+0x450>
  MODIFY_REG(*preg,
 8004fe6:	6844      	ldr	r4, [r0, #4]
 8004fe8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004fec:	6044      	str	r4, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fee:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ff0:	6885      	ldr	r5, [r0, #8]
 8004ff2:	6886      	ldr	r6, [r0, #8]
 8004ff4:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8004ff8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	d148      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x3c2>
 8005000:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8005004:	42ae      	cmp	r6, r5
 8005006:	f100 070c 	add.w	r7, r0, #12
 800500a:	f040 808e 	bne.w	800512a <HAL_ADC_ConfigChannel+0x45a>
  MODIFY_REG(*preg,
 800500e:	6884      	ldr	r4, [r0, #8]
 8005010:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005014:	6084      	str	r4, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005016:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005018:	6838      	ldr	r0, [r7, #0]
 800501a:	6838      	ldr	r0, [r7, #0]
 800501c:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8005020:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005024:	2d00      	cmp	r5, #0
 8005026:	d141      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x3dc>
 8005028:	f3c4 6584 	ubfx	r5, r4, #26, #5
 800502c:	4285      	cmp	r5, r0
 800502e:	f47f ae7b 	bne.w	8004d28 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8005032:	6838      	ldr	r0, [r7, #0]
 8005034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005038:	6038      	str	r0, [r7, #0]
 800503a:	680c      	ldr	r4, [r1, #0]
 800503c:	e674      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005042:	2e00      	cmp	r6, #0
 8005044:	d0c4      	beq.n	8004fd0 <HAL_ADC_ConfigChannel+0x300>
  return __builtin_clz(value);
 8005046:	fab6 f686 	clz	r6, r6
 800504a:	e7b8      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x2ee>
 800504c:	0007ffff 	.word	0x0007ffff
 8005050:	80080000 	.word	0x80080000
 8005054:	50000300 	.word	0x50000300
 8005058:	c3210000 	.word	0xc3210000
 800505c:	90c00010 	.word	0x90c00010
 8005060:	c7520000 	.word	0xc7520000
 8005064:	50000100 	.word	0x50000100
 8005068:	cb840000 	.word	0xcb840000
 800506c:	20000680 	.word	0x20000680
 8005070:	053e2d63 	.word	0x053e2d63
 8005074:	407f0000 	.word	0x407f0000
 8005078:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005080:	b11d      	cbz	r5, 800508a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005082:	fab5 f585 	clz	r5, r5
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005086:	42ae      	cmp	r6, r5
 8005088:	d0ad      	beq.n	8004fe6 <HAL_ADC_ConfigChannel+0x316>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800508a:	6885      	ldr	r5, [r0, #8]
 800508c:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800508e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005096:	b38d      	cbz	r5, 80050fc <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8005098:	fab5 f585 	clz	r5, r5
 800509c:	42ae      	cmp	r6, r5
 800509e:	f100 070c 	add.w	r7, r0, #12
 80050a2:	d0b4      	beq.n	800500e <HAL_ADC_ConfigChannel+0x33e>
 80050a4:	6838      	ldr	r0, [r7, #0]
 80050a6:	6838      	ldr	r0, [r7, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050a8:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ac:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	f43f ae39 	beq.w	8004d28 <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 80050b6:	fab5 f585 	clz	r5, r5
 80050ba:	e7b7      	b.n	800502c <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80050c0:	b320      	cbz	r0, 800510c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80050c2:	fab0 f080 	clz	r0, r0
 80050c6:	3001      	adds	r0, #1
 80050c8:	0680      	lsls	r0, r0, #26
 80050ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80050d2:	b1cd      	cbz	r5, 8005108 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80050d4:	fab5 f585 	clz	r5, r5
 80050d8:	3501      	adds	r5, #1
 80050da:	f005 051f 	and.w	r5, r5, #31
 80050de:	2601      	movs	r6, #1
 80050e0:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050e4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80050ea:	b154      	cbz	r4, 8005102 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80050ec:	fab4 f484 	clz	r4, r4
 80050f0:	3401      	adds	r4, #1
 80050f2:	f004 041f 	and.w	r4, r4, #31
 80050f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80050fa:	e72c      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x286>
 80050fc:	f100 070c 	add.w	r7, r0, #12
 8005100:	e7d0      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x3d4>
  if (value == 0U)
 8005102:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8005106:	e6e9      	b.n	8004edc <HAL_ADC_ConfigChannel+0x20c>
 8005108:	2502      	movs	r5, #2
 800510a:	e7eb      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x414>
 800510c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005110:	e7dd      	b.n	80050ce <HAL_ADC_ConfigChannel+0x3fe>
 8005112:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005116:	e6c3      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x1d0>
 8005118:	4c06      	ldr	r4, [pc, #24]	; (8005134 <HAL_ADC_ConfigChannel+0x464>)
 800511a:	e6df      	b.n	8004edc <HAL_ADC_ConfigChannel+0x20c>
 800511c:	2502      	movs	r5, #2
 800511e:	e6cc      	b.n	8004eba <HAL_ADC_ConfigChannel+0x1ea>
 8005120:	6886      	ldr	r6, [r0, #8]
 8005122:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005124:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005128:	e76c      	b.n	8005004 <HAL_ADC_ConfigChannel+0x334>
 800512a:	68c6      	ldr	r6, [r0, #12]
 800512c:	68c0      	ldr	r0, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800512e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005132:	e77b      	b.n	800502c <HAL_ADC_ConfigChannel+0x35c>
 8005134:	fe500000 	.word	0xfe500000

08005138 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800513c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8005140:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005142:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005144:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005146:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005148:	f000 815e 	beq.w	8005408 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800514c:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 800514e:	2201      	movs	r2, #1
 8005150:	4604      	mov	r4, r0
 8005152:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005156:	2b00      	cmp	r3, #0
 8005158:	d072      	beq.n	8005240 <HAL_ADCEx_InjectedConfigChannel+0x108>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800515a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800515c:	4293      	cmp	r3, r2
 800515e:	d06f      	beq.n	8005240 <HAL_ADCEx_InjectedConfigChannel+0x108>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005160:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8005162:	2800      	cmp	r0, #0
 8005164:	f040 8129 	bne.w	80053ba <HAL_ADCEx_InjectedConfigChannel+0x282>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005168:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	2800      	cmp	r0, #0
 800516e:	f000 823e 	beq.w	80055ee <HAL_ADCEx_InjectedConfigChannel+0x4b6>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005172:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005176:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005178:	4318      	orrs	r0, r3
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800517a:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800517c:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005180:	66a3      	str	r3, [r4, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005182:	f005 051f 	and.w	r5, r5, #31
 8005186:	f3c2 6384 	ubfx	r3, r2, #26, #5
 800518a:	40ab      	lsls	r3, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800518c:	4318      	orrs	r0, r3
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005192:	6898      	ldr	r0, [r3, #8]
 8005194:	0700      	lsls	r0, r0, #28
 8005196:	d410      	bmi.n	80051ba <HAL_ADCEx_InjectedConfigChannel+0x82>
 8005198:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800519c:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 80051a0:	0540      	lsls	r0, r0, #21
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	f040 80fe 	bne.w	80053a4 <HAL_ADCEx_InjectedConfigChannel+0x26c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80051a8:	68dd      	ldr	r5, [r3, #12]
 80051aa:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 80051ae:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80051b2:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80051b6:	4328      	orrs	r0, r5
 80051b8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ba:	6898      	ldr	r0, [r3, #8]
 80051bc:	f010 0004 	ands.w	r0, r0, #4
 80051c0:	d057      	beq.n	8005272 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051c2:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c4:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051c6:	689d      	ldr	r5, [r3, #8]
 80051c8:	07ef      	lsls	r7, r5, #31
 80051ca:	d414      	bmi.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0xbe>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80051cc:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80051ce:	4dc7      	ldr	r5, [pc, #796]	; (80054ec <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80051d0:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051d4:	f8df e340 	ldr.w	lr, [pc, #832]	; 8005518 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 80051d8:	f007 0c18 	and.w	ip, r7, #24
 80051dc:	fa25 f50c 	lsr.w	r5, r5, ip
 80051e0:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80051e4:	4015      	ands	r5, r2
 80051e6:	ea26 060c 	bic.w	r6, r6, ip
 80051ea:	4335      	orrs	r5, r6
 80051ec:	4577      	cmp	r7, lr
 80051ee:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80051f2:	f000 810d 	beq.w	8005410 <HAL_ADCEx_InjectedConfigChannel+0x2d8>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80051f6:	49be      	ldr	r1, [pc, #760]	; (80054f0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80051f8:	420a      	tst	r2, r1
 80051fa:	d01b      	beq.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80051fc:	4dbd      	ldr	r5, [pc, #756]	; (80054f4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80051fe:	4ebe      	ldr	r6, [pc, #760]	; (80054f8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005200:	68a9      	ldr	r1, [r5, #8]
 8005202:	42b2      	cmp	r2, r6
 8005204:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8005208:	f000 80a7 	beq.w	800535a <HAL_ADCEx_InjectedConfigChannel+0x222>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800520c:	4ebb      	ldr	r6, [pc, #748]	; (80054fc <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800520e:	42b2      	cmp	r2, r6
 8005210:	f000 80a3 	beq.w	800535a <HAL_ADCEx_InjectedConfigChannel+0x222>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005214:	4eba      	ldr	r6, [pc, #744]	; (8005500 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 8005216:	42b2      	cmp	r2, r6
 8005218:	f040 8155 	bne.w	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800521c:	01ce      	lsls	r6, r1, #7
 800521e:	d409      	bmi.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005220:	4ab8      	ldr	r2, [pc, #736]	; (8005504 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d006      	beq.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005226:	68ab      	ldr	r3, [r5, #8]
 8005228:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800522c:	431f      	orrs	r7, r3
 800522e:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005232:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005234:	2300      	movs	r3, #0
 8005236:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800523a:	b003      	add	sp, #12
 800523c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005240:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005244:	2809      	cmp	r0, #9
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	d1a3      	bne.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800524a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800524c:	0c55      	lsrs	r5, r2, #17
 800524e:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005252:	b120      	cbz	r0, 800525e <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005254:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005256:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800525a:	4330      	orrs	r0, r6
 800525c:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800525e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005260:	4ea9      	ldr	r6, [pc, #676]	; (8005508 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 8005262:	4030      	ands	r0, r6
 8005264:	4328      	orrs	r0, r5
 8005266:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005268:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800526a:	6665      	str	r5, [r4, #100]	; 0x64
 800526c:	0700      	lsls	r0, r0, #28
 800526e:	d4a4      	bmi.n	80051ba <HAL_ADCEx_InjectedConfigChannel+0x82>
 8005270:	e792      	b.n	8005198 <HAL_ADCEx_InjectedConfigChannel+0x60>
 8005272:	689d      	ldr	r5, [r3, #8]
 8005274:	f015 0508 	ands.w	r5, r5, #8
 8005278:	d1a5      	bne.n	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800527a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800527c:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8005280:	2e00      	cmp	r6, #0
 8005282:	f040 80b4 	bne.w	80053ee <HAL_ADCEx_InjectedConfigChannel+0x2b6>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005286:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005288:	68d8      	ldr	r0, [r3, #12]
 800528a:	bf0c      	ite	eq
 800528c:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005290:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8005294:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005296:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005298:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 800529c:	2e01      	cmp	r6, #1
 800529e:	f000 8147 	beq.w	8005530 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80052a2:	691e      	ldr	r6, [r3, #16]
 80052a4:	f026 0602 	bic.w	r6, r6, #2
 80052a8:	611e      	str	r6, [r3, #16]
 80052aa:	f3c2 5804 	ubfx	r8, r2, #20, #5
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052ae:	688f      	ldr	r7, [r1, #8]
 80052b0:	0dd2      	lsrs	r2, r2, #23
 80052b2:	2607      	movs	r6, #7
 80052b4:	f002 0e04 	and.w	lr, r2, #4
 80052b8:	f103 0c14 	add.w	ip, r3, #20
 80052bc:	fa06 f608 	lsl.w	r6, r6, r8
 80052c0:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80052c4:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 80052c8:	f85e 200c 	ldr.w	r2, [lr, ip]
 80052cc:	f000 8128 	beq.w	8005520 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 80052d0:	4016      	ands	r6, r2
 80052d2:	fa07 f708 	lsl.w	r7, r7, r8
 80052d6:	4337      	orrs	r7, r6
 80052d8:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052e2:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80052e4:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80052e8:	68df      	ldr	r7, [r3, #12]
 80052ea:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80052ec:	f1be 0f04 	cmp.w	lr, #4
 80052f0:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80052f4:	f000 8128 	beq.w	8005548 <HAL_ADCEx_InjectedConfigChannel+0x410>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80052f8:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80052fc:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 80052fe:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 8005302:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800551c <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8005306:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800530a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800530e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005312:	fa07 f70c 	lsl.w	r7, r7, ip
 8005316:	4317      	orrs	r7, r2
 8005318:	ea09 0808 	and.w	r8, r9, r8
 800531c:	ea47 0708 	orr.w	r7, r7, r8
 8005320:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005324:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005328:	698f      	ldr	r7, [r1, #24]
 800532a:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800532e:	f891 e01c 	ldrb.w	lr, [r1, #28]
 8005332:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005336:	433a      	orrs	r2, r7
 8005338:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
 800533c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800533e:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8005342:	f1be 0f01 	cmp.w	lr, #1
 8005346:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800534a:	bf08      	it	eq
 800534c:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8005350:	4315      	orrs	r5, r2
 8005352:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 8005356:	680a      	ldr	r2, [r1, #0]
 8005358:	e735      	b.n	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800535a:	020a      	lsls	r2, r1, #8
 800535c:	f53f af6a 	bmi.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005364:	f47f af66 	bne.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005368:	4a62      	ldr	r2, [pc, #392]	; (80054f4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800536a:	4968      	ldr	r1, [pc, #416]	; (800550c <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
 800536c:	6893      	ldr	r3, [r2, #8]
 800536e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005372:	431f      	orrs	r7, r3
 8005374:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8005378:	6097      	str	r7, [r2, #8]
 800537a:	680b      	ldr	r3, [r1, #0]
 800537c:	4a64      	ldr	r2, [pc, #400]	; (8005510 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 800537e:	099b      	lsrs	r3, r3, #6
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	099b      	lsrs	r3, r3, #6
 8005386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800538e:	9b01      	ldr	r3, [sp, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f43f af4f 	beq.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
          wait_loop_index--;
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	3b01      	subs	r3, #1
 800539a:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800539c:	9b01      	ldr	r3, [sp, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f9      	bne.n	8005396 <HAL_ADCEx_InjectedConfigChannel+0x25e>
 80053a2:	e747      	b.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->CFGR,
 80053a4:	68dd      	ldr	r5, [r3, #12]
 80053a6:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80053aa:	4328      	orrs	r0, r5
 80053ac:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053ae:	6898      	ldr	r0, [r3, #8]
 80053b0:	f010 0004 	ands.w	r0, r0, #4
 80053b4:	f47f af05 	bne.w	80051c2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80053b8:	e75b      	b.n	8005272 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80053ba:	e9d1 2600 	ldrd	r2, r6, [r1]
 80053be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053c0:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80053c4:	f006 061f 	and.w	r6, r6, #31
 80053c8:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80053ca:	431d      	orrs	r5, r3
 80053cc:	3801      	subs	r0, #1
 80053ce:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 80053d2:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f47f aedc 	bne.w	8005192 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80053da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80053dc:	4e4a      	ldr	r6, [pc, #296]	; (8005508 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80053de:	4030      	ands	r0, r6
 80053e0:	4305      	orrs	r5, r0
 80053e2:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053e4:	6898      	ldr	r0, [r3, #8]
 80053e6:	0700      	lsls	r0, r0, #28
 80053e8:	f53f aee7 	bmi.w	80051ba <HAL_ADCEx_InjectedConfigChannel+0x82>
 80053ec:	e6d4      	b.n	8005198 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80053ee:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	f43f af48 	beq.w	8005286 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80053f6:	2801      	cmp	r0, #1
 80053f8:	f000 8128 	beq.w	800564c <HAL_ADCEx_InjectedConfigChannel+0x514>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80053fc:	68d8      	ldr	r0, [r3, #12]
 80053fe:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005402:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005404:	4628      	mov	r0, r5
 8005406:	e747      	b.n	8005298 <HAL_ADCEx_InjectedConfigChannel+0x160>
  __HAL_LOCK(hadc);
 8005408:	2002      	movs	r0, #2
}
 800540a:	b003      	add	sp, #12
 800540c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8005410:	f1bc 0f00 	cmp.w	ip, #0
 8005414:	d12b      	bne.n	800546e <HAL_ADCEx_InjectedConfigChannel+0x336>
 8005416:	0e92      	lsrs	r2, r2, #26
 8005418:	3201      	adds	r2, #1
 800541a:	f002 061f 	and.w	r6, r2, #31
 800541e:	2501      	movs	r5, #1
 8005420:	0692      	lsls	r2, r2, #26
 8005422:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8005426:	40b5      	lsls	r5, r6
 8005428:	2e09      	cmp	r6, #9
 800542a:	ea45 0502 	orr.w	r5, r5, r2
 800542e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8005432:	d946      	bls.n	80054c2 <HAL_ADCEx_InjectedConfigChannel+0x38a>
 8005434:	3a1e      	subs	r2, #30
 8005436:	0512      	lsls	r2, r2, #20
 8005438:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800543c:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800543e:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8005442:	f00c 0c04 	and.w	ip, ip, #4
 8005446:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800544a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800544e:	f85c 5007 	ldr.w	r5, [ip, r7]
 8005452:	688e      	ldr	r6, [r1, #8]
 8005454:	f04f 0e07 	mov.w	lr, #7
 8005458:	fa0e fe02 	lsl.w	lr, lr, r2
 800545c:	ea25 050e 	bic.w	r5, r5, lr
 8005460:	fa06 f202 	lsl.w	r2, r6, r2
 8005464:	432a      	orrs	r2, r5
 8005466:	f84c 2007 	str.w	r2, [ip, r7]
 800546a:	680a      	ldr	r2, [r1, #0]
 800546c:	e6c3      	b.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0xbe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005472:	2d00      	cmp	r5, #0
 8005474:	f040 80bd 	bne.w	80055f2 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800547c:	2d00      	cmp	r5, #0
 800547e:	f000 8113 	beq.w	80056a8 <HAL_ADCEx_InjectedConfigChannel+0x570>
  return __builtin_clz(value);
 8005482:	fab5 f585 	clz	r5, r5
 8005486:	3501      	adds	r5, #1
 8005488:	06ad      	lsls	r5, r5, #26
 800548a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005492:	2e00      	cmp	r6, #0
 8005494:	f000 8106 	beq.w	80056a4 <HAL_ADCEx_InjectedConfigChannel+0x56c>
  return __builtin_clz(value);
 8005498:	fab6 f686 	clz	r6, r6
 800549c:	3601      	adds	r6, #1
 800549e:	f006 061f 	and.w	r6, r6, #31
 80054a2:	2701      	movs	r7, #1
 80054a4:	fa07 f606 	lsl.w	r6, r7, r6
 80054a8:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	f000 80f5 	beq.w	800569e <HAL_ADCEx_InjectedConfigChannel+0x566>
  return __builtin_clz(value);
 80054b4:	fab2 f282 	clz	r2, r2
 80054b8:	3201      	adds	r2, #1
 80054ba:	f002 021f 	and.w	r2, r2, #31
 80054be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80054c2:	0512      	lsls	r2, r2, #20
 80054c4:	e7ba      	b.n	800543c <HAL_ADCEx_InjectedConfigChannel+0x304>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80054c6:	4e13      	ldr	r6, [pc, #76]	; (8005514 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80054c8:	42b2      	cmp	r2, r6
 80054ca:	f47f aeb3 	bne.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054ce:	0249      	lsls	r1, r1, #9
 80054d0:	f53f aeb0 	bmi.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_VREFINT_INSTANCE(hadc))
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f43f aeac 	beq.w	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80054dc:	68ab      	ldr	r3, [r5, #8]
 80054de:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80054e2:	431f      	orrs	r7, r3
 80054e4:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 80054e8:	60af      	str	r7, [r5, #8]
 80054ea:	e6a3      	b.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0xfc>
 80054ec:	0007ffff 	.word	0x0007ffff
 80054f0:	80080000 	.word	0x80080000
 80054f4:	50000300 	.word	0x50000300
 80054f8:	c3210000 	.word	0xc3210000
 80054fc:	90c00010 	.word	0x90c00010
 8005500:	c7520000 	.word	0xc7520000
 8005504:	50000100 	.word	0x50000100
 8005508:	04104000 	.word	0x04104000
 800550c:	20000680 	.word	0x20000680
 8005510:	053e2d63 	.word	0x053e2d63
 8005514:	cb840000 	.word	0xcb840000
 8005518:	407f0000 	.word	0x407f0000
 800551c:	03fff000 	.word	0x03fff000
  MODIFY_REG(*preg,
 8005520:	4016      	ands	r6, r2
 8005522:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800552c:	615a      	str	r2, [r3, #20]
 800552e:	e6d9      	b.n	80052e4 <HAL_ADCEx_InjectedConfigChannel+0x1ac>
      MODIFY_REG(hadc->Instance->CFGR2,
 8005530:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8005532:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005534:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8005538:	433e      	orrs	r6, r7
 800553a:	f046 0602 	orr.w	r6, r6, #2
 800553e:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 8005542:	433e      	orrs	r6, r7
 8005544:	611e      	str	r6, [r3, #16]
 8005546:	e6b0      	b.n	80052aa <HAL_ADCEx_InjectedConfigChannel+0x172>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005548:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800554a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800554c:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8005550:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005554:	f1bc 0f00 	cmp.w	ip, #0
 8005558:	d075      	beq.n	8005646 <HAL_ADCEx_InjectedConfigChannel+0x50e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 800555e:	b157      	cbz	r7, 8005576 <HAL_ADCEx_InjectedConfigChannel+0x43e>
  return __builtin_clz(value);
 8005560:	fab7 f787 	clz	r7, r7
 8005564:	42bd      	cmp	r5, r7
 8005566:	d106      	bne.n	8005576 <HAL_ADCEx_InjectedConfigChannel+0x43e>
  MODIFY_REG(*preg,
 8005568:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800556a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800556e:	661a      	str	r2, [r3, #96]	; 0x60
 8005570:	680a      	ldr	r2, [r1, #0]
 8005572:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005576:	6875      	ldr	r5, [r6, #4]
 8005578:	6877      	ldr	r7, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800557a:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800557e:	f1bc 0f00 	cmp.w	ip, #0
 8005582:	d168      	bne.n	8005656 <HAL_ADCEx_InjectedConfigChannel+0x51e>
 8005584:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8005588:	42af      	cmp	r7, r5
 800558a:	f040 809d 	bne.w	80056c8 <HAL_ADCEx_InjectedConfigChannel+0x590>
  MODIFY_REG(*preg,
 800558e:	6872      	ldr	r2, [r6, #4]
 8005590:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005594:	6072      	str	r2, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005596:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005598:	68b5      	ldr	r5, [r6, #8]
 800559a:	68b7      	ldr	r7, [r6, #8]
 800559c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80055a0:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	d161      	bne.n	800566c <HAL_ADCEx_InjectedConfigChannel+0x534>
 80055a8:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80055ac:	42af      	cmp	r7, r5
 80055ae:	f106 0c0c 	add.w	ip, r6, #12
 80055b2:	f040 8084 	bne.w	80056be <HAL_ADCEx_InjectedConfigChannel+0x586>
  MODIFY_REG(*preg,
 80055b6:	68b2      	ldr	r2, [r6, #8]
 80055b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055bc:	60b2      	str	r2, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80055be:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055c0:	f8dc 5000 	ldr.w	r5, [ip]
 80055c4:	f8dc 6000 	ldr.w	r6, [ip]
 80055c8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80055cc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	d15a      	bne.n	800568a <HAL_ADCEx_InjectedConfigChannel+0x552>
 80055d4:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80055d8:	42b5      	cmp	r5, r6
 80055da:	f47f adf4 	bne.w	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80055de:	f8dc 2000 	ldr.w	r2, [ip]
 80055e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055e6:	f8cc 2000 	str.w	r2, [ip]
 80055ea:	680a      	ldr	r2, [r1, #0]
 80055ec:	e5eb      	b.n	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80055ee:	4618      	mov	r0, r3
 80055f0:	e5c4      	b.n	800517c <HAL_ADCEx_InjectedConfigChannel+0x44>
 80055f2:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80055f6:	3501      	adds	r5, #1
 80055f8:	f005 051f 	and.w	r5, r5, #31
 80055fc:	2d09      	cmp	r5, #9
 80055fe:	f67f af3b 	bls.w	8005478 <HAL_ADCEx_InjectedConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005606:	2d00      	cmp	r5, #0
 8005608:	d053      	beq.n	80056b2 <HAL_ADCEx_InjectedConfigChannel+0x57a>
  return __builtin_clz(value);
 800560a:	fab5 f585 	clz	r5, r5
 800560e:	3501      	adds	r5, #1
 8005610:	06ad      	lsls	r5, r5, #26
 8005612:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800561a:	2e00      	cmp	r6, #0
 800561c:	d047      	beq.n	80056ae <HAL_ADCEx_InjectedConfigChannel+0x576>
  return __builtin_clz(value);
 800561e:	fab6 f686 	clz	r6, r6
 8005622:	3601      	adds	r6, #1
 8005624:	f006 061f 	and.w	r6, r6, #31
 8005628:	2701      	movs	r7, #1
 800562a:	fa07 f606 	lsl.w	r6, r7, r6
 800562e:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005630:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005634:	b38a      	cbz	r2, 800569a <HAL_ADCEx_InjectedConfigChannel+0x562>
  return __builtin_clz(value);
 8005636:	fab2 f282 	clz	r2, r2
 800563a:	3201      	adds	r2, #1
 800563c:	f002 021f 	and.w	r2, r2, #31
 8005640:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005644:	e6f6      	b.n	8005434 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005646:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800564a:	e78b      	b.n	8005564 <HAL_ADCEx_InjectedConfigChannel+0x42c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800564c:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800564e:	f046 0620 	orr.w	r6, r6, #32
 8005652:	65e6      	str	r6, [r4, #92]	; 0x5c
 8005654:	e620      	b.n	8005298 <HAL_ADCEx_InjectedConfigChannel+0x160>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800565a:	b11d      	cbz	r5, 8005664 <HAL_ADCEx_InjectedConfigChannel+0x52c>
  return __builtin_clz(value);
 800565c:	fab5 f585 	clz	r5, r5
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005660:	42af      	cmp	r7, r5
 8005662:	d094      	beq.n	800558e <HAL_ADCEx_InjectedConfigChannel+0x456>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005664:	68b5      	ldr	r5, [r6, #8]
 8005666:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005668:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005670:	b315      	cbz	r5, 80056b8 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return __builtin_clz(value);
 8005672:	fab5 f585 	clz	r5, r5
 8005676:	42af      	cmp	r7, r5
 8005678:	f106 0c0c 	add.w	ip, r6, #12
 800567c:	d09b      	beq.n	80055b6 <HAL_ADCEx_InjectedConfigChannel+0x47e>
 800567e:	f8dc 5000 	ldr.w	r5, [ip]
 8005682:	f8dc 6000 	ldr.w	r6, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005686:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800568e:	2d00      	cmp	r5, #0
 8005690:	f43f ad99 	beq.w	80051c6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 8005694:	fab5 f585 	clz	r5, r5
 8005698:	e79e      	b.n	80055d8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  if (value == 0U)
 800569a:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0x59c>)
 800569c:	e6ce      	b.n	800543c <HAL_ADCEx_InjectedConfigChannel+0x304>
 800569e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80056a2:	e6cb      	b.n	800543c <HAL_ADCEx_InjectedConfigChannel+0x304>
 80056a4:	2602      	movs	r6, #2
 80056a6:	e6ff      	b.n	80054a8 <HAL_ADCEx_InjectedConfigChannel+0x370>
 80056a8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80056ac:	e6ef      	b.n	800548e <HAL_ADCEx_InjectedConfigChannel+0x356>
 80056ae:	2602      	movs	r6, #2
 80056b0:	e7bd      	b.n	800562e <HAL_ADCEx_InjectedConfigChannel+0x4f6>
 80056b2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80056b6:	e7ae      	b.n	8005616 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80056b8:	f106 0c0c 	add.w	ip, r6, #12
 80056bc:	e7df      	b.n	800567e <HAL_ADCEx_InjectedConfigChannel+0x546>
 80056be:	68f7      	ldr	r7, [r6, #12]
 80056c0:	68f6      	ldr	r6, [r6, #12]
 80056c2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80056c6:	e787      	b.n	80055d8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80056c8:	68b7      	ldr	r7, [r6, #8]
 80056ca:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80056cc:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80056d0:	e76c      	b.n	80055ac <HAL_ADCEx_InjectedConfigChannel+0x474>
 80056d2:	bf00      	nop
 80056d4:	fe500000 	.word	0xfe500000

080056d8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056d8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80056dc:	2a01      	cmp	r2, #1
 80056de:	d047      	beq.n	8005770 <HAL_ADCEx_MultiModeConfigChannel+0x98>
{
 80056e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056e2:	6804      	ldr	r4, [r0, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056e4:	680e      	ldr	r6, [r1, #0]
 80056e6:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056e8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80056ec:	f04f 0001 	mov.w	r0, #1
 80056f0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056f4:	d007      	beq.n	8005706 <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056f8:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056fa:	f042 0220 	orr.w	r2, r2, #32
 80056fe:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8005700:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005706:	4d27      	ldr	r5, [pc, #156]	; (80057a4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8005708:	68aa      	ldr	r2, [r5, #8]
 800570a:	0752      	lsls	r2, r2, #29
 800570c:	d509      	bpl.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800570e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005710:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005712:	f042 0220 	orr.w	r2, r2, #32
 8005716:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005718:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005722:	68a0      	ldr	r0, [r4, #8]
 8005724:	f010 0004 	ands.w	r0, r0, #4
 8005728:	d1f2      	bne.n	8005710 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800572a:	b31e      	cbz	r6, 8005774 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800572c:	f8df e078 	ldr.w	lr, [pc, #120]	; 80057a8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005730:	684f      	ldr	r7, [r1, #4]
 8005732:	f8de 2008 	ldr.w	r2, [lr, #8]
 8005736:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800573a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800573e:	433a      	orrs	r2, r7
 8005740:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8005744:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005748:	68a2      	ldr	r2, [r4, #8]
 800574a:	07d4      	lsls	r4, r2, #31
 800574c:	d427      	bmi.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 800574e:	68a8      	ldr	r0, [r5, #8]
 8005750:	f010 0001 	ands.w	r0, r0, #1
 8005754:	d121      	bne.n	800579a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        MODIFY_REG(tmpADC_Common->CCR,
 8005756:	f8de 2008 	ldr.w	r2, [lr, #8]
 800575a:	688c      	ldr	r4, [r1, #8]
 800575c:	f422 6171 	bic.w	r1, r2, #3856	; 0xf10
 8005760:	f021 010f 	bic.w	r1, r1, #15
 8005764:	ea46 0204 	orr.w	r2, r6, r4
 8005768:	430a      	orrs	r2, r1
 800576a:	f8ce 2008 	str.w	r2, [lr, #8]
 800576e:	e7d4      	b.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 8005770:	2002      	movs	r0, #2
}
 8005772:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8005776:	6891      	ldr	r1, [r2, #8]
 8005778:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800577c:	6091      	str	r1, [r2, #8]
 800577e:	68a0      	ldr	r0, [r4, #8]
 8005780:	68a9      	ldr	r1, [r5, #8]
 8005782:	07c9      	lsls	r1, r1, #31
 8005784:	f000 0001 	and.w	r0, r0, #1
 8005788:	d407      	bmi.n	800579a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800578a:	b930      	cbnz	r0, 800579a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800578c:	6891      	ldr	r1, [r2, #8]
 800578e:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8005792:	f021 010f 	bic.w	r1, r1, #15
 8005796:	6091      	str	r1, [r2, #8]
 8005798:	e7bf      	b.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x42>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800579a:	2000      	movs	r0, #0
 800579c:	e7bd      	b.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800579e:	68aa      	ldr	r2, [r5, #8]
 80057a0:	e7bb      	b.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057a2:	bf00      	nop
 80057a4:	50000100 	.word	0x50000100
 80057a8:	50000300 	.word	0x50000300

080057ac <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d054      	beq.n	8005862 <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80057b8:	6802      	ldr	r2, [r0, #0]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	db4f      	blt.n	8005862 <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80057c2:	7f43      	ldrb	r3, [r0, #29]
 80057c4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d07e      	beq.n	80058ca <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80057cc:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 80057d0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 80057d4:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80057d6:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 80057d8:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 80057da:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80057dc:	6816      	ldr	r6, [r2, #0]
 80057de:	4940      	ldr	r1, [pc, #256]	; (80058e0 <HAL_COMP_Init+0x134>)
               | hcomp->Init.Hysteresis
 80057e0:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 80057e2:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 80057e4:	4031      	ands	r1, r6
 80057e6:	430b      	orrs	r3, r1
 80057e8:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80057ea:	6813      	ldr	r3, [r2, #0]
 80057ec:	0218      	lsls	r0, r3, #8
 80057ee:	d501      	bpl.n	80057f4 <HAL_COMP_Init+0x48>
 80057f0:	023b      	lsls	r3, r7, #8
 80057f2:	d54e      	bpl.n	8005892 <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80057f4:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_COMP_Init+0x138>)
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d062      	beq.n	80058c0 <HAL_COMP_Init+0x114>
 80057fa:	3304      	adds	r3, #4
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d06a      	beq.n	80058d6 <HAL_COMP_Init+0x12a>
 8005800:	3304      	adds	r3, #4
 8005802:	429a      	cmp	r2, r3
 8005804:	bf15      	itete	ne
 8005806:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800580a:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 800580e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 8005812:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005816:	69a3      	ldr	r3, [r4, #24]
 8005818:	079f      	lsls	r7, r3, #30
 800581a:	d025      	beq.n	8005868 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800581c:	4d32      	ldr	r5, [pc, #200]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800581e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005820:	06de      	lsls	r6, r3, #27
 8005822:	bf4c      	ite	mi
 8005824:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005826:	4010      	andpl	r0, r2
 8005828:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800582a:	4d2f      	ldr	r5, [pc, #188]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800582c:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800582e:	069f      	lsls	r7, r3, #26
 8005830:	bf4c      	ite	mi
 8005832:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005834:	4010      	andpl	r0, r2
 8005836:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005838:	482b      	ldr	r0, [pc, #172]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800583a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800583c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800583e:	079e      	lsls	r6, r3, #30
 8005840:	bf4c      	ite	mi
 8005842:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005844:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005846:	07db      	lsls	r3, r3, #31
 8005848:	6045      	str	r5, [r0, #4]
 800584a:	d51d      	bpl.n	8005888 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800584c:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4311      	orrs	r1, r2
 8005852:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005854:	7f63      	ldrb	r3, [r4, #29]
 8005856:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800585a:	b18b      	cbz	r3, 8005880 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800585e:	b003      	add	sp, #12
 8005860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8005862:	2001      	movs	r0, #1
}
 8005864:	b003      	add	sp, #12
 8005866:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005868:	4b1f      	ldr	r3, [pc, #124]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	4011      	ands	r1, r2
 800586e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	400a      	ands	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005876:	7f63      	ldrb	r3, [r4, #29]
 8005878:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ed      	bne.n	800585c <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 8005880:	2301      	movs	r3, #1
 8005882:	7763      	strb	r3, [r4, #29]
}
 8005884:	b003      	add	sp, #12
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	4917      	ldr	r1, [pc, #92]	; (80058e8 <HAL_COMP_Init+0x13c>)
 800588a:	680b      	ldr	r3, [r1, #0]
 800588c:	401a      	ands	r2, r3
 800588e:	600a      	str	r2, [r1, #0]
 8005890:	e7f1      	b.n	8005876 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <HAL_COMP_Init+0x140>)
 8005894:	4916      	ldr	r1, [pc, #88]	; (80058f0 <HAL_COMP_Init+0x144>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	fba1 1303 	umull	r1, r3, r1, r3
 800589e:	099b      	lsrs	r3, r3, #6
 80058a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0a2      	beq.n	80057f4 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80058b4:	9b01      	ldr	r3, [sp, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f9      	bne.n	80058ae <HAL_COMP_Init+0x102>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <HAL_COMP_Init+0x138>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d19c      	bne.n	80057fa <HAL_COMP_Init+0x4e>
 80058c0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058c8:	e7a5      	b.n	8005816 <HAL_COMP_Init+0x6a>
      hcomp->Lock = HAL_UNLOCKED;
 80058ca:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80058cc:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80058ce:	f7fe f80b 	bl	80038e8 <HAL_COMP_MspInit>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	e77a      	b.n	80057cc <HAL_COMP_Init+0x20>
 80058d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80058da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058de:	e79a      	b.n	8005816 <HAL_COMP_Init+0x6a>
 80058e0:	ff007e0f 	.word	0xff007e0f
 80058e4:	40010200 	.word	0x40010200
 80058e8:	40010400 	.word	0x40010400
 80058ec:	20000680 	.word	0x20000680
 80058f0:	053e2d63 	.word	0x053e2d63

080058f4 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80058f4:	b1b0      	cbz	r0, 8005924 <HAL_CORDIC_Init+0x30>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058f6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 80058fa:	b510      	push	{r4, lr}
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005900:	4604      	mov	r4, r0
 8005902:	b153      	cbz	r3, 800591a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005904:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005906:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005908:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->pOutBuff = NULL;
 800590a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 800590e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005912:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005914:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 8005918:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800591a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800591e:	f7fe f847 	bl	80039b0 <HAL_CORDIC_MspInit>
 8005922:	e7ef      	b.n	8005904 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005924:	2001      	movs	r0, #1
}
 8005926:	4770      	bx	lr

08005928 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005928:	4a07      	ldr	r2, [pc, #28]	; (8005948 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800592a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800592c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005930:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005932:	0200      	lsls	r0, r0, #8
 8005934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005938:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800593c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005940:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005942:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <HAL_NVIC_SetPriority+0x64>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005954:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005956:	f1c3 0507 	rsb	r5, r3, #7
 800595a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005960:	bf28      	it	cs
 8005962:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005964:	2c06      	cmp	r4, #6
 8005966:	d919      	bls.n	800599c <HAL_NVIC_SetPriority+0x50>
 8005968:	3b03      	subs	r3, #3
 800596a:	f04f 34ff 	mov.w	r4, #4294967295
 800596e:	409c      	lsls	r4, r3
 8005970:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	40aa      	lsls	r2, r5
 800597a:	ea21 0102 	bic.w	r1, r1, r2
 800597e:	fa01 f203 	lsl.w	r2, r1, r3
 8005982:	4322      	orrs	r2, r4
 8005984:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8005986:	2800      	cmp	r0, #0
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	db0a      	blt.n	80059a2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800598c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005990:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005994:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005998:	bc30      	pop	{r4, r5}
 800599a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800599c:	2400      	movs	r4, #0
 800599e:	4623      	mov	r3, r4
 80059a0:	e7e8      	b.n	8005974 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_NVIC_SetPriority+0x68>)
 80059a4:	f000 000f 	and.w	r0, r0, #15
 80059a8:	4403      	add	r3, r0
 80059aa:	761a      	strb	r2, [r3, #24]
 80059ac:	bc30      	pop	{r4, r5}
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00
 80059b4:	e000ecfc 	.word	0xe000ecfc

080059b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80059b8:	2800      	cmp	r0, #0
 80059ba:	db07      	blt.n	80059cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059bc:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <HAL_NVIC_EnableIRQ+0x18>)
 80059be:	f000 011f 	and.w	r1, r0, #31
 80059c2:	2301      	movs	r3, #1
 80059c4:	0940      	lsrs	r0, r0, #5
 80059c6:	408b      	lsls	r3, r1
 80059c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000e100 	.word	0xe000e100

080059d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d4:	3801      	subs	r0, #1
 80059d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80059da:	d20e      	bcs.n	80059fa <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059de:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e0:	4c08      	ldr	r4, [pc, #32]	; (8005a04 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059e2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e4:	20f0      	movs	r0, #240	; 0xf0
 80059e6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059ea:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ec:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059f2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80059f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80059fa:	2001      	movs	r0, #1
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <HAL_SYSTICK_IRQHandler>:
{
 8005a0c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005a0e:	f7ff fffb 	bl	8005a08 <HAL_SYSTICK_Callback>
}
 8005a12:	bd08      	pop	{r3, pc}

08005a14 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005a14:	b188      	cbz	r0, 8005a3a <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a16:	7903      	ldrb	r3, [r0, #4]
{
 8005a18:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a1e:	4604      	mov	r4, r0
 8005a20:	b13b      	cbz	r3, 8005a32 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a22:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a24:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a26:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a28:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005a2a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a2c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005a2e:	7122      	strb	r2, [r4, #4]
}
 8005a30:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005a32:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005a34:	f7fd ffd4 	bl	80039e0 <HAL_DAC_MspInit>
 8005a38:	e7f3      	b.n	8005a22 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005a3a:	2001      	movs	r0, #1
}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a40:	7943      	ldrb	r3, [r0, #5]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f000 80c4 	beq.w	8005bd0 <HAL_DAC_ConfigChannel+0x190>
{
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005a4c:	688f      	ldr	r7, [r1, #8]
 8005a4e:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a50:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8005a52:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a54:	2f04      	cmp	r7, #4
 8005a56:	460e      	mov	r6, r1
 8005a58:	4605      	mov	r5, r0
  __HAL_LOCK(hdac);
 8005a5a:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a5c:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a5e:	d079      	beq.n	8005b54 <HAL_DAC_ConfigChannel+0x114>
 8005a60:	6803      	ldr	r3, [r0, #0]
 8005a62:	f004 0410 	and.w	r4, r4, #16
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a66:	69f2      	ldr	r2, [r6, #28]
 8005a68:	2a01      	cmp	r2, #1
 8005a6a:	d069      	beq.n	8005b40 <HAL_DAC_ConfigChannel+0x100>
 8005a6c:	e9d6 c005 	ldrd	ip, r0, [r6, #20]
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a72:	2107      	movs	r1, #7
 8005a74:	40a1      	lsls	r1, r4
 8005a76:	f422 4840 	bic.w	r8, r2, #49152	; 0xc000
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8005a7a:	07c2      	lsls	r2, r0, #31
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a7c:	ea6f 0101 	mvn.w	r1, r1
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8005a80:	d55a      	bpl.n	8005b38 <HAL_DAC_ConfigChannel+0xf8>
  {
    connectOnChip = 0x00000000UL;
 8005a82:	2000      	movs	r0, #0
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a88:	ea47 070c 	orr.w	r7, r7, ip
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005a8c:	40a2      	lsls	r2, r4
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005a8e:	f896 c004 	ldrb.w	ip, [r6, #4]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a92:	4307      	orrs	r7, r0
 8005a94:	ea01 0108 	and.w	r1, r1, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005a98:	43d2      	mvns	r2, r2
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005a9a:	7970      	ldrb	r0, [r6, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005a9c:	f1bc 0f01 	cmp.w	ip, #1
 8005aa0:	ea02 0201 	and.w	r2, r2, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005aa4:	f44f 7800 	mov.w	r8, #512	; 0x200
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005aa8:	6831      	ldr	r1, [r6, #0]
 8005aaa:	bf08      	it	eq
 8005aac:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005ab0:	fa08 f804 	lsl.w	r8, r8, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005ab4:	2801      	cmp	r0, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005ab6:	ea6f 0808 	mvn.w	r8, r8
 8005aba:	bf08      	it	eq
 8005abc:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005ac0:	2902      	cmp	r1, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005ac2:	ea08 0802 	and.w	r8, r8, r2
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005ac6:	f000 8085 	beq.w	8005bd4 <HAL_DAC_ConfigChannel+0x194>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005aca:	ea48 0801 	orr.w	r8, r8, r1
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ace:	40a7      	lsls	r7, r4
 8005ad0:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ad4:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ad6:	6818      	ldr	r0, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005ad8:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005adc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8005ae0:	40a6      	lsls	r6, r4
 8005ae2:	ea20 0006 	bic.w	r0, r0, r6
 8005ae6:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8005ae8:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005aea:	f640 76fe 	movw	r6, #4094	; 0xffe
 8005aee:	40a6      	lsls	r6, r4
 8005af0:	ea20 0606 	bic.w	r6, r0, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005af4:	fa01 f004 	lsl.w	r0, r1, r4
 8005af8:	4330      	orrs	r0, r6
  hdac->Instance->CR = tmpreg1;
 8005afa:	6018      	str	r0, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	26c0      	movs	r6, #192	; 0xc0
 8005b00:	40a6      	lsls	r6, r4
 8005b02:	ea20 0006 	bic.w	r0, r0, r6
 8005b06:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b08:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b0a:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005b0c:	f3c1 0183 	ubfx	r1, r1, #2, #4
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b10:	f640 760f 	movw	r6, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b14:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8005b18:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b1a:	fa06 f104 	lsl.w	r1, r6, r4
 8005b1e:	fa02 f404 	lsl.w	r4, r2, r4
 8005b22:	ea20 0201 	bic.w	r2, r0, r1
 8005b26:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b28:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b2a:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005b2c:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005b2e:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005b30:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8005b32:	716a      	strb	r2, [r5, #5]
}
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8005b38:	0782      	lsls	r2, r0, #30
 8005b3a:	d545      	bpl.n	8005bc8 <HAL_DAC_ConfigChannel+0x188>
    connectOnChip = DAC_MCR_MODE1_0;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7a1      	b.n	8005a84 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8005b40:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b42:	6a32      	ldr	r2, [r6, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005b44:	201f      	movs	r0, #31
 8005b46:	40a0      	lsls	r0, r4
 8005b48:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b4c:	40a2      	lsls	r2, r4
 8005b4e:	430a      	orrs	r2, r1
    hdac->Instance->CCR = tmpreg1;
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
 8005b52:	e78b      	b.n	8005a6c <HAL_DAC_ConfigChannel+0x2c>
    if (Channel == DAC_CHANNEL_1)
 8005b54:	b9bc      	cbnz	r4, 8005b86 <HAL_DAC_ConfigChannel+0x146>
      tickstart = HAL_GetTick();
 8005b56:	f7fe ff95 	bl	8004a84 <HAL_GetTick>
 8005b5a:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b5c:	e004      	b.n	8005b68 <HAL_DAC_ConfigChannel+0x128>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b5e:	f7fe ff91 	bl	8004a84 <HAL_GetTick>
 8005b62:	1bc0      	subs	r0, r0, r7
 8005b64:	2801      	cmp	r0, #1
 8005b66:	d83e      	bhi.n	8005be6 <HAL_DAC_ConfigChannel+0x1a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	0419      	lsls	r1, r3, #16
 8005b6e:	d4f6      	bmi.n	8005b5e <HAL_DAC_ConfigChannel+0x11e>
      HAL_Delay(1);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fe ff8d 	bl	8004a90 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b7c:	e00d      	b.n	8005b9a <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b7e:	f7fe ff81 	bl	8004a84 <HAL_GetTick>
 8005b82:	2801      	cmp	r0, #1
 8005b84:	d82f      	bhi.n	8005be6 <HAL_DAC_ConfigChannel+0x1a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dbf7      	blt.n	8005b7e <HAL_DAC_ConfigChannel+0x13e>
      HAL_Delay(1U);
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f7fe ff7e 	bl	8004a90 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005b9a:	f004 0410 	and.w	r4, r4, #16
 8005b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005ba2:	68b7      	ldr	r7, [r6, #8]
 8005ba4:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8005ba8:	40a0      	lsls	r0, r4
 8005baa:	ea22 0200 	bic.w	r2, r2, r0
 8005bae:	40a1      	lsls	r1, r4
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bb6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005bb8:	20ff      	movs	r0, #255	; 0xff
 8005bba:	40a0      	lsls	r0, r4
 8005bbc:	ea22 0200 	bic.w	r2, r2, r0
 8005bc0:	40a1      	lsls	r1, r4
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bc6:	e74e      	b.n	8005a66 <HAL_DAC_ConfigChannel+0x26>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005bc8:	fabc f08c 	clz	r0, ip
 8005bcc:	0940      	lsrs	r0, r0, #5
 8005bce:	e759      	b.n	8005a84 <HAL_DAC_ConfigChannel+0x44>
  __HAL_LOCK(hdac);
 8005bd0:	2002      	movs	r0, #2
}
 8005bd2:	4770      	bx	lr
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005bd4:	f001 f8dc 	bl	8006d90 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_DAC_ConfigChannel+0x1c8>)
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	d90c      	bls.n	8005bf8 <HAL_DAC_ConfigChannel+0x1b8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005bde:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	e773      	b.n	8005ace <HAL_DAC_ConfigChannel+0x8e>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005be6:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005be8:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bea:	f043 0308 	orr.w	r3, r3, #8
 8005bee:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8005bf0:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bf2:	712a      	strb	r2, [r5, #4]
}
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <HAL_DAC_ConfigChannel+0x1cc>)
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	4290      	cmp	r0, r2
 8005bfe:	f67f af66 	bls.w	8005ace <HAL_DAC_ConfigChannel+0x8e>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005c02:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 8005c06:	e762      	b.n	8005ace <HAL_DAC_ConfigChannel+0x8e>
 8005c08:	09896800 	.word	0x09896800
 8005c0c:	04c4b400 	.word	0x04c4b400

08005c10 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f000 80d2 	beq.w	8005dba <HAL_FDCAN_Init+0x1aa>
{
 8005c16:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c18:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80c4 	beq.w	8005db0 <HAL_FDCAN_Init+0x1a0>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	6993      	ldr	r3, [r2, #24]
 8005c2c:	f023 0310 	bic.w	r3, r3, #16
 8005c30:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c32:	f7fe ff27 	bl	8004a84 <HAL_GetTick>
 8005c36:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c38:	e005      	b.n	8005c46 <HAL_FDCAN_Init+0x36>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c3a:	f7fe ff23 	bl	8004a84 <HAL_GetTick>
 8005c3e:	1b40      	subs	r0, r0, r5
 8005c40:	280a      	cmp	r0, #10
 8005c42:	f200 80ac 	bhi.w	8005d9e <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	0711      	lsls	r1, r2, #28
 8005c4c:	d4f5      	bmi.n	8005c3a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c56:	f7fe ff15 	bl	8004a84 <HAL_GetTick>
 8005c5a:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c5c:	e005      	b.n	8005c6a <HAL_FDCAN_Init+0x5a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c5e:	f7fe ff11 	bl	8004a84 <HAL_GetTick>
 8005c62:	1b40      	subs	r0, r0, r5
 8005c64:	280a      	cmp	r0, #10
 8005c66:	f200 809a 	bhi.w	8005d9e <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	07d2      	lsls	r2, r2, #31
 8005c70:	d5f5      	bpl.n	8005c5e <HAL_FDCAN_Init+0x4e>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c72:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c74:	4958      	ldr	r1, [pc, #352]	; (8005dd8 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c76:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005c7a:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c7c:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005c7e:	f000 80a3 	beq.w	8005dc8 <HAL_FDCAN_Init+0x1b8>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c82:	7c22      	ldrb	r2, [r4, #16]
 8005c84:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	bf0c      	ite	eq
 8005c8a:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c8e:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8005c92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005c94:	7c62      	ldrb	r2, [r4, #17]
 8005c96:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	bf0c      	ite	eq
 8005c9c:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ca0:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8005ca4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005ca6:	7ca2      	ldrb	r2, [r4, #18]
 8005ca8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	bf0c      	ite	eq
 8005cae:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005cb2:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005cb8:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005cba:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005cbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cc2:	432a      	orrs	r2, r5
 8005cc4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005ccc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cce:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005cd0:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cd2:	f022 0210 	bic.w	r2, r2, #16
 8005cd6:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005cd8:	d071      	beq.n	8005dbe <HAL_FDCAN_Init+0x1ae>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005cda:	b179      	cbz	r1, 8005cfc <HAL_FDCAN_Init+0xec>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005cdc:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005cde:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ce0:	d076      	beq.n	8005dd0 <HAL_FDCAN_Init+0x1c0>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ce6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ce8:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005cea:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cec:	f042 0210 	orr.w	r2, r2, #16
 8005cf0:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005cf2:	d103      	bne.n	8005cfc <HAL_FDCAN_Init+0xec>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	f042 0220 	orr.w	r2, r2, #32
 8005cfa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cfc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d00:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d02:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d04:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d06:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d08:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005d0c:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d0e:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d10:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005d12:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d18:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d1c:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d1e:	d10e      	bne.n	8005d3e <HAL_FDCAN_Init+0x12e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d20:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005d24:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d28:	3a01      	subs	r2, #1
 8005d2a:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d2c:	3d01      	subs	r5, #1
 8005d2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d32:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d34:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005d36:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d3c:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d42:	6be5      	ldr	r5, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d46:	4825      	ldr	r0, [pc, #148]	; (8005ddc <HAL_FDCAN_Init+0x1cc>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005d48:	432a      	orrs	r2, r5
 8005d4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d52:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d54:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005d58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005d64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005d66:	4d1e      	ldr	r5, [pc, #120]	; (8005de0 <HAL_FDCAN_Init+0x1d0>)
 8005d68:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d6e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d76:	491b      	ldr	r1, [pc, #108]	; (8005de4 <HAL_FDCAN_Init+0x1d4>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <HAL_FDCAN_Init+0x1dc>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005d7c:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d7e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d82:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48
 8005d86:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f005 f896 	bl	800aebc <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d90:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d92:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d94:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d96:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d98:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005da0:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 8005da8:	2001      	movs	r0, #1
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005daa:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005db0:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005db4:	f7fd fe46 	bl	8003a44 <HAL_FDCAN_MspInit>
 8005db8:	e736      	b.n	8005c28 <HAL_FDCAN_Init+0x18>
    return HAL_ERROR;
 8005dba:	2001      	movs	r0, #1
}
 8005dbc:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	f042 0204 	orr.w	r2, r2, #4
 8005dc4:	619a      	str	r2, [r3, #24]
 8005dc6:	e799      	b.n	8005cfc <HAL_FDCAN_Init+0xec>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <HAL_FDCAN_Init+0x1e0>)
 8005dca:	6861      	ldr	r1, [r4, #4]
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	e758      	b.n	8005c82 <HAL_FDCAN_Init+0x72>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005dd0:	f042 0220 	orr.w	r2, r2, #32
 8005dd4:	619a      	str	r2, [r3, #24]
 8005dd6:	e791      	b.n	8005cfc <HAL_FDCAN_Init+0xec>
 8005dd8:	40006400 	.word	0x40006400
 8005ddc:	4000a400 	.word	0x4000a400
 8005de0:	4000a470 	.word	0x4000a470
 8005de4:	4000a588 	.word	0x4000a588
 8005de8:	4000a678 	.word	0x4000a678
 8005dec:	4000a660 	.word	0x4000a660
 8005df0:	40006500 	.word	0x40006500

08005df4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005df4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8005df8:	2a01      	cmp	r2, #1
{
 8005dfa:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005dfc:	d005      	beq.n	8005e0a <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005dfe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005e00:	f042 0204 	orr.w	r2, r2, #4
 8005e04:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005e06:	2001      	movs	r0, #1
}
 8005e08:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e0a:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e12:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005e14:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8005e1c:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005e1e:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <HAL_FDCAN_GetRxMessage>:
{
 8005e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e26:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8005e2a:	2c02      	cmp	r4, #2
 8005e2c:	d005      	beq.n	8005e3a <HAL_FDCAN_GetRxMessage+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e2e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e30:	f043 0308 	orr.w	r3, r3, #8
 8005e34:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
}
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e3a:	2940      	cmp	r1, #64	; 0x40
 8005e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e40:	d053      	beq.n	8005eea <HAL_FDCAN_GetRxMessage+0xc6>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005e42:	f8de 4098 	ldr.w	r4, [lr, #152]	; 0x98
 8005e46:	0724      	lsls	r4, r4, #28
 8005e48:	d049      	beq.n	8005ede <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005e4a:	f8de 5098 	ldr.w	r5, [lr, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005e4e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005e50:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005e54:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8005e58:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e5c:	6825      	ldr	r5, [r4, #0]
 8005e5e:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8005e62:	6055      	str	r5, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d14e      	bne.n	8005f06 <HAL_FDCAN_GetRxMessage+0xe2>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005e68:	6825      	ldr	r5, [r4, #0]
 8005e6a:	f3c5 458a 	ubfx	r5, r5, #18, #11
 8005e6e:	6015      	str	r5, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e70:	6825      	ldr	r5, [r4, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e72:	4f27      	ldr	r7, [pc, #156]	; (8005f10 <HAL_FDCAN_GetRxMessage+0xec>)
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e74:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
 8005e78:	6095      	str	r5, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8005e80:	6115      	str	r5, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e82:	88a5      	ldrh	r5, [r4, #4]
 8005e84:	61d5      	str	r5, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005e86:	6865      	ldr	r5, [r4, #4]
 8005e88:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
 8005e8c:	60d5      	str	r5, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e8e:	6866      	ldr	r6, [r4, #4]
 8005e90:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8005e94:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8005e9c:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005e9e:	79e6      	ldrb	r6, [r4, #7]
 8005ea0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005ea4:	0c2d      	lsrs	r5, r5, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005ea6:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005ea8:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005eaa:	5d7d      	ldrb	r5, [r7, r5]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005eac:	0ff6      	lsrs	r6, r6, #31
 8005eae:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005eb0:	b16d      	cbz	r5, 8005ece <HAL_FDCAN_GetRxMessage+0xaa>
 8005eb2:	3407      	adds	r4, #7
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	2500      	movs	r5, #0
      pRxData[ByteCounter] = pData[ByteCounter];
 8005eb8:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8005ebc:	f803 6f01 	strb.w	r6, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005ec0:	89d6      	ldrh	r6, [r2, #14]
 8005ec2:	5dbe      	ldrb	r6, [r7, r6]
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	42ae      	cmp	r6, r5
 8005ec8:	d8f6      	bhi.n	8005eb8 <HAL_FDCAN_GetRxMessage+0x94>
 8005eca:	f8d0 e000 	ldr.w	lr, [r0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ece:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005ed0:	bf0c      	ite	eq
 8005ed2:	f8ce c094 	streq.w	ip, [lr, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8005ed6:	f8ce c09c 	strne.w	ip, [lr, #156]	; 0x9c
    return HAL_OK;
 8005eda:	2000      	movs	r0, #0
}
 8005edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ede:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8005ee6:	2001      	movs	r0, #1
}
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005eea:	f8de 4090 	ldr.w	r4, [lr, #144]	; 0x90
 8005eee:	0725      	lsls	r5, r4, #28
 8005ef0:	d0f5      	beq.n	8005ede <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ef2:	f8de 5090 	ldr.w	r5, [lr, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005ef6:	6c84      	ldr	r4, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ef8:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005efc:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8005f00:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f04:	e7aa      	b.n	8005e5c <HAL_FDCAN_GetRxMessage+0x38>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8005f0c:	e7af      	b.n	8005e6e <HAL_FDCAN_GetRxMessage+0x4a>
 8005f0e:	bf00      	nop
 8005f10:	0800d0f4 	.word	0x0800d0f4

08005f14 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f14:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d905      	bls.n	8005f2a <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f1e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005f26:	2001      	movs	r0, #1
}
 8005f28:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005f2a:	6803      	ldr	r3, [r0, #0]
{
 8005f2c:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005f2e:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005f32:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005f34:	d02f      	beq.n	8005f96 <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f36:	07c4      	lsls	r4, r0, #31
 8005f38:	d42d      	bmi.n	8005f96 <HAL_FDCAN_ActivateNotification+0x82>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f3a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8005f3c:	f044 0401 	orr.w	r4, r4, #1
 8005f40:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005f42:	b10d      	cbz	r5, 8005f48 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f44:	07c5      	lsls	r5, r0, #31
 8005f46:	d40e      	bmi.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005f48:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005f4c:	d001      	beq.n	8005f52 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f4e:	0784      	lsls	r4, r0, #30
 8005f50:	d409      	bmi.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005f52:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005f56:	d001      	beq.n	8005f5c <HAL_FDCAN_ActivateNotification+0x48>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f58:	0745      	lsls	r5, r0, #29
 8005f5a:	d404      	bmi.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005f5c:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005f60:	d039      	beq.n	8005fd6 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f62:	0704      	lsls	r4, r0, #28
 8005f64:	d537      	bpl.n	8005fd6 <HAL_FDCAN_ActivateNotification+0xc2>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005f66:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005f68:	f040 0002 	orr.w	r0, r0, #2
 8005f6c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005f6e:	060c      	lsls	r4, r1, #24
 8005f70:	d504      	bpl.n	8005f7c <HAL_FDCAN_ActivateNotification+0x68>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005f72:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8005f76:	4310      	orrs	r0, r2
 8005f78:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f7c:	05c8      	lsls	r0, r1, #23
 8005f7e:	d504      	bpl.n	8005f8a <HAL_FDCAN_ActivateNotification+0x76>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005f80:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005f84:	4302      	orrs	r2, r0
 8005f86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f8c:	4311      	orrs	r1, r2
    return HAL_OK;
 8005f8e:	2000      	movs	r0, #0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f90:	6559      	str	r1, [r3, #84]	; 0x54
}
 8005f92:	bc30      	pop	{r4, r5}
 8005f94:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f96:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005f9a:	d001      	beq.n	8005fa0 <HAL_FDCAN_ActivateNotification+0x8c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005f9c:	0784      	lsls	r4, r0, #30
 8005f9e:	d5cc      	bpl.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
 8005fa0:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005fa4:	d114      	bne.n	8005fd0 <HAL_FDCAN_ActivateNotification+0xbc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005fa6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005faa:	d001      	beq.n	8005fb0 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005fac:	0704      	lsls	r4, r0, #28
 8005fae:	d5c4      	bpl.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
 8005fb0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005fb4:	d001      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005fb6:	06c4      	lsls	r4, r0, #27
 8005fb8:	d5bf      	bpl.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
 8005fba:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005fbe:	d001      	beq.n	8005fc4 <HAL_FDCAN_ActivateNotification+0xb0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005fc0:	0684      	lsls	r4, r0, #26
 8005fc2:	d5ba      	bpl.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
 8005fc4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005fc8:	d0bb      	beq.n	8005f42 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005fca:	0644      	lsls	r4, r0, #25
 8005fcc:	d4b9      	bmi.n	8005f42 <HAL_FDCAN_ActivateNotification+0x2e>
 8005fce:	e7b4      	b.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005fd0:	0744      	lsls	r4, r0, #29
 8005fd2:	d5b2      	bpl.n	8005f3a <HAL_FDCAN_ActivateNotification+0x26>
 8005fd4:	e7e7      	b.n	8005fa6 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005fd6:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005fda:	d001      	beq.n	8005fe0 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005fdc:	06c5      	lsls	r5, r0, #27
 8005fde:	d4c2      	bmi.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005fe0:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005fe4:	d001      	beq.n	8005fea <HAL_FDCAN_ActivateNotification+0xd6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005fe6:	0684      	lsls	r4, r0, #26
 8005fe8:	d4bd      	bmi.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005fea:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005fee:	d0be      	beq.n	8005f6e <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005ff0:	0645      	lsls	r5, r0, #25
 8005ff2:	d5bc      	bpl.n	8005f6e <HAL_FDCAN_ActivateNotification+0x5a>
 8005ff4:	e7b7      	b.n	8005f66 <HAL_FDCAN_ActivateNotification+0x52>
 8005ff6:	bf00      	nop

08005ff8 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <HAL_FDCAN_RxFifo1Callback>:
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop

08006000 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop

08006008 <HAL_FDCAN_TxBufferAbortCallback>:
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop

0800600c <HAL_FDCAN_TimestampWraparoundCallback>:
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop

08006010 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop

08006014 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <HAL_FDCAN_ErrorCallback>:
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop

0800601c <HAL_FDCAN_ErrorStatusCallback>:
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <HAL_FDCAN_IRQHandler>:
{
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006024:	6803      	ldr	r3, [r0, #0]
 8006026:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800602a:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800602e:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006032:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006034:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006036:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006038:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 800603a:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800603e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006040:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006044:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006046:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800604a:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 800604e:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006052:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006054:	0652      	lsls	r2, r2, #25
{
 8006056:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006058:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 800605c:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006060:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006064:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006068:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800606c:	d503      	bpl.n	8006076 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800606e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006070:	0651      	lsls	r1, r2, #25
 8006072:	f100 8087 	bmi.w	8006184 <HAL_FDCAN_IRQHandler+0x164>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006078:	05d2      	lsls	r2, r2, #23
 800607a:	d503      	bpl.n	8006084 <HAL_FDCAN_IRQHandler+0x64>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800607c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607e:	05d0      	lsls	r0, r2, #23
 8006080:	f100 8086 	bmi.w	8006190 <HAL_FDCAN_IRQHandler+0x170>
  if (TxEventFifoITs != 0U)
 8006084:	f1b9 0f00 	cmp.w	r9, #0
 8006088:	d14d      	bne.n	8006126 <HAL_FDCAN_IRQHandler+0x106>
  if (RxFifo0ITs != 0U)
 800608a:	f1b8 0f00 	cmp.w	r8, #0
 800608e:	d13a      	bne.n	8006106 <HAL_FDCAN_IRQHandler+0xe6>
  if (RxFifo1ITs != 0U)
 8006090:	2f00      	cmp	r7, #0
 8006092:	d141      	bne.n	8006118 <HAL_FDCAN_IRQHandler+0xf8>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006096:	0591      	lsls	r1, r2, #22
 8006098:	d502      	bpl.n	80060a0 <HAL_FDCAN_IRQHandler+0x80>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800609a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800609c:	0592      	lsls	r2, r2, #22
 800609e:	d455      	bmi.n	800614c <HAL_FDCAN_IRQHandler+0x12c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80060a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060a2:	0617      	lsls	r7, r2, #24
 80060a4:	d502      	bpl.n	80060ac <HAL_FDCAN_IRQHandler+0x8c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80060a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a8:	0610      	lsls	r0, r2, #24
 80060aa:	d457      	bmi.n	800615c <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80060ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ae:	0491      	lsls	r1, r2, #18
 80060b0:	d502      	bpl.n	80060b8 <HAL_FDCAN_IRQHandler+0x98>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80060b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b4:	0492      	lsls	r2, r2, #18
 80060b6:	d45d      	bmi.n	8006174 <HAL_FDCAN_IRQHandler+0x154>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80060b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ba:	0417      	lsls	r7, r2, #16
 80060bc:	d502      	bpl.n	80060c4 <HAL_FDCAN_IRQHandler+0xa4>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80060be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c0:	0410      	lsls	r0, r2, #16
 80060c2:	d43b      	bmi.n	800613c <HAL_FDCAN_IRQHandler+0x11c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80060c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c6:	0451      	lsls	r1, r2, #17
 80060c8:	d509      	bpl.n	80060de <HAL_FDCAN_IRQHandler+0xbe>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80060ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060cc:	0452      	lsls	r2, r2, #17
 80060ce:	d506      	bpl.n	80060de <HAL_FDCAN_IRQHandler+0xbe>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80060d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80060d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80060d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060dc:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80060de:	b966      	cbnz	r6, 80060fa <HAL_FDCAN_IRQHandler+0xda>
  if (Errors != 0U)
 80060e0:	b125      	cbz	r5, 80060ec <HAL_FDCAN_IRQHandler+0xcc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80060e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060e8:	431d      	orrs	r5, r3
 80060ea:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80060ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060ee:	b113      	cbz	r3, 80060f6 <HAL_FDCAN_IRQHandler+0xd6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ff91 	bl	8006018 <HAL_FDCAN_ErrorCallback>
}
 80060f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80060fa:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80060fc:	4631      	mov	r1, r6
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff ff8c 	bl	800601c <HAL_FDCAN_ErrorStatusCallback>
 8006104:	e7ec      	b.n	80060e0 <HAL_FDCAN_IRQHandler+0xc0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006106:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800610a:	4641      	mov	r1, r8
 800610c:	4620      	mov	r0, r4
 800610e:	f7fb f817 	bl	8001140 <HAL_FDCAN_RxFifo0Callback>
 8006112:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006114:	2f00      	cmp	r7, #0
 8006116:	d0bd      	beq.n	8006094 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006118:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800611a:	4639      	mov	r1, r7
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ff6d 	bl	8005ffc <HAL_FDCAN_RxFifo1Callback>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	e7b6      	b.n	8006094 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006126:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800612a:	4649      	mov	r1, r9
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff ff63 	bl	8005ff8 <HAL_FDCAN_TxEventFifoCallback>
 8006132:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006134:	f1b8 0f00 	cmp.w	r8, #0
 8006138:	d0aa      	beq.n	8006090 <HAL_FDCAN_IRQHandler+0x70>
 800613a:	e7e4      	b.n	8006106 <HAL_FDCAN_IRQHandler+0xe6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800613c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff ff64 	bl	8006010 <HAL_FDCAN_TimeoutOccurredCallback>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	e7bb      	b.n	80060c4 <HAL_FDCAN_IRQHandler+0xa4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006152:	4620      	mov	r0, r4
 8006154:	f7ff ff54 	bl	8006000 <HAL_FDCAN_TxFifoEmptyCallback>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	e7a1      	b.n	80060a0 <HAL_FDCAN_IRQHandler+0x80>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800615c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006160:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006164:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006166:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006168:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff ff4a 	bl	8006004 <HAL_FDCAN_TxBufferCompleteCallback>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	e79b      	b.n	80060ac <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006178:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff ff46 	bl	800600c <HAL_FDCAN_TimestampWraparoundCallback>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	e799      	b.n	80060b8 <HAL_FDCAN_IRQHandler+0x98>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006184:	2240      	movs	r2, #64	; 0x40
 8006186:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006188:	f7ff ff44 	bl	8006014 <HAL_FDCAN_HighPriorityMessageCallback>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	e772      	b.n	8006076 <HAL_FDCAN_IRQHandler+0x56>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006190:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006194:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006198:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800619c:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800619e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff ff31 	bl	8006008 <HAL_FDCAN_TxBufferAbortCallback>
 80061a6:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	f43f af6d 	beq.w	800608a <HAL_FDCAN_IRQHandler+0x6a>
 80061b0:	e7b9      	b.n	8006126 <HAL_FDCAN_IRQHandler+0x106>
 80061b2:	bf00      	nop

080061b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061b8:	f8d1 e000 	ldr.w	lr, [r1]
{
 80061bc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061be:	f1be 0f00 	cmp.w	lr, #0
 80061c2:	f000 8081 	beq.w	80062c8 <HAL_GPIO_Init+0x114>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80061c6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8006368 <HAL_GPIO_Init+0x1b4>
 80061ca:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 80061cc:	2600      	movs	r6, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061ce:	2301      	movs	r3, #1
 80061d0:	fa03 f206 	lsl.w	r2, r3, r6
    if (iocurrent != 0x00u)
 80061d4:	ea12 070e 	ands.w	r7, r2, lr
 80061d8:	d072      	beq.n	80062c0 <HAL_GPIO_Init+0x10c>
 80061da:	e9d8 1401 	ldrd	r1, r4, [r8, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061de:	f021 0b10 	bic.w	fp, r1, #16
 80061e2:	fa06 fc03 	lsl.w	ip, r6, r3
 80061e6:	f10b 35ff 	add.w	r5, fp, #4294967295
 80061ea:	2303      	movs	r3, #3
 80061ec:	fa03 fa0c 	lsl.w	sl, r3, ip
 80061f0:	2d01      	cmp	r5, #1
 80061f2:	ea6f 0a0a 	mvn.w	sl, sl
 80061f6:	fa04 f40c 	lsl.w	r4, r4, ip
 80061fa:	d968      	bls.n	80062ce <HAL_GPIO_Init+0x11a>
      temp = GPIOx->PUPDR;
 80061fc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061fe:	ea0a 0303 	and.w	r3, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006202:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8006204:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8006206:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006208:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800620c:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006210:	fa03 f30c 	lsl.w	r3, r3, ip
 8006214:	ea43 030a 	orr.w	r3, r3, sl
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006218:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 800621a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800621c:	d550      	bpl.n	80062c0 <HAL_GPIO_Init+0x10c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621e:	4a4c      	ldr	r2, [pc, #304]	; (8006350 <HAL_GPIO_Init+0x19c>)
 8006220:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6613      	str	r3, [r2, #96]	; 0x60
 8006228:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800622a:	f026 0403 	bic.w	r4, r6, #3
 800622e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800623a:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800623c:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006240:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006242:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	220f      	movs	r2, #15
 8006248:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800624a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800624e:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006252:	d013      	beq.n	800627c <HAL_GPIO_Init+0xc8>
 8006254:	4d3f      	ldr	r5, [pc, #252]	; (8006354 <HAL_GPIO_Init+0x1a0>)
 8006256:	42a8      	cmp	r0, r5
 8006258:	d06b      	beq.n	8006332 <HAL_GPIO_Init+0x17e>
 800625a:	4d3f      	ldr	r5, [pc, #252]	; (8006358 <HAL_GPIO_Init+0x1a4>)
 800625c:	42a8      	cmp	r0, r5
 800625e:	d063      	beq.n	8006328 <HAL_GPIO_Init+0x174>
 8006260:	4d3e      	ldr	r5, [pc, #248]	; (800635c <HAL_GPIO_Init+0x1a8>)
 8006262:	42a8      	cmp	r0, r5
 8006264:	d06a      	beq.n	800633c <HAL_GPIO_Init+0x188>
 8006266:	4d3e      	ldr	r5, [pc, #248]	; (8006360 <HAL_GPIO_Init+0x1ac>)
 8006268:	42a8      	cmp	r0, r5
 800626a:	d06c      	beq.n	8006346 <HAL_GPIO_Init+0x192>
 800626c:	4d3d      	ldr	r5, [pc, #244]	; (8006364 <HAL_GPIO_Init+0x1b0>)
 800626e:	42a8      	cmp	r0, r5
 8006270:	bf0c      	ite	eq
 8006272:	2505      	moveq	r5, #5
 8006274:	2506      	movne	r5, #6
 8006276:	fa05 f303 	lsl.w	r3, r5, r3
 800627a:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800627c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR1;
 800627e:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
 8006282:	43fa      	mvns	r2, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006284:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 8006286:	bf54      	ite	pl
 8006288:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800628a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 800628c:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR1;
 8006290:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006294:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 8006296:	bf54      	ite	pl
 8006298:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800629a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 800629c:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062a4:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80062a6:	bf54      	ite	pl
 80062a8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80062aa:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 80062ac:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR1;
 80062b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062b4:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 80062b6:	bf54      	ite	pl
 80062b8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80062ba:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 80062bc:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 80062c0:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062c2:	fa3e f306 	lsrs.w	r3, lr, r6
 80062c6:	d182      	bne.n	80061ce <HAL_GPIO_Init+0x1a>
  }
}
 80062c8:	b003      	add	sp, #12
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80062ce:	6883      	ldr	r3, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062d0:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062d4:	ea03 030a 	and.w	r3, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80062dc:	431d      	orrs	r5, r3
        GPIOx->OSPEEDR = temp;
 80062de:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80062e0:	6843      	ldr	r3, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80062e2:	f3c1 1500 	ubfx	r5, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062e6:	ea23 0302 	bic.w	r3, r3, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80062ea:	462a      	mov	r2, r5
 80062ec:	40b2      	lsls	r2, r6
 80062ee:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 80062f0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80062f2:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062f4:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062f8:	431c      	orrs	r4, r3
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062fa:	f1bb 0f02 	cmp.w	fp, #2
      GPIOx->PUPDR = temp;
 80062fe:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006300:	d181      	bne.n	8006206 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 8006302:	08f4      	lsrs	r4, r6, #3
 8006304:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006308:	f006 0307 	and.w	r3, r6, #7
        temp = GPIOx->AFR[position >> 3U];
 800630c:	6a25      	ldr	r5, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800630e:	f8d8 2010 	ldr.w	r2, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	f04f 0b0f 	mov.w	fp, #15
 8006318:	fa0b fb03 	lsl.w	fp, fp, r3
 800631c:	ea25 050b 	bic.w	r5, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006320:	409a      	lsls	r2, r3
 8006322:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 8006324:	6222      	str	r2, [r4, #32]
 8006326:	e76e      	b.n	8006206 <HAL_GPIO_Init+0x52>
 8006328:	2502      	movs	r5, #2
 800632a:	fa05 f303 	lsl.w	r3, r5, r3
 800632e:	431a      	orrs	r2, r3
 8006330:	e7a4      	b.n	800627c <HAL_GPIO_Init+0xc8>
 8006332:	2501      	movs	r5, #1
 8006334:	fa05 f303 	lsl.w	r3, r5, r3
 8006338:	431a      	orrs	r2, r3
 800633a:	e79f      	b.n	800627c <HAL_GPIO_Init+0xc8>
 800633c:	2503      	movs	r5, #3
 800633e:	fa05 f303 	lsl.w	r3, r5, r3
 8006342:	431a      	orrs	r2, r3
 8006344:	e79a      	b.n	800627c <HAL_GPIO_Init+0xc8>
 8006346:	2504      	movs	r5, #4
 8006348:	fa05 f303 	lsl.w	r3, r5, r3
 800634c:	431a      	orrs	r2, r3
 800634e:	e795      	b.n	800627c <HAL_GPIO_Init+0xc8>
 8006350:	40021000 	.word	0x40021000
 8006354:	48000400 	.word	0x48000400
 8006358:	48000800 	.word	0x48000800
 800635c:	48000c00 	.word	0x48000c00
 8006360:	48001000 	.word	0x48001000
 8006364:	48001400 	.word	0x48001400
 8006368:	40010400 	.word	0x40010400

0800636c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800636c:	b90a      	cbnz	r2, 8006372 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800636e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006370:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006372:	6181      	str	r1, [r0, #24]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006378:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800637a:	ea01 0203 	and.w	r2, r1, r3
 800637e:	ea21 0103 	bic.w	r1, r1, r3
 8006382:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006386:	6181      	str	r1, [r0, #24]
}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800638c:	2800      	cmp	r0, #0
 800638e:	d05c      	beq.n	800644a <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006390:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006394:	2b05      	cmp	r3, #5
 8006396:	d058      	beq.n	800644a <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006398:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800639c:	2b02      	cmp	r3, #2
 800639e:	d054      	beq.n	800644a <HAL_OPAMP_Init+0xbe>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a0:	4b3a      	ldr	r3, [pc, #232]	; (800648c <HAL_OPAMP_Init+0x100>)
{
 80063a2:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	661a      	str	r2, [r3, #96]	; 0x60
 80063ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 80063ae:	b082      	sub	sp, #8
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80063b8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80063bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d044      	beq.n	800644e <HAL_OPAMP_Init+0xc2>
 80063c4:	4604      	mov	r4, r0

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80063c6:	f7fd fb95 	bl	8003af4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	f023 0220 	bic.w	r2, r3, #32
 80063d0:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80063d2:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80063d4:	d041      	beq.n	800645a <HAL_OPAMP_Init+0xce>
 80063d6:	6860      	ldr	r0, [r4, #4]
 80063d8:	68e6      	ldr	r6, [r4, #12]
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80063da:	6811      	ldr	r1, [r2, #0]
 80063dc:	6925      	ldr	r5, [r4, #16]
 80063de:	4303      	orrs	r3, r0
 80063e0:	4333      	orrs	r3, r6
 80063e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80063e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063e6:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80063e8:	f021 0110 	bic.w	r1, r1, #16
 80063ec:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80063ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80063f0:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80063f2:	4333      	orrs	r3, r6
 80063f4:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
 80063f8:	432b      	orrs	r3, r5
 80063fa:	4925      	ldr	r1, [pc, #148]	; (8006490 <HAL_OPAMP_Init+0x104>)
 80063fc:	6815      	ldr	r5, [r2, #0]
 80063fe:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8006402:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006406:	7d20      	ldrb	r0, [r4, #20]
 8006408:	4029      	ands	r1, r5
 800640a:	2801      	cmp	r0, #1
 800640c:	ea43 0301 	orr.w	r3, r3, r1
 8006410:	bf14      	ite	ne
 8006412:	2100      	movne	r1, #0
 8006414:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8006418:	430b      	orrs	r3, r1
 800641a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800641c:	6993      	ldr	r3, [r2, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	db09      	blt.n	8006436 <HAL_OPAMP_Init+0xaa>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006422:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8006426:	6a20      	ldr	r0, [r4, #32]
 8006428:	6991      	ldr	r1, [r2, #24]
 800642a:	432b      	orrs	r3, r5
 800642c:	4303      	orrs	r3, r0
 800642e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006432:	430b      	orrs	r3, r1
 8006434:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006436:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800643a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800643e:	b94b      	cbnz	r3, 8006454 <HAL_OPAMP_Init+0xc8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006440:	2301      	movs	r3, #1
 8006442:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8006446:	b002      	add	sp, #8
 8006448:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800644a:	2001      	movs	r0, #1
}
 800644c:	4770      	bx	lr
      hopamp->Lock = HAL_UNLOCKED;
 800644e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 8006452:	e7b7      	b.n	80063c4 <HAL_OPAMP_Init+0x38>
    return status;
 8006454:	2000      	movs	r0, #0
}
 8006456:	b002      	add	sp, #8
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	6920      	ldr	r0, [r4, #16]
 8006460:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006462:	4333      	orrs	r3, r6
 8006464:	4303      	orrs	r3, r0
 8006466:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 800646a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 800646c:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 800646e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8006470:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8006472:	4303      	orrs	r3, r0
 8006474:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006476:	6816      	ldr	r6, [r2, #0]
 8006478:	4905      	ldr	r1, [pc, #20]	; (8006490 <HAL_OPAMP_Init+0x104>)
 800647a:	432b      	orrs	r3, r5
 800647c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800647e:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8006482:	4031      	ands	r1, r6
 8006484:	7d20      	ldrb	r0, [r4, #20]
 8006486:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800648a:	e7be      	b.n	800640a <HAL_OPAMP_Init+0x7e>
 800648c:	40021000 	.word	0x40021000
 8006490:	e0003e11 	.word	0xe0003e11

08006494 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006494:	4a3b      	ldr	r2, [pc, #236]	; (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8006496:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006498:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800649a:	b968      	cbnz	r0, 80064b8 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800649c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a4:	d014      	beq.n	80064d0 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80064aa:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80064b6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80064bc:	d02f      	beq.n	800651e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064c6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80064c8:	2000      	movs	r0, #0
}
 80064ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ce:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064d0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80064d6:	482d      	ldr	r0, [pc, #180]	; (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064d8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80064dc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064e0:	6811      	ldr	r1, [r2, #0]
 80064e2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80064e6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80064ea:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064ec:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ee:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064f0:	2332      	movs	r3, #50	; 0x32
 80064f2:	fb03 f304 	mul.w	r3, r3, r4
 80064f6:	fba0 0303 	umull	r0, r3, r0, r3
 80064fa:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064fc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064fe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006502:	d506      	bpl.n	8006512 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006504:	e000      	b.n	8006508 <HAL_PWREx_ControlVoltageScaling+0x74>
 8006506:	b123      	cbz	r3, 8006512 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006508:	6951      	ldr	r1, [r2, #20]
 800650a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800650c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006510:	d4f9      	bmi.n	8006506 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	055c      	lsls	r4, r3, #21
 8006518:	d5d6      	bpl.n	80064c8 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800651a:	2003      	movs	r0, #3
 800651c:	e7d5      	b.n	80064ca <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800651e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006526:	d009      	beq.n	800653c <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006528:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 800652c:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006534:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006536:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800653a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800653c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006542:	4812      	ldr	r0, [pc, #72]	; (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006544:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006548:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800654c:	6811      	ldr	r1, [r2, #0]
 800654e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006552:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006556:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006558:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800655a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800655c:	2332      	movs	r3, #50	; 0x32
 800655e:	fb03 f304 	mul.w	r3, r3, r4
 8006562:	fba0 0303 	umull	r0, r3, r0, r3
 8006566:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006568:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800656a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800656e:	d5d0      	bpl.n	8006512 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006570:	e001      	b.n	8006576 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0cd      	beq.n	8006512 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006576:	6951      	ldr	r1, [r2, #20]
 8006578:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800657a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800657e:	d5c8      	bpl.n	8006512 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006580:	e7f7      	b.n	8006572 <HAL_PWREx_ControlVoltageScaling+0xde>
 8006582:	bf00      	nop
 8006584:	40007000 	.word	0x40007000
 8006588:	20000680 	.word	0x20000680
 800658c:	431bde83 	.word	0x431bde83

08006590 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006590:	4a02      	ldr	r2, [pc, #8]	; (800659c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006592:	6893      	ldr	r3, [r2, #8]
 8006594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006598:	6093      	str	r3, [r2, #8]
}
 800659a:	4770      	bx	lr
 800659c:	40007000 	.word	0x40007000

080065a0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f000 816c 	beq.w	800687e <HAL_RCC_OscConfig+0x2de>
{
 80065a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065aa:	6803      	ldr	r3, [r0, #0]
 80065ac:	07d9      	lsls	r1, r3, #31
{
 80065ae:	b082      	sub	sp, #8
 80065b0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b2:	d52d      	bpl.n	8006610 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065b4:	49b7      	ldr	r1, [pc, #732]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 80065b6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065b8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ba:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80065be:	2a0c      	cmp	r2, #12
 80065c0:	f000 80f5 	beq.w	80067ae <HAL_RCC_OscConfig+0x20e>
 80065c4:	2a08      	cmp	r2, #8
 80065c6:	f000 80f7 	beq.w	80067b8 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	f000 812e 	beq.w	8006830 <HAL_RCC_OscConfig+0x290>
 80065d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d8:	f000 81e0 	beq.w	800699c <HAL_RCC_OscConfig+0x3fc>
 80065dc:	4dad      	ldr	r5, [pc, #692]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 80065de:	682a      	ldr	r2, [r5, #0]
 80065e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	682a      	ldr	r2, [r5, #0]
 80065e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065ec:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f040 8123 	bne.w	800683a <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fe fa46 	bl	8004a84 <HAL_GetTick>
 80065f8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065fa:	e005      	b.n	8006608 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065fc:	f7fe fa42 	bl	8004a84 <HAL_GetTick>
 8006600:	1b80      	subs	r0, r0, r6
 8006602:	2864      	cmp	r0, #100	; 0x64
 8006604:	f200 8137 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	039f      	lsls	r7, r3, #14
 800660c:	d4f6      	bmi.n	80065fc <HAL_RCC_OscConfig+0x5c>
 800660e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006610:	079e      	lsls	r6, r3, #30
 8006612:	f100 80a5 	bmi.w	8006760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006616:	071a      	lsls	r2, r3, #28
 8006618:	d519      	bpl.n	800664e <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800661a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800661c:	4d9d      	ldr	r5, [pc, #628]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 80d7 	beq.w	80067d2 <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 8006624:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006630:	f7fe fa28 	bl	8004a84 <HAL_GetTick>
 8006634:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006636:	e005      	b.n	8006644 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006638:	f7fe fa24 	bl	8004a84 <HAL_GetTick>
 800663c:	1b80      	subs	r0, r0, r6
 800663e:	2802      	cmp	r0, #2
 8006640:	f200 8119 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006644:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006648:	079f      	lsls	r7, r3, #30
 800664a:	d5f5      	bpl.n	8006638 <HAL_RCC_OscConfig+0x98>
 800664c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664e:	0759      	lsls	r1, r3, #29
 8006650:	d53f      	bpl.n	80066d2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006652:	4b90      	ldr	r3, [pc, #576]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 8006654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006656:	00d2      	lsls	r2, r2, #3
 8006658:	f100 812b 	bmi.w	80068b2 <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800665e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006662:	659a      	str	r2, [r3, #88]	; 0x58
 8006664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800666e:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006670:	4d89      	ldr	r5, [pc, #548]	; (8006898 <HAL_RCC_OscConfig+0x2f8>)
 8006672:	682a      	ldr	r2, [r5, #0]
 8006674:	05d7      	lsls	r7, r2, #23
 8006676:	f140 80ee 	bpl.w	8006856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f000 811a 	beq.w	80068b6 <HAL_RCC_OscConfig+0x316>
 8006682:	2b05      	cmp	r3, #5
 8006684:	f000 81cb 	beq.w	8006a1e <HAL_RCC_OscConfig+0x47e>
 8006688:	4d82      	ldr	r5, [pc, #520]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 800668a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8006696:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 810e 	bne.w	80068c4 <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fe f9ec 	bl	8004a84 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80066b0:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066b2:	e006      	b.n	80066c2 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b4:	f7fe f9e6 	bl	8004a84 <HAL_GetTick>
 80066b8:	eba0 0008 	sub.w	r0, r0, r8
 80066bc:	42b8      	cmp	r0, r7
 80066be:	f200 80da 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80066c6:	079a      	lsls	r2, r3, #30
 80066c8:	d4f4      	bmi.n	80066b4 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	f040 8123 	bne.w	8006916 <HAL_RCC_OscConfig+0x376>
 80066d0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066d2:	069b      	lsls	r3, r3, #26
 80066d4:	d518      	bpl.n	8006708 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066d6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066d8:	4d6e      	ldr	r5, [pc, #440]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8107 	beq.w	80068ee <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 80066e0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fe f9ca 	bl	8004a84 <HAL_GetTick>
 80066f0:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066f2:	e005      	b.n	8006700 <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f4:	f7fe f9c6 	bl	8004a84 <HAL_GetTick>
 80066f8:	1b80      	subs	r0, r0, r6
 80066fa:	2802      	cmp	r0, #2
 80066fc:	f200 80bb 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006700:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006704:	079f      	lsls	r7, r3, #30
 8006706:	d5f5      	bpl.n	80066f4 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006708:	69e0      	ldr	r0, [r4, #28]
 800670a:	b328      	cbz	r0, 8006758 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800670c:	4d61      	ldr	r5, [pc, #388]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 800670e:	68aa      	ldr	r2, [r5, #8]
 8006710:	f002 020c 	and.w	r2, r2, #12
 8006714:	2a0c      	cmp	r2, #12
 8006716:	f000 814e 	beq.w	80069b6 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671a:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800671c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800671e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006722:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006724:	f000 80fd 	beq.w	8006922 <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006728:	68ea      	ldr	r2, [r5, #12]
 800672a:	f022 0203 	bic.w	r2, r2, #3
 800672e:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006730:	68ea      	ldr	r2, [r5, #12]
 8006732:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006736:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800673a:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fe f9a2 	bl	8004a84 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006740:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8006742:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006744:	e005      	b.n	8006752 <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006746:	f7fe f99d 	bl	8004a84 <HAL_GetTick>
 800674a:	1b40      	subs	r0, r0, r5
 800674c:	2802      	cmp	r0, #2
 800674e:	f200 8092 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	d4f6      	bmi.n	8006746 <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 8006758:	2000      	movs	r0, #0
}
 800675a:	b002      	add	sp, #8
 800675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006760:	4a4c      	ldr	r2, [pc, #304]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 8006762:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006764:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006766:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d045      	beq.n	80067fa <HAL_RCC_OscConfig+0x25a>
 800676e:	2b04      	cmp	r3, #4
 8006770:	d047      	beq.n	8006802 <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006772:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8006774:	4d47      	ldr	r5, [pc, #284]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8083 	beq.w	8006882 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006782:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006784:	f7fe f97e 	bl	8004a84 <HAL_GetTick>
 8006788:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800678a:	e004      	b.n	8006796 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800678c:	f7fe f97a 	bl	8004a84 <HAL_GetTick>
 8006790:	1b80      	subs	r0, r0, r6
 8006792:	2802      	cmp	r0, #2
 8006794:	d86f      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	0558      	lsls	r0, r3, #21
 800679a:	d5f7      	bpl.n	800678c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679c:	686b      	ldr	r3, [r5, #4]
 800679e:	6922      	ldr	r2, [r4, #16]
 80067a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80067a8:	606b      	str	r3, [r5, #4]
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	e733      	b.n	8006616 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ae:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067b2:	2903      	cmp	r1, #3
 80067b4:	f47f af09 	bne.w	80065ca <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b8:	4a36      	ldr	r2, [pc, #216]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	0392      	lsls	r2, r2, #14
 80067be:	f57f af27 	bpl.w	8006610 <HAL_RCC_OscConfig+0x70>
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	f47f af23 	bne.w	8006610 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80067ca:	2001      	movs	r0, #1
}
 80067cc:	b002      	add	sp, #8
 80067ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80067d2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80067de:	f7fe f951 	bl	8004a84 <HAL_GetTick>
 80067e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067e4:	e004      	b.n	80067f0 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e6:	f7fe f94d 	bl	8004a84 <HAL_GetTick>
 80067ea:	1b80      	subs	r0, r0, r6
 80067ec:	2802      	cmp	r0, #2
 80067ee:	d842      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80067f4:	0798      	lsls	r0, r3, #30
 80067f6:	d4f6      	bmi.n	80067e6 <HAL_RCC_OscConfig+0x246>
 80067f8:	e728      	b.n	800664c <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067fa:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80067fe:	2a02      	cmp	r2, #2
 8006800:	d1b7      	bne.n	8006772 <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	055d      	lsls	r5, r3, #21
 8006808:	d502      	bpl.n	8006810 <HAL_RCC_OscConfig+0x270>
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0dc      	beq.n	80067ca <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006810:	4a20      	ldr	r2, [pc, #128]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 8006812:	6920      	ldr	r0, [r4, #16]
 8006814:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006816:	4921      	ldr	r1, [pc, #132]	; (800689c <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006818:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800681c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006820:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006822:	6808      	ldr	r0, [r1, #0]
 8006824:	f7fe f8e8 	bl	80049f8 <HAL_InitTick>
 8006828:	2800      	cmp	r0, #0
 800682a:	d1ce      	bne.n	80067ca <HAL_RCC_OscConfig+0x22a>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	e6f2      	b.n	8006616 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006830:	4a18      	ldr	r2, [pc, #96]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
 8006832:	6813      	ldr	r3, [r2, #0]
 8006834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006838:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800683a:	f7fe f923 	bl	8004a84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683e:	4d15      	ldr	r5, [pc, #84]	; (8006894 <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 8006840:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006842:	e004      	b.n	800684e <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006844:	f7fe f91e 	bl	8004a84 <HAL_GetTick>
 8006848:	1b80      	subs	r0, r0, r6
 800684a:	2864      	cmp	r0, #100	; 0x64
 800684c:	d813      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	039b      	lsls	r3, r3, #14
 8006852:	d5f7      	bpl.n	8006844 <HAL_RCC_OscConfig+0x2a4>
 8006854:	e6db      	b.n	800660e <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006856:	682a      	ldr	r2, [r5, #0]
 8006858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685c:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800685e:	f7fe f911 	bl	8004a84 <HAL_GetTick>
 8006862:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	05d8      	lsls	r0, r3, #23
 8006868:	f53f af07 	bmi.w	800667a <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fe f90a 	bl	8004a84 <HAL_GetTick>
 8006870:	1bc0      	subs	r0, r0, r7
 8006872:	2802      	cmp	r0, #2
 8006874:	d9f6      	bls.n	8006864 <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 8006876:	2003      	movs	r0, #3
}
 8006878:	b002      	add	sp, #8
 800687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800687e:	2001      	movs	r0, #1
}
 8006880:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800688a:	f7fe f8fb 	bl	8004a84 <HAL_GetTick>
 800688e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006890:	e00b      	b.n	80068aa <HAL_RCC_OscConfig+0x30a>
 8006892:	bf00      	nop
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
 800689c:	20000688 	.word	0x20000688
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a0:	f7fe f8f0 	bl	8004a84 <HAL_GetTick>
 80068a4:	1b80      	subs	r0, r0, r6
 80068a6:	2802      	cmp	r0, #2
 80068a8:	d8e5      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	0559      	lsls	r1, r3, #21
 80068ae:	d4f7      	bmi.n	80068a0 <HAL_RCC_OscConfig+0x300>
 80068b0:	e7bc      	b.n	800682c <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 80068b2:	2600      	movs	r6, #0
 80068b4:	e6dc      	b.n	8006670 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b6:	4a61      	ldr	r2, [pc, #388]	; (8006a3c <HAL_RCC_OscConfig+0x49c>)
 80068b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068bc:	f043 0301 	orr.w	r3, r3, #1
 80068c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80068c4:	f7fe f8de 	bl	8004a84 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068c8:	4d5c      	ldr	r5, [pc, #368]	; (8006a3c <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 80068ca:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d0:	e005      	b.n	80068de <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fe f8d7 	bl	8004a84 <HAL_GetTick>
 80068d6:	eba0 0008 	sub.w	r0, r0, r8
 80068da:	42b8      	cmp	r0, r7
 80068dc:	d8cb      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068de:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80068e2:	0799      	lsls	r1, r3, #30
 80068e4:	d5f5      	bpl.n	80068d2 <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	f43f aef2 	beq.w	80066d0 <HAL_RCC_OscConfig+0x130>
 80068ec:	e013      	b.n	8006916 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 80068ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80068fa:	f7fe f8c3 	bl	8004a84 <HAL_GetTick>
 80068fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006900:	e004      	b.n	800690c <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006902:	f7fe f8bf 	bl	8004a84 <HAL_GetTick>
 8006906:	1b80      	subs	r0, r0, r6
 8006908:	2802      	cmp	r0, #2
 800690a:	d8b4      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800690c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006910:	0798      	lsls	r0, r3, #30
 8006912:	d4f6      	bmi.n	8006902 <HAL_RCC_OscConfig+0x362>
 8006914:	e6f8      	b.n	8006708 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006916:	4a49      	ldr	r2, [pc, #292]	; (8006a3c <HAL_RCC_OscConfig+0x49c>)
 8006918:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800691a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691e:	6593      	str	r3, [r2, #88]	; 0x58
 8006920:	e6d6      	b.n	80066d0 <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 8006922:	f7fe f8af 	bl	8004a84 <HAL_GetTick>
 8006926:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006928:	e004      	b.n	8006934 <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692a:	f7fe f8ab 	bl	8004a84 <HAL_GetTick>
 800692e:	1b80      	subs	r0, r0, r6
 8006930:	2802      	cmp	r0, #2
 8006932:	d8a0      	bhi.n	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	0199      	lsls	r1, r3, #6
 8006938:	d4f7      	bmi.n	800692a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800693a:	68e9      	ldr	r1, [r5, #12]
 800693c:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <HAL_RCC_OscConfig+0x4a0>)
 800693e:	6a22      	ldr	r2, [r4, #32]
 8006940:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006944:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006946:	400b      	ands	r3, r1
 8006948:	4313      	orrs	r3, r2
 800694a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800694e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006952:	3801      	subs	r0, #1
 8006954:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006958:	0849      	lsrs	r1, r1, #1
 800695a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800695e:	3901      	subs	r1, #1
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006966:	3a01      	subs	r2, #1
 8006968:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800696c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800696e:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006970:	4c32      	ldr	r4, [pc, #200]	; (8006a3c <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 8006972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006976:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006978:	68eb      	ldr	r3, [r5, #12]
 800697a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006980:	f7fe f880 	bl	8004a84 <HAL_GetTick>
 8006984:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006986:	e005      	b.n	8006994 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006988:	f7fe f87c 	bl	8004a84 <HAL_GetTick>
 800698c:	1b40      	subs	r0, r0, r5
 800698e:	2802      	cmp	r0, #2
 8006990:	f63f af71 	bhi.w	8006876 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	019a      	lsls	r2, r3, #6
 8006998:	d5f6      	bpl.n	8006988 <HAL_RCC_OscConfig+0x3e8>
 800699a:	e6dd      	b.n	8006758 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069a0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e741      	b.n	800683a <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069b6:	2801      	cmp	r0, #1
 80069b8:	f43f af08 	beq.w	80067cc <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 80069bc:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069be:	6a22      	ldr	r2, [r4, #32]
 80069c0:	f003 0103 	and.w	r1, r3, #3
 80069c4:	4291      	cmp	r1, r2
 80069c6:	f47f af00 	bne.w	80067ca <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069d0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80069d6:	f47f aef8 	bne.w	80067ca <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069e0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80069e4:	f47f aef1 	bne.w	80067ca <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069ee:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80069f2:	f47f aeea 	bne.w	80067ca <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069f8:	0852      	lsrs	r2, r2, #1
 80069fa:	3a01      	subs	r2, #1
 80069fc:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a00:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006a04:	f47f aee1 	bne.w	80067ca <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006a0a:	0852      	lsrs	r2, r2, #1
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a12:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8006a16:	bf14      	ite	ne
 8006a18:	2001      	movne	r0, #1
 8006a1a:	2000      	moveq	r0, #0
 8006a1c:	e6d6      	b.n	80067cc <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <HAL_RCC_OscConfig+0x49c>)
 8006a20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a24:	f042 0204 	orr.w	r2, r2, #4
 8006a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006a2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006a38:	e744      	b.n	80068c4 <HAL_RCC_OscConfig+0x324>
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	019f800c 	.word	0x019f800c

08006a44 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f000 8105 	beq.w	8006c54 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a4a:	4aad      	ldr	r2, [pc, #692]	; (8006d00 <HAL_RCC_ClockConfig+0x2bc>)
{
 8006a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a50:	6813      	ldr	r3, [r2, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	428b      	cmp	r3, r1
 8006a58:	d20c      	bcs.n	8006a74 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	f023 030f 	bic.w	r3, r3, #15
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	d002      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8006a6e:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 8006a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a74:	6803      	ldr	r3, [r0, #0]
 8006a76:	07df      	lsls	r7, r3, #31
 8006a78:	4604      	mov	r4, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	f140 8088 	bpl.w	8006b90 <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a80:	6842      	ldr	r2, [r0, #4]
 8006a82:	2a03      	cmp	r2, #3
 8006a84:	f000 80ad 	beq.w	8006be2 <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a88:	4b9e      	ldr	r3, [pc, #632]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a8c:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8e:	f000 80ff 	beq.w	8006c90 <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a92:	055b      	lsls	r3, r3, #21
 8006a94:	d5eb      	bpl.n	8006a6e <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a96:	4b9b      	ldr	r3, [pc, #620]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006a98:	6899      	ldr	r1, [r3, #8]
 8006a9a:	f001 010c 	and.w	r1, r1, #12
 8006a9e:	2904      	cmp	r1, #4
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006aa2:	6899      	ldr	r1, [r3, #8]
 8006aa4:	f001 010c 	and.w	r1, r1, #12
 8006aa8:	2908      	cmp	r1, #8
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	f001 010c 	and.w	r1, r1, #12
 8006ab2:	290c      	cmp	r1, #12
 8006ab4:	f000 80fb 	beq.w	8006cae <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ab8:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006abc:	4e91      	ldr	r6, [pc, #580]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006abe:	68b3      	ldr	r3, [r6, #8]
 8006ac0:	f023 0303 	bic.w	r3, r3, #3
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8006ac8:	f7fd ffdc 	bl	8004a84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006acc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006ad0:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	e005      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad4:	f7fd ffd6 	bl	8004a84 <HAL_GetTick>
 8006ad8:	eba0 0009 	sub.w	r0, r0, r9
 8006adc:	42b8      	cmp	r0, r7
 8006ade:	d874      	bhi.n	8006bca <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae0:	68b3      	ldr	r3, [r6, #8]
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	f003 030c 	and.w	r3, r3, #12
 8006ae8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006aec:	d1f2      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	079f      	lsls	r7, r3, #30
 8006af2:	f140 80d3 	bpl.w	8006c9c <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af6:	0758      	lsls	r0, r3, #29
 8006af8:	d504      	bpl.n	8006b04 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006afa:	4982      	ldr	r1, [pc, #520]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006afc:	688a      	ldr	r2, [r1, #8]
 8006afe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006b02:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	0719      	lsls	r1, r3, #28
 8006b06:	d506      	bpl.n	8006b16 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006b08:	4a7e      	ldr	r2, [pc, #504]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006b0a:	6893      	ldr	r3, [r2, #8]
 8006b0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b14:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b16:	4a7b      	ldr	r2, [pc, #492]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006b18:	68a1      	ldr	r1, [r4, #8]
 8006b1a:	6893      	ldr	r3, [r2, #8]
 8006b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b24:	4e76      	ldr	r6, [pc, #472]	; (8006d00 <HAL_RCC_ClockConfig+0x2bc>)
 8006b26:	6832      	ldr	r2, [r6, #0]
 8006b28:	f002 020f 	and.w	r2, r2, #15
 8006b2c:	42aa      	cmp	r2, r5
 8006b2e:	d837      	bhi.n	8006ba0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	075a      	lsls	r2, r3, #29
 8006b34:	d506      	bpl.n	8006b44 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b36:	4973      	ldr	r1, [pc, #460]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006b38:	68e0      	ldr	r0, [r4, #12]
 8006b3a:	688a      	ldr	r2, [r1, #8]
 8006b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b40:	4302      	orrs	r2, r0
 8006b42:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b44:	071b      	lsls	r3, r3, #28
 8006b46:	d443      	bmi.n	8006bd0 <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b48:	4a6e      	ldr	r2, [pc, #440]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006b4a:	6893      	ldr	r3, [r2, #8]
 8006b4c:	f003 030c 	and.w	r3, r3, #12
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	f000 80d3 	beq.w	8006cfc <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b56:	6893      	ldr	r3, [r2, #8]
 8006b58:	f003 030c 	and.w	r3, r3, #12
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	f000 809b 	beq.w	8006c98 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b62:	6893      	ldr	r3, [r2, #8]
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b0c      	cmp	r3, #12
 8006b6a:	d075      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006b6c:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b6e:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006b70:	4c65      	ldr	r4, [pc, #404]	; (8006d08 <HAL_RCC_ClockConfig+0x2c4>)
 8006b72:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 8006b74:	4865      	ldr	r0, [pc, #404]	; (8006d0c <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b76:	4966      	ldr	r1, [pc, #408]	; (8006d10 <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8006b78:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b7a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006b7e:	5ca2      	ldrb	r2, [r4, r2]
 8006b80:	f002 021f 	and.w	r2, r2, #31
 8006b84:	40d3      	lsrs	r3, r2
 8006b86:	600b      	str	r3, [r1, #0]
}
 8006b88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006b8c:	f7fd bf34 	b.w	80049f8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b90:	079e      	lsls	r6, r3, #30
 8006b92:	d4b0      	bmi.n	8006af6 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4e5a      	ldr	r6, [pc, #360]	; (8006d00 <HAL_RCC_ClockConfig+0x2bc>)
 8006b96:	6832      	ldr	r2, [r6, #0]
 8006b98:	f002 020f 	and.w	r2, r2, #15
 8006b9c:	42aa      	cmp	r2, r5
 8006b9e:	d9c7      	bls.n	8006b30 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba0:	6832      	ldr	r2, [r6, #0]
 8006ba2:	f022 020f 	bic.w	r2, r2, #15
 8006ba6:	432a      	orrs	r2, r5
 8006ba8:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8006baa:	f7fd ff6b 	bl	8004a84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bae:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006bb2:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	42ab      	cmp	r3, r5
 8006bbc:	d0b8      	beq.n	8006b30 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bbe:	f7fd ff61 	bl	8004a84 <HAL_GetTick>
 8006bc2:	eba0 0008 	sub.w	r0, r0, r8
 8006bc6:	42b8      	cmp	r0, r7
 8006bc8:	d9f4      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8006bca:	2003      	movs	r0, #3
}
 8006bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bd0:	4a4c      	ldr	r2, [pc, #304]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006bd2:	6921      	ldr	r1, [r4, #16]
 8006bd4:	6893      	ldr	r3, [r2, #8]
 8006bd6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006bda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006bde:	6093      	str	r3, [r2, #8]
 8006be0:	e7b2      	b.n	8006b48 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be2:	4948      	ldr	r1, [pc, #288]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	0180      	lsls	r0, r0, #6
 8006be8:	f57f af41 	bpl.w	8006a6e <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bec:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bee:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 8006bf0:	4f48      	ldr	r7, [pc, #288]	; (8006d14 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bf2:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8006bf6:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bf8:	68ce      	ldr	r6, [r1, #12]
 8006bfa:	bf0c      	ite	eq
 8006bfc:	4946      	ldreq	r1, [pc, #280]	; (8006d18 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bfe:	4947      	ldrne	r1, [pc, #284]	; (8006d1c <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c00:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006c04:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c06:	fbb1 f1f0 	udiv	r1, r1, r0
 8006c0a:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c0e:	4e3d      	ldr	r6, [pc, #244]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c10:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c14:	68f0      	ldr	r0, [r6, #12]
 8006c16:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8006c1e:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006c22:	42b9      	cmp	r1, r7
 8006c24:	f67f af48 	bls.w	8006ab8 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c28:	68b1      	ldr	r1, [r6, #8]
 8006c2a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8006c2e:	d007      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x1fc>
 8006c30:	f013 0802 	ands.w	r8, r3, #2
 8006c34:	f43f af42 	beq.w	8006abc <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f47f af3c 	bne.w	8006ab8 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c40:	4930      	ldr	r1, [pc, #192]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006c42:	688b      	ldr	r3, [r1, #8]
 8006c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c4e:	f04f 0880 	mov.w	r8, #128	; 0x80
 8006c52:	e733      	b.n	8006abc <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 8006c54:	2001      	movs	r0, #1
}
 8006c56:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c58:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c5a:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c5c:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c5e:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c62:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 8006c66:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c68:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c6c:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c70:	bf0c      	ite	eq
 8006c72:	4b29      	ldreq	r3, [pc, #164]	; (8006d18 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c74:	4b29      	ldrne	r3, [pc, #164]	; (8006d1c <HAL_RCC_ClockConfig+0x2d8>)
 8006c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c7a:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
 8006c80:	68d2      	ldr	r2, [r2, #12]
 8006c82:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8006c86:	3201      	adds	r2, #1
 8006c88:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8006c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c8e:	e76e      	b.n	8006b6e <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c90:	0399      	lsls	r1, r3, #14
 8006c92:	f53f af00 	bmi.w	8006a96 <HAL_RCC_ClockConfig+0x52>
 8006c96:	e6ea      	b.n	8006a6e <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8006c98:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <HAL_RCC_ClockConfig+0x2d4>)
 8006c9a:	e768      	b.n	8006b6e <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8006c9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ca0:	f43f af40 	beq.w	8006b24 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ca4:	68b3      	ldr	r3, [r6, #8]
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006caa:	60b3      	str	r3, [r6, #8]
 8006cac:	e73a      	b.n	8006b24 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cae:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cb0:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 8006cb2:	4e18      	ldr	r6, [pc, #96]	; (8006d14 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cb4:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8006cb8:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cba:	68d8      	ldr	r0, [r3, #12]
 8006cbc:	bf0c      	ite	eq
 8006cbe:	4b16      	ldreq	r3, [pc, #88]	; (8006d18 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cc0:	4b16      	ldrne	r3, [pc, #88]	; (8006d1c <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cc2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8006cc6:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ccc:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cd0:	480c      	ldr	r0, [pc, #48]	; (8006d04 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cd2:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cd6:	68c1      	ldr	r1, [r0, #12]
 8006cd8:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8006cdc:	3101      	adds	r1, #1
 8006cde:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 8006ce0:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8006ce4:	42b3      	cmp	r3, r6
 8006ce6:	f67f aee7 	bls.w	8006ab8 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cea:	6883      	ldr	r3, [r0, #8]
 8006cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006cf6:	f04f 0880 	mov.w	r8, #128	; 0x80
 8006cfa:	e6df      	b.n	8006abc <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_RCC_ClockConfig+0x2d8>)
 8006cfe:	e736      	b.n	8006b6e <HAL_RCC_ClockConfig+0x12a>
 8006d00:	40022000 	.word	0x40022000
 8006d04:	40021000 	.word	0x40021000
 8006d08:	0800d0dc 	.word	0x0800d0dc
 8006d0c:	20000688 	.word	0x20000688
 8006d10:	20000680 	.word	0x20000680
 8006d14:	04c4b400 	.word	0x04c4b400
 8006d18:	007a1200 	.word	0x007a1200
 8006d1c:	00f42400 	.word	0x00f42400

08006d20 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d20:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x64>)
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	f002 020c 	and.w	r2, r2, #12
 8006d28:	2a04      	cmp	r2, #4
 8006d2a:	d027      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	f002 020c 	and.w	r2, r2, #12
 8006d32:	2a08      	cmp	r2, #8
 8006d34:	d024      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	f002 020c 	and.w	r2, r2, #12
 8006d3c:	2a0c      	cmp	r2, #12
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 8006d40:	2000      	movs	r0, #0
}
 8006d42:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d44:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d46:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d48:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d4a:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d4e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8006d52:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d54:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d58:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d5c:	bf0c      	ite	eq
 8006d5e:	480a      	ldreq	r0, [pc, #40]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d60:	480a      	ldrne	r0, [pc, #40]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d62:	fbb0 f0f2 	udiv	r0, r0, r2
 8006d66:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x64>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006d72:	3301      	adds	r3, #1
 8006d74:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006d76:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d7a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d7e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x68>)
 8006d82:	4770      	bx	lr
 8006d84:	40021000 	.word	0x40021000
 8006d88:	007a1200 	.word	0x007a1200
 8006d8c:	00f42400 	.word	0x00f42400

08006d90 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006d90:	4b01      	ldr	r3, [pc, #4]	; (8006d98 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000680 	.word	0x20000680

08006d9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006d9e:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006da0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006da2:	4906      	ldr	r1, [pc, #24]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006da4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006da8:	6808      	ldr	r0, [r1, #0]
 8006daa:	5cd3      	ldrb	r3, [r2, r3]
 8006dac:	f003 031f 	and.w	r3, r3, #31
}
 8006db0:	40d8      	lsrs	r0, r3
 8006db2:	4770      	bx	lr
 8006db4:	40021000 	.word	0x40021000
 8006db8:	0800d0ec 	.word	0x0800d0ec
 8006dbc:	20000680 	.word	0x20000680

08006dc0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006dc2:	4a06      	ldr	r2, [pc, #24]	; (8006ddc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006dc6:	4906      	ldr	r1, [pc, #24]	; (8006de0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dc8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006dcc:	6808      	ldr	r0, [r1, #0]
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	f003 031f 	and.w	r3, r3, #31
}
 8006dd4:	40d8      	lsrs	r0, r3
 8006dd6:	4770      	bx	lr
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	0800d0ec 	.word	0x0800d0ec
 8006de0:	20000680 	.word	0x20000680

08006de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de8:	6803      	ldr	r3, [r0, #0]
{
 8006dea:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dec:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006df0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006df2:	d057      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006df4:	4b9f      	ldr	r3, [pc, #636]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006df8:	00d0      	lsls	r0, r2, #3
 8006dfa:	f140 810d 	bpl.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x234>
    FlagStatus       pwrclkchanged = RESET;
 8006dfe:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e00:	4d9d      	ldr	r5, [pc, #628]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e08:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e0a:	f7fd fe3b 	bl	8004a84 <HAL_GetTick>
 8006e0e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e12:	f7fd fe37 	bl	8004a84 <HAL_GetTick>
 8006e16:	1b80      	subs	r0, r0, r6
 8006e18:	2802      	cmp	r0, #2
 8006e1a:	f200 810f 	bhi.w	800703c <HAL_RCCEx_PeriphCLKConfig+0x258>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1e:	682b      	ldr	r3, [r5, #0]
 8006e20:	05d9      	lsls	r1, r3, #23
 8006e22:	d5f6      	bpl.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e24:	4b93      	ldr	r3, [pc, #588]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e2c:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8006e30:	d028      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006e32:	428a      	cmp	r2, r1
 8006e34:	d026      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e36:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e52:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e56:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8006e58:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e5c:	d512      	bpl.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e5e:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8006e60:	f7fd fe10 	bl	8004a84 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e64:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006e68:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e6a:	e006      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fd fe0a 	bl	8004a84 <HAL_GetTick>
 8006e70:	eba0 0008 	sub.w	r0, r0, r8
 8006e74:	42b0      	cmp	r0, r6
 8006e76:	f200 80e1 	bhi.w	800703c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e7a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006e7e:	079b      	lsls	r3, r3, #30
 8006e80:	d5f4      	bpl.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006e82:	6c21      	ldr	r1, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e84:	4a7b      	ldr	r2, [pc, #492]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e94:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e96:	b127      	cbz	r7, 8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e98:	4a76      	ldr	r2, [pc, #472]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e9a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ea2:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ea4:	07de      	lsls	r6, r3, #31
 8006ea6:	d508      	bpl.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ea8:	4972      	ldr	r1, [pc, #456]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006eaa:	6865      	ldr	r5, [r4, #4]
 8006eac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006eb0:	f022 0203 	bic.w	r2, r2, #3
 8006eb4:	432a      	orrs	r2, r5
 8006eb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006eba:	079d      	lsls	r5, r3, #30
 8006ebc:	d508      	bpl.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ebe:	496d      	ldr	r1, [pc, #436]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006ec0:	68a5      	ldr	r5, [r4, #8]
 8006ec2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ec6:	f022 020c 	bic.w	r2, r2, #12
 8006eca:	432a      	orrs	r2, r5
 8006ecc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ed0:	0759      	lsls	r1, r3, #29
 8006ed2:	d508      	bpl.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ed4:	4967      	ldr	r1, [pc, #412]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006ed6:	68e5      	ldr	r5, [r4, #12]
 8006ed8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006edc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006ee0:	432a      	orrs	r2, r5
 8006ee2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ee6:	071a      	lsls	r2, r3, #28
 8006ee8:	d508      	bpl.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006eea:	4962      	ldr	r1, [pc, #392]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006eec:	6925      	ldr	r5, [r4, #16]
 8006eee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ef2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ef6:	432a      	orrs	r2, r5
 8006ef8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006efc:	069f      	lsls	r7, r3, #26
 8006efe:	d508      	bpl.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f00:	495c      	ldr	r1, [pc, #368]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f02:	6965      	ldr	r5, [r4, #20]
 8006f04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f0c:	432a      	orrs	r2, r5
 8006f0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f12:	065e      	lsls	r6, r3, #25
 8006f14:	d508      	bpl.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f16:	4957      	ldr	r1, [pc, #348]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f18:	69a5      	ldr	r5, [r4, #24]
 8006f1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006f22:	432a      	orrs	r2, r5
 8006f24:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f28:	061d      	lsls	r5, r3, #24
 8006f2a:	d508      	bpl.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f2c:	4951      	ldr	r1, [pc, #324]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f2e:	69e5      	ldr	r5, [r4, #28]
 8006f30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f34:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f38:	432a      	orrs	r2, r5
 8006f3a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f3e:	05d9      	lsls	r1, r3, #23
 8006f40:	d508      	bpl.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f42:	494c      	ldr	r1, [pc, #304]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f44:	6a25      	ldr	r5, [r4, #32]
 8006f46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f4a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006f4e:	432a      	orrs	r2, r5
 8006f50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d508      	bpl.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f58:	4946      	ldr	r1, [pc, #280]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f60:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006f64:	432a      	orrs	r2, r5
 8006f66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f6a:	055f      	lsls	r7, r3, #21
 8006f6c:	d50b      	bpl.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f6e:	4941      	ldr	r1, [pc, #260]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f76:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006f7a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f7c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f80:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f84:	d05c      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f86:	051e      	lsls	r6, r3, #20
 8006f88:	d50b      	bpl.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f8a:	493a      	ldr	r1, [pc, #232]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006f8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f92:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006f96:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f98:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fa0:	d053      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x266>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fa2:	04dd      	lsls	r5, r3, #19
 8006fa4:	d50b      	bpl.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fa6:	4933      	ldr	r1, [pc, #204]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006fa8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006faa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006fae:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006fb2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fb4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fb8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fbc:	d04a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x270>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fbe:	0499      	lsls	r1, r3, #18
 8006fc0:	d50b      	bpl.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fc2:	492c      	ldr	r1, [pc, #176]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006fc4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006fc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006fca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006fce:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fd0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fd4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fd8:	d041      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fda:	045a      	lsls	r2, r3, #17
 8006fdc:	d50b      	bpl.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fde:	4925      	ldr	r1, [pc, #148]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006fe0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006fe2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006fe6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006fea:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fec:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ff4:	d038      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	d50b      	bpl.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006ffc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ffe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007002:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007006:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007008:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800700c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007010:	d00d      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  }

#endif /* QUADSPI */

  return status;
}
 8007012:	b002      	add	sp, #8
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800701a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800701e:	659a      	str	r2, [r3, #88]	; 0x58
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800702a:	2701      	movs	r7, #1
 800702c:	e6e8      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800702e:	68d3      	ldr	r3, [r2, #12]
 8007030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007034:	60d3      	str	r3, [r2, #12]
}
 8007036:	b002      	add	sp, #8
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 800703c:	2003      	movs	r0, #3
 800703e:	e72a      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007040:	68ca      	ldr	r2, [r1, #12]
 8007042:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007046:	60ca      	str	r2, [r1, #12]
 8007048:	e79d      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800704a:	68ca      	ldr	r2, [r1, #12]
 800704c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007050:	60ca      	str	r2, [r1, #12]
 8007052:	e7a6      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007054:	68ca      	ldr	r2, [r1, #12]
 8007056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800705a:	60ca      	str	r2, [r1, #12]
 800705c:	e7af      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800705e:	68ca      	ldr	r2, [r1, #12]
 8007060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007064:	60ca      	str	r2, [r1, #12]
 8007066:	e7b8      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007068:	68ca      	ldr	r2, [r1, #12]
 800706a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800706e:	60ca      	str	r2, [r1, #12]
 8007070:	e7c1      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000
 8007078:	40007000 	.word	0x40007000

0800707c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707c:	2800      	cmp	r0, #0
 800707e:	f000 8082 	beq.w	8007186 <HAL_TIM_Base_Init+0x10a>
{
 8007082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007084:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007088:	4604      	mov	r4, r0
 800708a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800708e:	b363      	cbz	r3, 80070ea <HAL_TIM_Base_Init+0x6e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007090:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007092:	4e46      	ldr	r6, [pc, #280]	; (80071ac <HAL_TIM_Base_Init+0x130>)
 8007094:	69a5      	ldr	r5, [r4, #24]
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800709a:	2302      	movs	r3, #2
 800709c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80070a2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a4:	d071      	beq.n	800718a <HAL_TIM_Base_Init+0x10e>
 80070a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80070aa:	d052      	beq.n	8007152 <HAL_TIM_Base_Init+0xd6>
 80070ac:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80070b0:	42b2      	cmp	r2, r6
 80070b2:	d01f      	beq.n	80070f4 <HAL_TIM_Base_Init+0x78>
 80070b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80070b8:	42b2      	cmp	r2, r6
 80070ba:	d01b      	beq.n	80070f4 <HAL_TIM_Base_Init+0x78>
 80070bc:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80070c0:	42b2      	cmp	r2, r6
 80070c2:	d017      	beq.n	80070f4 <HAL_TIM_Base_Init+0x78>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070c4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80070c8:	42b2      	cmp	r2, r6
 80070ca:	d06d      	beq.n	80071a8 <HAL_TIM_Base_Init+0x12c>
 80070cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80070d0:	42b2      	cmp	r2, r6
 80070d2:	d069      	beq.n	80071a8 <HAL_TIM_Base_Init+0x12c>
 80070d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80070d8:	42b2      	cmp	r2, r6
 80070da:	d065      	beq.n	80071a8 <HAL_TIM_Base_Init+0x12c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e0:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80070e2:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e4:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e6:	6291      	str	r1, [r2, #40]	; 0x28
 80070e8:	e017      	b.n	800711a <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 80070ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80070ee:	f7fc fd63 	bl	8003bb8 <HAL_TIM_Base_MspInit>
 80070f2:	e7cd      	b.n	8007090 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80070f4:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f6:	4f2e      	ldr	r7, [pc, #184]	; (80071b0 <HAL_TIM_Base_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80070fc:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070fe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007104:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800710c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800710e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007110:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007112:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007114:	d12b      	bne.n	800716e <HAL_TIM_Base_Init+0xf2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007116:	6963      	ldr	r3, [r4, #20]
 8007118:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800711a:	2301      	movs	r3, #1
 800711c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800711e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007120:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007128:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800712c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007144:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007148:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800714c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007152:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007154:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800715a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800715c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007160:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007166:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007168:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800716c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_TIM_Base_Init+0x138>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d0d0      	beq.n	8007116 <HAL_TIM_Base_Init+0x9a>
 8007174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007178:	429a      	cmp	r2, r3
 800717a:	d0cc      	beq.n	8007116 <HAL_TIM_Base_Init+0x9a>
 800717c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007180:	429a      	cmp	r2, r3
 8007182:	d1ca      	bne.n	800711a <HAL_TIM_Base_Init+0x9e>
 8007184:	e7c7      	b.n	8007116 <HAL_TIM_Base_Init+0x9a>
    return HAL_ERROR;
 8007186:	2001      	movs	r0, #1
}
 8007188:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800718a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007192:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007198:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80071a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80071a4:	6291      	str	r1, [r2, #40]	; 0x28
 80071a6:	e7b6      	b.n	8007116 <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a8:	6926      	ldr	r6, [r4, #16]
 80071aa:	e7f3      	b.n	8007194 <HAL_TIM_Base_Init+0x118>
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000

080071b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80071b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d001      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 80071c0:	2001      	movs	r0, #1
 80071c2:	4770      	bx	lr
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c6:	4916      	ldr	r1, [pc, #88]	; (8007220 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	2202      	movs	r2, #2
 80071ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071ce:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d8:	d017      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d014      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
 80071e0:	4a10      	ldr	r2, [pc, #64]	; (8007224 <HAL_TIM_Base_Start_IT+0x6c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d011      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
 80071e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00d      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
 80071ee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
 80071f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d005      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007206:	2000      	movs	r0, #0
 8007208:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800720a:	6899      	ldr	r1, [r3, #8]
 800720c:	4a06      	ldr	r2, [pc, #24]	; (8007228 <HAL_TIM_Base_Start_IT+0x70>)
 800720e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	2a06      	cmp	r2, #6
 8007212:	d002      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x62>
 8007214:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007218:	d1f1      	bne.n	80071fe <HAL_TIM_Base_Start_IT+0x46>
  return HAL_OK;
 800721a:	2000      	movs	r0, #0
}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40000400 	.word	0x40000400
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800722c:	6803      	ldr	r3, [r0, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	f241 1111 	movw	r1, #4369	; 0x1111
 800723c:	420a      	tst	r2, r1
 800723e:	d108      	bne.n	8007252 <HAL_TIM_Base_Stop_IT+0x26>
 8007240:	6a19      	ldr	r1, [r3, #32]
 8007242:	f244 4244 	movw	r2, #17476	; 0x4444
 8007246:	4211      	tst	r1, r2
 8007248:	d103      	bne.n	8007252 <HAL_TIM_Base_Stop_IT+0x26>
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007252:	2301      	movs	r3, #1
 8007254:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007258:	2000      	movs	r0, #0
 800725a:	4770      	bx	lr

0800725c <HAL_TIM_PWM_MspInit>:
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007260:	2800      	cmp	r0, #0
 8007262:	f000 8082 	beq.w	800736a <HAL_TIM_PWM_Init+0x10a>
{
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007268:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800726c:	4604      	mov	r4, r0
 800726e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007272:	b363      	cbz	r3, 80072ce <HAL_TIM_PWM_Init+0x6e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007276:	4e46      	ldr	r6, [pc, #280]	; (8007390 <HAL_TIM_PWM_Init+0x130>)
 8007278:	69a5      	ldr	r5, [r4, #24]
 800727a:	68e0      	ldr	r0, [r4, #12]
 800727c:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800727e:	2302      	movs	r3, #2
 8007280:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007284:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007286:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007288:	d071      	beq.n	800736e <HAL_TIM_PWM_Init+0x10e>
 800728a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800728e:	d052      	beq.n	8007336 <HAL_TIM_PWM_Init+0xd6>
 8007290:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007294:	42b2      	cmp	r2, r6
 8007296:	d01f      	beq.n	80072d8 <HAL_TIM_PWM_Init+0x78>
 8007298:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800729c:	42b2      	cmp	r2, r6
 800729e:	d01b      	beq.n	80072d8 <HAL_TIM_PWM_Init+0x78>
 80072a0:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80072a4:	42b2      	cmp	r2, r6
 80072a6:	d017      	beq.n	80072d8 <HAL_TIM_PWM_Init+0x78>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80072ac:	42b2      	cmp	r2, r6
 80072ae:	d06d      	beq.n	800738c <HAL_TIM_PWM_Init+0x12c>
 80072b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80072b4:	42b2      	cmp	r2, r6
 80072b6:	d069      	beq.n	800738c <HAL_TIM_PWM_Init+0x12c>
 80072b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80072bc:	42b2      	cmp	r2, r6
 80072be:	d065      	beq.n	800738c <HAL_TIM_PWM_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80072c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072ca:	6291      	str	r1, [r2, #40]	; 0x28
 80072cc:	e017      	b.n	80072fe <HAL_TIM_PWM_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 80072ce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80072d2:	f7ff ffc3 	bl	800725c <HAL_TIM_PWM_MspInit>
 80072d6:	e7cd      	b.n	8007274 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80072d8:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072da:	4f2e      	ldr	r7, [pc, #184]	; (8007394 <HAL_TIM_PWM_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80072e0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ee:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072f0:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80072f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072f4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072f6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072f8:	d12b      	bne.n	8007352 <HAL_TIM_PWM_Init+0xf2>
    TIMx->RCR = Structure->RepetitionCounter;
 80072fa:	6963      	ldr	r3, [r4, #20]
 80072fc:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80072fe:	2301      	movs	r3, #1
 8007300:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8007302:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007304:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007308:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800730c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007310:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007314:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800731c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007320:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007328:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800732c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007330:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8007336:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007338:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800733e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007344:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800734c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800734e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007350:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007352:	4b11      	ldr	r3, [pc, #68]	; (8007398 <HAL_TIM_PWM_Init+0x138>)
 8007354:	429a      	cmp	r2, r3
 8007356:	d0d0      	beq.n	80072fa <HAL_TIM_PWM_Init+0x9a>
 8007358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735c:	429a      	cmp	r2, r3
 800735e:	d0cc      	beq.n	80072fa <HAL_TIM_PWM_Init+0x9a>
 8007360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007364:	429a      	cmp	r2, r3
 8007366:	d1ca      	bne.n	80072fe <HAL_TIM_PWM_Init+0x9e>
 8007368:	e7c7      	b.n	80072fa <HAL_TIM_PWM_Init+0x9a>
    return HAL_ERROR;
 800736a:	2001      	movs	r0, #1
}
 800736c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800736e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007370:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007376:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800737e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007382:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007384:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007386:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007388:	6291      	str	r1, [r2, #40]	; 0x28
 800738a:	e7b6      	b.n	80072fa <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738c:	6926      	ldr	r6, [r4, #16]
 800738e:	e7f3      	b.n	8007378 <HAL_TIM_PWM_Init+0x118>
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40014000 	.word	0x40014000

0800739c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800739c:	2800      	cmp	r0, #0
 800739e:	f000 80b4 	beq.w	800750a <HAL_TIM_Encoder_Init+0x16e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80073a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80073aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073ae:	4604      	mov	r4, r0
 80073b0:	460d      	mov	r5, r1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d038      	beq.n	8007428 <HAL_TIM_Encoder_Init+0x8c>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073b6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	4e5e      	ldr	r6, [pc, #376]	; (8007534 <HAL_TIM_Encoder_Init+0x198>)
 80073ba:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80073be:	68e0      	ldr	r0, [r4, #12]
 80073c0:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80073c2:	2202      	movs	r2, #2
 80073c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 80073ce:	f022 0207 	bic.w	r2, r2, #7
 80073d2:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80073d6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d8:	f000 8099 	beq.w	800750e <HAL_TIM_Encoder_Init+0x172>
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d078      	beq.n	80074d4 <HAL_TIM_Encoder_Init+0x138>
 80073e2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80073e6:	42b3      	cmp	r3, r6
 80073e8:	d023      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x96>
 80073ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80073ee:	42b3      	cmp	r3, r6
 80073f0:	d01f      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x96>
 80073f2:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80073f6:	42b3      	cmp	r3, r6
 80073f8:	d01b      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80073fe:	42b3      	cmp	r3, r6
 8007400:	f000 8095 	beq.w	800752e <HAL_TIM_Encoder_Init+0x192>
 8007404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007408:	42b3      	cmp	r3, r6
 800740a:	f000 8090 	beq.w	800752e <HAL_TIM_Encoder_Init+0x192>
 800740e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007412:	42b3      	cmp	r3, r6
 8007414:	f000 808b 	beq.w	800752e <HAL_TIM_Encoder_Init+0x192>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800741c:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8007420:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007422:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007424:	6299      	str	r1, [r3, #40]	; 0x28
 8007426:	e018      	b.n	800745a <HAL_TIM_Encoder_Init+0xbe>
    htim->Lock = HAL_UNLOCKED;
 8007428:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800742c:	f7fc fc12 	bl	8003c54 <HAL_TIM_Encoder_MspInit>
 8007430:	e7c1      	b.n	80073b6 <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 8007432:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007434:	4f40      	ldr	r7, [pc, #256]	; (8007538 <HAL_TIM_Encoder_Init+0x19c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007436:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800743a:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800743e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007442:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007448:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800744c:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 800744e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007450:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007452:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007454:	d14d      	bne.n	80074f2 <HAL_TIM_Encoder_Init+0x156>
    TIMx->RCR = Structure->RepetitionCounter;
 8007456:	6962      	ldr	r2, [r4, #20]
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800745a:	2601      	movs	r6, #1
 800745c:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 800745e:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8007462:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007464:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007466:	69af      	ldr	r7, [r5, #24]
 8007468:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800746a:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800746e:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007472:	69e8      	ldr	r0, [r5, #28]
 8007474:	0112      	lsls	r2, r2, #4
 8007476:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800747a:	68e8      	ldr	r0, [r5, #12]
 800747c:	4302      	orrs	r2, r0
 800747e:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007480:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007484:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8007488:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 800748c:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800748e:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007492:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007496:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007498:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800749c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80074a0:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074a4:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074a8:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 80074aa:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80074ae:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 80074b0:	609d      	str	r5, [r3, #8]
  return HAL_OK;
 80074b2:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 80074b4:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80074b6:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074c8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 80074d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 80074d4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074dc:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80074de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e8:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 80074ec:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ee:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074f0:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074f2:	4a12      	ldr	r2, [pc, #72]	; (800753c <HAL_TIM_Encoder_Init+0x1a0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d0ae      	beq.n	8007456 <HAL_TIM_Encoder_Init+0xba>
 80074f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d0aa      	beq.n	8007456 <HAL_TIM_Encoder_Init+0xba>
 8007500:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007504:	4293      	cmp	r3, r2
 8007506:	d1a8      	bne.n	800745a <HAL_TIM_Encoder_Init+0xbe>
 8007508:	e7a5      	b.n	8007456 <HAL_TIM_Encoder_Init+0xba>
    return HAL_ERROR;
 800750a:	2001      	movs	r0, #1
}
 800750c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800750e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007510:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007516:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8007518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800751c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800751e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007522:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8007526:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007528:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800752a:	6299      	str	r1, [r3, #40]	; 0x28
 800752c:	e793      	b.n	8007456 <HAL_TIM_Encoder_Init+0xba>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752e:	6926      	ldr	r6, [r4, #16]
 8007530:	e7f2      	b.n	8007518 <HAL_TIM_Encoder_Init+0x17c>
 8007532:	bf00      	nop
 8007534:	40012c00 	.word	0x40012c00
 8007538:	40013400 	.word	0x40013400
 800753c:	40014000 	.word	0x40014000

08007540 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007540:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	f000 81c5 	beq.w	80078d4 <HAL_TIM_PWM_ConfigChannel+0x394>
 800754a:	2301      	movs	r3, #1
{
 800754c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800754e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007552:	2a14      	cmp	r2, #20
 8007554:	d854      	bhi.n	8007600 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8007556:	e8df f012 	tbh	[pc, r2, lsl #1]
 800755a:	0015      	.short	0x0015
 800755c:	00530053 	.word	0x00530053
 8007560:	009e0053 	.word	0x009e0053
 8007564:	00530053 	.word	0x00530053
 8007568:	01770053 	.word	0x01770053
 800756c:	00530053 	.word	0x00530053
 8007570:	00e70053 	.word	0x00e70053
 8007574:	00530053 	.word	0x00530053
 8007578:	01300053 	.word	0x01300053
 800757c:	00530053 	.word	0x00530053
 8007580:	00590053 	.word	0x00590053
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007584:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007586:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800758c:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800758e:	4ead      	ldr	r6, [pc, #692]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007590:	f025 0501 	bic.w	r5, r5, #1
 8007594:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8007596:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007598:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800759a:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800759c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80075a0:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075a8:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 80075aa:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 80075ae:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075b2:	d008      	beq.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075b4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80075b8:	42b3      	cmp	r3, r6
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075bc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	f040 81a1 	bne.w	8007908 <HAL_TIM_PWM_ConfigChannel+0x3c8>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075c6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80075cc:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075ce:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075d2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80075d6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80075d8:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80075dc:	4335      	orrs	r5, r6

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075de:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80075e0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80075e2:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80075e4:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075e8:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075ea:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075ec:	f044 0408 	orr.w	r4, r4, #8
 80075f0:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	f021 0104 	bic.w	r1, r1, #4
 80075f8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	432a      	orrs	r2, r5
 80075fe:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007600:	2300      	movs	r3, #0
 8007602:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007606:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007608:	4618      	mov	r0, r3
}
 800760a:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800760c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800760e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007612:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007614:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007616:	4e8b      	ldr	r6, [pc, #556]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007618:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 800761c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800761e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007620:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007624:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007628:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800762c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007630:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007632:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007636:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	d00f      	beq.n	800765c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800763c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007640:	42b3      	cmp	r3, r6
 8007642:	d00b      	beq.n	800765c <HAL_TIM_PWM_ConfigChannel+0x11c>
 8007644:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007648:	42b3      	cmp	r3, r6
 800764a:	d007      	beq.n	800765c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800764c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007650:	42b3      	cmp	r3, r6
 8007652:	d003      	beq.n	800765c <HAL_TIM_PWM_ConfigChannel+0x11c>
 8007654:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007658:	42b3      	cmp	r3, r6
 800765a:	d104      	bne.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x126>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800765c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800765e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007662:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007666:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007668:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800766a:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800766c:	64de      	str	r6, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007670:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007672:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007674:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8007678:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800767a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800767c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007680:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007684:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007688:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800768a:	2300      	movs	r3, #0
 800768c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007690:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007692:	4618      	mov	r0, r3
}
 8007694:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007696:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007698:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800769e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	4e68      	ldr	r6, [pc, #416]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a2:	f025 0510 	bic.w	r5, r5, #16
 80076a6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80076a8:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80076aa:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80076ac:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80076b2:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ba:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076bc:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c4:	f000 8108 	beq.w	80078d8 <HAL_TIM_PWM_ConfigChannel+0x398>
 80076c8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80076cc:	42b3      	cmp	r3, r6
 80076ce:	f000 8103 	beq.w	80078d8 <HAL_TIM_PWM_ConfigChannel+0x398>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80076d6:	42b3      	cmp	r3, r6
 80076d8:	d007      	beq.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80076da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076de:	42b3      	cmp	r3, r6
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80076e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076e6:	42b3      	cmp	r3, r6
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ea:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076ee:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f2:	433e      	orrs	r6, r7
 80076f4:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80076f8:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80076fa:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80076fc:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80076fe:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007700:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007702:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007704:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007706:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800770a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800770c:	6999      	ldr	r1, [r3, #24]
 800770e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007712:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800771a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800771c:	2300      	movs	r3, #0
 800771e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007722:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007724:	4618      	mov	r0, r3
}
 8007726:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007728:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800772a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800772e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007730:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007732:	4e44      	ldr	r6, [pc, #272]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007734:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8007738:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800773a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800773c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800773e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007740:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8007744:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007748:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800774c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800774e:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007752:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007756:	f000 80cf 	beq.w	80078f8 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 800775a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800775e:	42b3      	cmp	r3, r6
 8007760:	f000 80ca 	beq.w	80078f8 <HAL_TIM_PWM_ConfigChannel+0x3b8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007764:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007768:	42b3      	cmp	r3, r6
 800776a:	d007      	beq.n	800777c <HAL_TIM_PWM_ConfigChannel+0x23c>
 800776c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007770:	42b3      	cmp	r3, r6
 8007772:	d003      	beq.n	800777c <HAL_TIM_PWM_ConfigChannel+0x23c>
 8007774:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007778:	42b3      	cmp	r3, r6
 800777a:	d106      	bne.n	800778a <HAL_TIM_PWM_ConfigChannel+0x24a>
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800777c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007780:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007784:	433e      	orrs	r6, r7
 8007786:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800778a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800778c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800778e:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007790:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007792:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007794:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007796:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007798:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800779c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80077a4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a6:	69da      	ldr	r2, [r3, #28]
 80077a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80077ac:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80077ae:	2300      	movs	r3, #0
 80077b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80077b4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80077b6:	4618      	mov	r0, r3
}
 80077b8:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077ba:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077bc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80077c2:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	4e1f      	ldr	r6, [pc, #124]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c6:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80077ca:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80077cc:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80077ce:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80077d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80077d6:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077de:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077e0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80077e4:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	d00f      	beq.n	800780a <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80077ea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80077ee:	42b3      	cmp	r3, r6
 80077f0:	d00b      	beq.n	800780a <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80077f2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80077f6:	42b3      	cmp	r3, r6
 80077f8:	d007      	beq.n	800780a <HAL_TIM_PWM_ConfigChannel+0x2ca>
 80077fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80077fe:	42b3      	cmp	r3, r6
 8007800:	d003      	beq.n	800780a <HAL_TIM_PWM_ConfigChannel+0x2ca>
 8007802:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007806:	42b3      	cmp	r3, r6
 8007808:	d104      	bne.n	8007814 <HAL_TIM_PWM_ConfigChannel+0x2d4>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800780a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800780c:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007810:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8007814:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007816:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007818:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800781a:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800781c:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800781e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007820:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007822:	f044 0408 	orr.w	r4, r4, #8
 8007826:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007828:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800782a:	f021 0104 	bic.w	r1, r1, #4
 800782e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007832:	432a      	orrs	r2, r5
 8007834:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007836:	2300      	movs	r3, #0
 8007838:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800783c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800783e:	4618      	mov	r0, r3
}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007848:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800784a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800784e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8007850:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007852:	4e33      	ldr	r6, [pc, #204]	; (8007920 <HAL_TIM_PWM_ConfigChannel+0x3e0>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007854:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007858:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800785a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800785c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800785e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8007864:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007868:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800786c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800786e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8007872:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007876:	d037      	beq.n	80078e8 <HAL_TIM_PWM_ConfigChannel+0x3a8>
 8007878:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800787c:	42b3      	cmp	r3, r6
 800787e:	d033      	beq.n	80078e8 <HAL_TIM_PWM_ConfigChannel+0x3a8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007880:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007884:	42b3      	cmp	r3, r6
 8007886:	d007      	beq.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x358>
 8007888:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800788c:	42b3      	cmp	r3, r6
 800788e:	d003      	beq.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x358>
 8007890:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007894:	42b3      	cmp	r3, r6
 8007896:	d106      	bne.n	80078a6 <HAL_TIM_PWM_ConfigChannel+0x366>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007898:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800789c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078a0:	433e      	orrs	r6, r7
 80078a2:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 80078a6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80078a8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80078ac:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80078ae:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078b0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078b2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078b4:	f044 0408 	orr.w	r4, r4, #8
 80078b8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ba:	69d9      	ldr	r1, [r3, #28]
 80078bc:	f021 0104 	bic.w	r1, r1, #4
 80078c0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	432a      	orrs	r2, r5
 80078c6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80078c8:	2300      	movs	r3, #0
 80078ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80078ce:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80078d0:	4618      	mov	r0, r3
}
 80078d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80078d4:	2002      	movs	r0, #2
}
 80078d6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078d8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80078da:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078de:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e2:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80078e6:	e700      	b.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078e8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ea:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ee:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80078f2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80078f6:	e7cf      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x358>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80078f8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80078fa:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80078fe:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007902:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8007906:	e739      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x23c>
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007908:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800790c:	42b3      	cmp	r3, r6
 800790e:	f43f ae5a 	beq.w	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007912:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007916:	42b3      	cmp	r3, r6
 8007918:	f47f ae61 	bne.w	80075de <HAL_TIM_PWM_ConfigChannel+0x9e>
 800791c:	e653      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800791e:	bf00      	nop
 8007920:	40012c00 	.word	0x40012c00

08007924 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	f000 8084 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x112>
  htim->State = HAL_TIM_STATE_BUSY;
 800792e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8007930:	6803      	ldr	r3, [r0, #0]
{
 8007932:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007938:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800793a:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800793c:	4c59      	ldr	r4, [pc, #356]	; (8007aa4 <HAL_TIM_ConfigClockSource+0x180>)
  switch (sClockSourceConfig->ClockSource)
 800793e:	2a60      	cmp	r2, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 8007944:	f04f 0501 	mov.w	r5, #1
 8007948:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800794c:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800794e:	d074      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x116>
 8007950:	d91e      	bls.n	8007990 <HAL_TIM_ConfigClockSource+0x6c>
 8007952:	4c55      	ldr	r4, [pc, #340]	; (8007aa8 <HAL_TIM_ConfigClockSource+0x184>)
 8007954:	42a2      	cmp	r2, r4
 8007956:	f000 808e 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 800795a:	f200 8096 	bhi.w	8007a8a <HAL_TIM_ConfigClockSource+0x166>
 800795e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007962:	d03e      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0xbe>
 8007964:	f1b2 1f10 	cmp.w	r2, #1048592	; 0x100010
 8007968:	f000 8085 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 800796c:	2a70      	cmp	r2, #112	; 0x70
 800796e:	d12f      	bne.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007970:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8007974:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007976:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007978:	432a      	orrs	r2, r5
 800797a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007982:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007984:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007986:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007988:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800798c:	609a      	str	r2, [r3, #8]
      break;
 800798e:	e01f      	b.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8007990:	2a20      	cmp	r2, #32
 8007992:	d070      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007994:	d96c      	bls.n	8007a70 <HAL_TIM_ConfigClockSource+0x14c>
 8007996:	2a40      	cmp	r2, #64	; 0x40
 8007998:	d033      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0xde>
 800799a:	2a50      	cmp	r2, #80	; 0x50
 800799c:	d17f      	bne.n	8007a9e <HAL_TIM_ConfigClockSource+0x17a>
  tmpccer = TIMx->CCER;
 800799e:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a0:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a2:	684c      	ldr	r4, [r1, #4]
 80079a4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a6:	f026 0601 	bic.w	r6, r6, #1
 80079aa:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ac:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ae:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079b6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80079ba:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80079bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079be:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80079c0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079c2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80079c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ca:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80079ce:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80079d0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	2201      	movs	r2, #1
 80079d4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80079d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80079dc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80079de:	4618      	mov	r0, r3
}
 80079e0:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80079e6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80079e8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079ea:	432a      	orrs	r2, r5
 80079ec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f4:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80079f6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079fe:	609a      	str	r2, [r3, #8]
      break;
 8007a00:	e7e6      	b.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  tmpccer = TIMx->CCER;
 8007a02:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a04:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a06:	684c      	ldr	r4, [r1, #4]
 8007a08:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a0a:	f026 0601 	bic.w	r6, r6, #1
 8007a0e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a10:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a12:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a1a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007a1e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a22:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007a24:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a26:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007a2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007a32:	609a      	str	r2, [r3, #8]
 8007a34:	e7cc      	b.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  __HAL_LOCK(htim);
 8007a36:	2002      	movs	r0, #2
}
 8007a38:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a3c:	684d      	ldr	r5, [r1, #4]
 8007a3e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a40:	f024 0410 	bic.w	r4, r4, #16
 8007a44:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a46:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007a48:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a4a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a56:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007a5a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007a5e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a60:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007a64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a68:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007a6c:	609a      	str	r2, [r3, #8]
 8007a6e:	e7af      	b.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8007a70:	b10a      	cbz	r2, 8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007a72:	2a10      	cmp	r2, #16
 8007a74:	d1ac      	bne.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  tmpsmcr = TIMx->SMCR;
 8007a76:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a78:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a7c:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a80:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a84:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	e7a2      	b.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
  switch (sClockSourceConfig->ClockSource)
 8007a8a:	4908      	ldr	r1, [pc, #32]	; (8007aac <HAL_TIM_ConfigClockSource+0x188>)
 8007a8c:	428a      	cmp	r2, r1
 8007a8e:	d0f2      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007a90:	3130      	adds	r1, #48	; 0x30
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d0ef      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007a96:	3940      	subs	r1, #64	; 0x40
 8007a98:	428a      	cmp	r2, r1
 8007a9a:	d199      	bne.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
 8007a9c:	e7eb      	b.n	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007a9e:	2a30      	cmp	r2, #48	; 0x30
 8007aa0:	d196      	bne.n	80079d0 <HAL_TIM_ConfigClockSource+0xac>
 8007aa2:	e7e8      	b.n	8007a76 <HAL_TIM_ConfigClockSource+0x152>
 8007aa4:	ffce0088 	.word	0xffce0088
 8007aa8:	00100020 	.word	0x00100020
 8007aac:	00100040 	.word	0x00100040

08007ab0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007ab0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d04e      	beq.n	8007b56 <HAL_TIM_SlaveConfigSynchro+0xa6>
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	2302      	movs	r3, #2
{
 8007abc:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8007abe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007ac2:	6893      	ldr	r3, [r2, #8]
 8007ac4:	4604      	mov	r4, r0
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ac6:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007ad2:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad8:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007adc:	432b      	orrs	r3, r5
  __HAL_LOCK(htim);
 8007ade:	2601      	movs	r6, #1
  switch (sSlaveConfig->InputTrigger)
 8007ae0:	2850      	cmp	r0, #80	; 0x50
  __HAL_LOCK(htim);
 8007ae2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8007ae6:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8007ae8:	d052      	beq.n	8007b90 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8007aea:	d91f      	bls.n	8007b2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007aec:	2860      	cmp	r0, #96	; 0x60
 8007aee:	d03c      	beq.n	8007b6a <HAL_TIM_SlaveConfigSynchro+0xba>
 8007af0:	2870      	cmp	r0, #112	; 0x70
 8007af2:	d10a      	bne.n	8007b0a <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007af4:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8007af8:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8007afa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007afc:	432b      	orrs	r3, r5
 8007afe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b02:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b06:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007b08:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b0a:	68d3      	ldr	r3, [r2, #12]
 8007b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b10:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007b12:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007b14:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8007b16:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b1c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8007b1e:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007b24:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8007b28:	bcf0      	pop	{r4, r5, r6, r7}
 8007b2a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8007b2c:	2840      	cmp	r0, #64	; 0x40
 8007b2e:	d1ec      	bne.n	8007b0a <HAL_TIM_SlaveConfigSynchro+0x5a>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007b30:	2d05      	cmp	r5, #5
 8007b32:	d012      	beq.n	8007b5a <HAL_TIM_SlaveConfigSynchro+0xaa>
 8007b34:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8007b38:	d00f      	beq.n	8007b5a <HAL_TIM_SlaveConfigSynchro+0xaa>
      tmpccer = htim->Instance->CCER;
 8007b3a:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b3c:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b3e:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b40:	f020 0001 	bic.w	r0, r0, #1
 8007b44:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b46:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b4c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8007b50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8007b52:	6215      	str	r5, [r2, #32]
 8007b54:	e7d9      	b.n	8007b0a <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_LOCK(htim);
 8007b56:	2002      	movs	r0, #2
}
 8007b58:	4770      	bx	lr
    htim->State = HAL_TIM_STATE_READY;
 8007b5a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8007b5c:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8007b5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007b62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007b66:	bcf0      	pop	{r4, r5, r6, r7}
 8007b68:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b6a:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b6c:	688d      	ldr	r5, [r1, #8]
 8007b6e:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b70:	f020 0010 	bic.w	r0, r0, #16
 8007b74:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b76:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8007b78:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b82:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b86:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007b8c:	6213      	str	r3, [r2, #32]
 8007b8e:	e7bc      	b.n	8007b0a <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpccer = TIMx->CCER;
 8007b90:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b92:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b94:	6888      	ldr	r0, [r1, #8]
 8007b96:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b98:	f026 0601 	bic.w	r6, r6, #1
 8007b9c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9e:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ba0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007ba8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007baa:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007bae:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	6211      	str	r1, [r2, #32]
 8007bb2:	e7aa      	b.n	8007b0a <HAL_TIM_SlaveConfigSynchro+0x5a>

08007bb4 <HAL_TIM_OC_DelayElapsedCallback>:
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop

08007bb8 <HAL_TIM_IC_CaptureCallback>:
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop

08007bbc <HAL_TIM_PWM_PulseFinishedCallback>:
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop

08007bc0 <HAL_TIM_TriggerCallback>:
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop

08007bc4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bc4:	6803      	ldr	r3, [r0, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	0791      	lsls	r1, r2, #30
{
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bce:	d503      	bpl.n	8007bd8 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	0792      	lsls	r2, r2, #30
 8007bd4:	f100 808a 	bmi.w	8007cec <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	0752      	lsls	r2, r2, #29
 8007bdc:	d502      	bpl.n	8007be4 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	0750      	lsls	r0, r2, #29
 8007be2:	d470      	bmi.n	8007cc6 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	0711      	lsls	r1, r2, #28
 8007be8:	d502      	bpl.n	8007bf0 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	0712      	lsls	r2, r2, #28
 8007bee:	d458      	bmi.n	8007ca2 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	06d1      	lsls	r1, r2, #27
 8007bf4:	d502      	bpl.n	8007bfc <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	06d2      	lsls	r2, r2, #27
 8007bfa:	d43e      	bmi.n	8007c7a <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	07d0      	lsls	r0, r2, #31
 8007c00:	d503      	bpl.n	8007c0a <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	07d1      	lsls	r1, r2, #31
 8007c06:	f100 808a 	bmi.w	8007d1e <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	0612      	lsls	r2, r2, #24
 8007c0e:	d503      	bpl.n	8007c18 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	0610      	lsls	r0, r2, #24
 8007c14:	f100 808b 	bmi.w	8007d2e <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	05d1      	lsls	r1, r2, #23
 8007c1c:	d503      	bpl.n	8007c26 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	0612      	lsls	r2, r2, #24
 8007c22:	f100 808c 	bmi.w	8007d3e <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	0650      	lsls	r0, r2, #25
 8007c2a:	d503      	bpl.n	8007c34 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	0651      	lsls	r1, r2, #25
 8007c30:	f100 808d 	bmi.w	8007d4e <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	0692      	lsls	r2, r2, #26
 8007c38:	d503      	bpl.n	8007c42 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	0690      	lsls	r0, r2, #26
 8007c3e:	f100 808e 	bmi.w	8007d5e <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	02d1      	lsls	r1, r2, #11
 8007c46:	d503      	bpl.n	8007c50 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	02d2      	lsls	r2, r2, #11
 8007c4c:	f100 808f 	bmi.w	8007d6e <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007c50:	691a      	ldr	r2, [r3, #16]
 8007c52:	0290      	lsls	r0, r2, #10
 8007c54:	d503      	bpl.n	8007c5e <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	0291      	lsls	r1, r2, #10
 8007c5a:	f100 8090 	bmi.w	8007d7e <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	0252      	lsls	r2, r2, #9
 8007c62:	d503      	bpl.n	8007c6c <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	0250      	lsls	r0, r2, #9
 8007c68:	f100 8091 	bmi.w	8007d8e <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	0211      	lsls	r1, r2, #8
 8007c70:	d502      	bpl.n	8007c78 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	0212      	lsls	r2, r2, #8
 8007c76:	d44a      	bmi.n	8007d0e <HAL_TIM_IRQHandler+0x14a>
}
 8007c78:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c7a:	f06f 0210 	mvn.w	r2, #16
 8007c7e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c80:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c82:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c84:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c88:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c8c:	f040 8090 	bne.w	8007db0 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c90:	f7ff ff90 	bl	8007bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff ff91 	bl	8007bbc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	7722      	strb	r2, [r4, #28]
 8007ca0:	e7ac      	b.n	8007bfc <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ca2:	f06f 0208 	mvn.w	r2, #8
 8007ca6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007caa:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cac:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cae:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb2:	d17a      	bne.n	8007daa <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb4:	f7ff ff7e 	bl	8007bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff ff7f 	bl	8007bbc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	7722      	strb	r2, [r4, #28]
 8007cc4:	e794      	b.n	8007bf0 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cc6:	f06f 0204 	mvn.w	r2, #4
 8007cca:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ccc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cce:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cd0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cd8:	d164      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	f7ff ff6b 	bl	8007bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ff6c 	bl	8007bbc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	7722      	strb	r2, [r4, #28]
 8007cea:	e77b      	b.n	8007be4 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cec:	f06f 0202 	mvn.w	r2, #2
 8007cf0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cf2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cf6:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cfa:	d150      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfc:	f7ff ff5a 	bl	8007bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff ff5b 	bl	8007bbc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d06:	2200      	movs	r2, #0
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	7722      	strb	r2, [r4, #28]
 8007d0c:	e764      	b.n	8007bd8 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007d0e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007d14:	611a      	str	r2, [r3, #16]
}
 8007d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d1a:	f000 b955 	b.w	8007fc8 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d1e:	f06f 0201 	mvn.w	r2, #1
 8007d22:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7f9 fb13 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	e76d      	b.n	8007c0a <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f93d 	bl	8007fb4 <HAL_TIMEx_BreakCallback>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	e76c      	b.n	8007c18 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 f937 	bl	8007fb8 <HAL_TIMEx_Break2Callback>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	e76b      	b.n	8007c26 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d52:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007d54:	4620      	mov	r0, r4
 8007d56:	f7ff ff33 	bl	8007bc0 <HAL_TIM_TriggerCallback>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	e76a      	b.n	8007c34 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d5e:	f06f 0220 	mvn.w	r2, #32
 8007d62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 f923 	bl	8007fb0 <HAL_TIMEx_CommutCallback>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	e769      	b.n	8007c42 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007d6e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007d72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 f921 	bl	8007fbc <HAL_TIMEx_EncoderIndexCallback>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	e768      	b.n	8007c50 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007d7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007d82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 f91b 	bl	8007fc0 <HAL_TIMEx_DirectionChangeCallback>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	e767      	b.n	8007c5e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007d8e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007d92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f915 	bl	8007fc4 <HAL_TIMEx_IndexErrorCallback>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	e766      	b.n	8007c6c <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8007d9e:	f7ff ff0b 	bl	8007bb8 <HAL_TIM_IC_CaptureCallback>
 8007da2:	e7b0      	b.n	8007d06 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007da4:	f7ff ff08 	bl	8007bb8 <HAL_TIM_IC_CaptureCallback>
 8007da8:	e79c      	b.n	8007ce4 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007daa:	f7ff ff05 	bl	8007bb8 <HAL_TIM_IC_CaptureCallback>
 8007dae:	e786      	b.n	8007cbe <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8007db0:	f7ff ff02 	bl	8007bb8 <HAL_TIM_IC_CaptureCallback>
 8007db4:	e771      	b.n	8007c9a <HAL_TIM_IRQHandler+0xd6>
 8007db6:	bf00      	nop

08007db8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d049      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
{
 8007dc0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dc2:	4a25      	ldr	r2, [pc, #148]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 8007dc4:	6805      	ldr	r5, [r0, #0]
 8007dc6:	680f      	ldr	r7, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8007dce:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dd0:	4295      	cmp	r5, r2
  tmpcr2 = htim->Instance->CR2;
 8007dd2:	686b      	ldr	r3, [r5, #4]
  __HAL_LOCK(htim);
 8007dd4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007dd8:	68ae      	ldr	r6, [r5, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dda:	d025      	beq.n	8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de0:	4295      	cmp	r5, r2
 8007de2:	d02c      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dec:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dee:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007df2:	606b      	str	r3, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df4:	d00a      	beq.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007df6:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	d007      	beq.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e00:	429d      	cmp	r5, r3
 8007e02:	d003      	beq.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007e04:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e0c:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e0e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e12:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e14:	60ae      	str	r6, [r5, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007e16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007e1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007e22:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007e24:	4618      	mov	r0, r3
}
 8007e26:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e28:	684c      	ldr	r4, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e2e:	4322      	orrs	r2, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e30:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e38:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 8007e3a:	606a      	str	r2, [r5, #4]
 8007e3c:	e7e6      	b.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e3e:	684a      	ldr	r2, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e40:	f423 0470 	bic.w	r4, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e44:	4314      	orrs	r4, r2
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e46:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8007e4a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e4e:	433c      	orrs	r4, r7
  htim->Instance->CR2 = tmpcr2;
 8007e50:	606c      	str	r4, [r5, #4]
 8007e52:	e7db      	b.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8007e54:	2002      	movs	r0, #2
}
 8007e56:	4770      	bx	lr
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40000400 	.word	0x40000400

08007e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d044      	beq.n	8007ef2 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8007e68:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e6a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8007e6e:	4602      	mov	r2, r0
 8007e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e74:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e78:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e84:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e94:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e96:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e98:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e9e:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ea0:	4c15      	ldr	r4, [pc, #84]	; (8007ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007ea2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ea4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ea8:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007eaa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007eae:	d00a      	beq.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007eb0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d006      	beq.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007eb8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007eba:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8007ebc:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8007ebe:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8007ec0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8007ec4:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ec6:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ec8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ece:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ed0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ed4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed8:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ee0:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ee2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ee6:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ee8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007eea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	e7e2      	b.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007ef2:	2002      	movs	r0, #2
}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40012c00 	.word	0x40012c00

08007efc <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d04a      	beq.n	8007f9a <HAL_TIMEx_ConfigBreakInput+0x9e>
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	3b01      	subs	r3, #1
{
 8007f08:	b4f0      	push	{r4, r5, r6, r7}
 8007f0a:	2b0f      	cmp	r3, #15
  __HAL_LOCK(htim);
 8007f0c:	f04f 0401 	mov.w	r4, #1
 8007f10:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
 8007f14:	d91d      	bls.n	8007f52 <HAL_TIMEx_ConfigBreakInput+0x56>

  switch (sBreakInputConfig->Source)
 8007f16:	2500      	movs	r5, #0
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8007f18:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007f1a:	462f      	mov	r7, r5
 8007f1c:	462c      	mov	r4, r5
 8007f1e:	462e      	mov	r6, r5
  switch (BreakInput)
 8007f20:	d025      	beq.n	8007f6e <HAL_TIMEx_ConfigBreakInput+0x72>
 8007f22:	2902      	cmp	r1, #2
 8007f24:	d10f      	bne.n	8007f46 <HAL_TIMEx_ConfigBreakInput+0x4a>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8007f26:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007f28:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8007f2a:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007f2e:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007f30:	40bb      	lsls	r3, r7
 8007f32:	ea83 030c 	eor.w	r3, r3, ip
 8007f36:	4033      	ands	r3, r6
 8007f38:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007f3c:	40aa      	lsls	r2, r5
 8007f3e:	405a      	eors	r2, r3
 8007f40:	4022      	ands	r2, r4
 8007f42:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8007f44:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8007f46:	2300      	movs	r3, #0
 8007f48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007f4c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007f4e:	4618      	mov	r0, r3
}
 8007f50:	4770      	bx	lr
 8007f52:	4e13      	ldr	r6, [pc, #76]	; (8007fa0 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8007f54:	4c13      	ldr	r4, [pc, #76]	; (8007fa4 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007f56:	4f14      	ldr	r7, [pc, #80]	; (8007fa8 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007f58:	4d14      	ldr	r5, [pc, #80]	; (8007fac <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8007f5a:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 8007f5e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007f62:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8007f66:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  switch (BreakInput)
 8007f6a:	2901      	cmp	r1, #1
 8007f6c:	d1d9      	bne.n	8007f22 <HAL_TIMEx_ConfigBreakInput+0x26>
      tmporx = htim->Instance->AF1;
 8007f6e:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007f70:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8007f72:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007f76:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007f78:	40bb      	lsls	r3, r7
 8007f7a:	ea83 030c 	eor.w	r3, r3, ip
 8007f7e:	4033      	ands	r3, r6
 8007f80:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007f84:	40aa      	lsls	r2, r5
 8007f86:	405a      	eors	r2, r3
 8007f88:	4022      	ands	r2, r4
 8007f8a:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 8007f8c:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007f94:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007f96:	4618      	mov	r0, r3
}
 8007f98:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007f9a:	2002      	movs	r0, #2
}
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	0800d104 	.word	0x0800d104
 8007fa4:	0800d144 	.word	0x0800d144
 8007fa8:	0800d184 	.word	0x0800d184
 8007fac:	0800d1c4 	.word	0x0800d1c4

08007fb0 <HAL_TIMEx_CommutCallback>:
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop

08007fb4 <HAL_TIMEx_BreakCallback>:
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop

08007fb8 <HAL_TIMEx_Break2Callback>:
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <HAL_TIMEx_EncoderIndexCallback>:
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <HAL_TIMEx_DirectionChangeCallback>:
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop

08007fc4 <HAL_TIMEx_IndexErrorCallback>:
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <HAL_TIMEx_TransitionErrorCallback>:
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop

08007fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	460e      	mov	r6, r1
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd2:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8007fd6:	2920      	cmp	r1, #32
{
 8007fd8:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8007fda:	d147      	bne.n	800806c <HAL_UART_Transmit+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	d049      	beq.n	8008074 <HAL_UART_Transmit+0xa8>
 8007fe0:	9201      	str	r2, [sp, #4]
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	d046      	beq.n	8008074 <HAL_UART_Transmit+0xa8>
 8007fe6:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8007fe8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	4604      	mov	r4, r0
 8007ff0:	d03c      	beq.n	800806c <HAL_UART_Transmit+0xa0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff2:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007ff4:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	2700      	movs	r7, #0
 8007ff8:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8007ffc:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008000:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008004:	f7fc fd3e 	bl	8004a84 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008008:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800800a:	9a01      	ldr	r2, [sp, #4]
 800800c:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8008014:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8008016:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800801a:	f000 8097 	beq.w	800814c <HAL_UART_Transmit+0x180>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 800801e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008022:	6820      	ldr	r0, [r4, #0]
    __HAL_UNLOCK(huart);
 8008024:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8008026:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008028:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800802c:	b1a3      	cbz	r3, 8008058 <HAL_UART_Transmit+0x8c>
 800802e:	1c6a      	adds	r2, r5, #1
 8008030:	d124      	bne.n	800807c <HAL_UART_Transmit+0xb0>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008032:	69c2      	ldr	r2, [r0, #28]
 8008034:	0613      	lsls	r3, r2, #24
 8008036:	d5fc      	bpl.n	8008032 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8008038:	2e00      	cmp	r6, #0
 800803a:	d048      	beq.n	80080ce <HAL_UART_Transmit+0x102>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800803c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008040:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8008042:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008046:	3b01      	subs	r3, #1
 8008048:	b29b      	uxth	r3, r3
 800804a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800804e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1ea      	bne.n	800802e <HAL_UART_Transmit+0x62>
 8008058:	1c6a      	adds	r2, r5, #1
 800805a:	d13d      	bne.n	80080d8 <HAL_UART_Transmit+0x10c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805c:	69c3      	ldr	r3, [r0, #28]
 800805e:	065b      	lsls	r3, r3, #25
 8008060:	d5fc      	bpl.n	800805c <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 8008062:	2320      	movs	r3, #32
 8008064:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8008068:	2000      	movs	r0, #0
 800806a:	e000      	b.n	800806e <HAL_UART_Transmit+0xa2>
    return HAL_BUSY;
 800806c:	2002      	movs	r0, #2
}
 800806e:	b003      	add	sp, #12
 8008070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8008074:	2001      	movs	r0, #1
}
 8008076:	b003      	add	sp, #12
 8008078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807c:	69c3      	ldr	r3, [r0, #28]
 800807e:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8008082:	d1d9      	bne.n	8008038 <HAL_UART_Transmit+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008084:	f7fc fcfe 	bl	8004a84 <HAL_GetTick>
 8008088:	eba0 0008 	sub.w	r0, r0, r8
 800808c:	4285      	cmp	r5, r0
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	d34a      	bcc.n	8008128 <HAL_UART_Transmit+0x15c>
 8008092:	2d00      	cmp	r5, #0
 8008094:	d048      	beq.n	8008128 <HAL_UART_Transmit+0x15c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008096:	6803      	ldr	r3, [r0, #0]
 8008098:	075b      	lsls	r3, r3, #29
 800809a:	d5c8      	bpl.n	800802e <HAL_UART_Transmit+0x62>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800809c:	69c3      	ldr	r3, [r0, #28]
 800809e:	0519      	lsls	r1, r3, #20
 80080a0:	d5c5      	bpl.n	800802e <HAL_UART_Transmit+0x62>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a6:	6203      	str	r3, [r0, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80080a8:	6803      	ldr	r3, [r0, #0]
 80080aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ae:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	6882      	ldr	r2, [r0, #8]

          huart->gState = HAL_UART_STATE_READY;
 80080b2:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80080ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 80080be:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80080c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080c4:	f884 907c 	strb.w	r9, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80080cc:	e7cf      	b.n	800806e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ce:	f837 3b02 	ldrh.w	r3, [r7], #2
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	e7b3      	b.n	8008040 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d8:	69c6      	ldr	r6, [r0, #28]
 80080da:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80080de:	d1c0      	bne.n	8008062 <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e0:	f7fc fcd0 	bl	8004a84 <HAL_GetTick>
 80080e4:	eba0 0008 	sub.w	r0, r0, r8
 80080e8:	4285      	cmp	r5, r0
 80080ea:	6820      	ldr	r0, [r4, #0]
 80080ec:	d31c      	bcc.n	8008128 <HAL_UART_Transmit+0x15c>
 80080ee:	b1dd      	cbz	r5, 8008128 <HAL_UART_Transmit+0x15c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f0:	6803      	ldr	r3, [r0, #0]
 80080f2:	075f      	lsls	r7, r3, #29
 80080f4:	d5b0      	bpl.n	8008058 <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f6:	69c3      	ldr	r3, [r0, #28]
 80080f8:	0519      	lsls	r1, r3, #20
 80080fa:	d5ad      	bpl.n	8008058 <HAL_UART_Transmit+0x8c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008100:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008102:	6803      	ldr	r3, [r0, #0]
 8008104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008108:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	6882      	ldr	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800810c:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008114:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8008118:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 800811a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800811e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008122:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008126:	e7a2      	b.n	800806e <HAL_UART_Transmit+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008128:	6803      	ldr	r3, [r0, #0]
 800812a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800812e:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	6883      	ldr	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008132:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008134:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8008138:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800813c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8008140:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8008142:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008146:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 800814a:	e790      	b.n	800806e <HAL_UART_Transmit+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f47f af65 	bne.w	800801e <HAL_UART_Transmit+0x52>
 8008154:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8008156:	461e      	mov	r6, r3
 8008158:	e761      	b.n	800801e <HAL_UART_Transmit+0x52>
 800815a:	bf00      	nop

0800815c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800815c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800815e:	07da      	lsls	r2, r3, #31
{
 8008160:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008162:	d506      	bpl.n	8008172 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008164:	6801      	ldr	r1, [r0, #0]
 8008166:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008168:	684a      	ldr	r2, [r1, #4]
 800816a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800816e:	4322      	orrs	r2, r4
 8008170:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008172:	079c      	lsls	r4, r3, #30
 8008174:	d506      	bpl.n	8008184 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008176:	6801      	ldr	r1, [r0, #0]
 8008178:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800817a:	684a      	ldr	r2, [r1, #4]
 800817c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008180:	4322      	orrs	r2, r4
 8008182:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008184:	0759      	lsls	r1, r3, #29
 8008186:	d506      	bpl.n	8008196 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008188:	6801      	ldr	r1, [r0, #0]
 800818a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800818c:	684a      	ldr	r2, [r1, #4]
 800818e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008192:	4322      	orrs	r2, r4
 8008194:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008196:	071a      	lsls	r2, r3, #28
 8008198:	d506      	bpl.n	80081a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800819a:	6801      	ldr	r1, [r0, #0]
 800819c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800819e:	684a      	ldr	r2, [r1, #4]
 80081a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081a4:	4322      	orrs	r2, r4
 80081a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	06dc      	lsls	r4, r3, #27
 80081aa:	d506      	bpl.n	80081ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081ac:	6801      	ldr	r1, [r0, #0]
 80081ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80081b0:	688a      	ldr	r2, [r1, #8]
 80081b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081b6:	4322      	orrs	r2, r4
 80081b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ba:	0699      	lsls	r1, r3, #26
 80081bc:	d506      	bpl.n	80081cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081be:	6801      	ldr	r1, [r0, #0]
 80081c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80081c2:	688a      	ldr	r2, [r1, #8]
 80081c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c8:	4322      	orrs	r2, r4
 80081ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	065a      	lsls	r2, r3, #25
 80081ce:	d509      	bpl.n	80081e4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d0:	6801      	ldr	r1, [r0, #0]
 80081d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80081d4:	684a      	ldr	r2, [r1, #4]
 80081d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80081da:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081e2:	d00b      	beq.n	80081fc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	d506      	bpl.n	80081f6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081e8:	6802      	ldr	r2, [r0, #0]
 80081ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80081ec:	6853      	ldr	r3, [r2, #4]
 80081ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80081f2:	430b      	orrs	r3, r1
 80081f4:	6053      	str	r3, [r2, #4]
}
 80081f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fc:	684a      	ldr	r2, [r1, #4]
 80081fe:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008200:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008204:	4322      	orrs	r2, r4
 8008206:	604a      	str	r2, [r1, #4]
 8008208:	e7ec      	b.n	80081e4 <UART_AdvFeatureConfig+0x88>
 800820a:	bf00      	nop

0800820c <HAL_UART_Init>:
  if (huart == NULL)
 800820c:	2800      	cmp	r0, #0
 800820e:	d052      	beq.n	80082b6 <HAL_UART_Init+0xaa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008210:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	2b00      	cmp	r3, #0
 800821c:	d046      	beq.n	80082ac <HAL_UART_Init+0xa0>
  __HAL_UART_DISABLE(huart);
 800821e:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008220:	49be      	ldr	r1, [pc, #760]	; (800851c <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008222:	69a7      	ldr	r7, [r4, #24]
  huart->gState = HAL_UART_STATE_BUSY;
 8008224:	2224      	movs	r2, #36	; 0x24
 8008226:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800822a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800822c:	68a2      	ldr	r2, [r4, #8]
 800822e:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8008232:	f020 0001 	bic.w	r0, r0, #1
 8008236:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008238:	4332      	orrs	r2, r6
 800823a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800823c:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800823e:	432a      	orrs	r2, r5
  tmpreg |= (uint32_t)huart->FifoMode;
 8008240:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008242:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008244:	4031      	ands	r1, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8008246:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008248:	430a      	orrs	r2, r1
 800824a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008250:	4eb3      	ldr	r6, [pc, #716]	; (8008520 <HAL_UART_Init+0x314>)
 8008252:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008254:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008258:	430a      	orrs	r2, r1
 800825a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800825c:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800825e:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008260:	d02b      	beq.n	80082ba <HAL_UART_Init+0xae>
    tmpreg |= huart->Init.OneBitSampling;
 8008262:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008264:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008268:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800826c:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008274:	f506 4638 	add.w	r6, r6, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008278:	f022 020f 	bic.w	r2, r2, #15
 800827c:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827e:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008280:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008282:	d03a      	beq.n	80082fa <HAL_UART_Init+0xee>
 8008284:	4aa7      	ldr	r2, [pc, #668]	; (8008524 <HAL_UART_Init+0x318>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d05a      	beq.n	8008340 <HAL_UART_Init+0x134>
 800828a:	4aa7      	ldr	r2, [pc, #668]	; (8008528 <HAL_UART_Init+0x31c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	f000 8130 	beq.w	80084f2 <HAL_UART_Init+0x2e6>
 8008292:	4aa6      	ldr	r2, [pc, #664]	; (800852c <HAL_UART_Init+0x320>)
 8008294:	4293      	cmp	r3, r2
 8008296:	f000 80e7 	beq.w	8008468 <HAL_UART_Init+0x25c>
  huart->RxISR = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80082a0:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80082a4:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 80082a6:	2001      	movs	r0, #1
}
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    huart->Lock = HAL_UNLOCKED;
 80082ac:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80082b0:	f7fb fd5e 	bl	8003d70 <HAL_UART_MspInit>
 80082b4:	e7b3      	b.n	800821e <HAL_UART_Init+0x12>
    return HAL_ERROR;
 80082b6:	2001      	movs	r0, #1
}
 80082b8:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082ba:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80082be:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80082c2:	4339      	orrs	r1, r7
 80082c4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082c8:	4899      	ldr	r0, [pc, #612]	; (8008530 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082ca:	f022 020f 	bic.w	r2, r2, #15
 80082ce:	432a      	orrs	r2, r5
 80082d0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082d2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80082d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082de:	f000 818f 	beq.w	8008600 <HAL_UART_Init+0x3f4>
 80082e2:	f240 8155 	bls.w	8008590 <HAL_UART_Init+0x384>
 80082e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ea:	f000 819f 	beq.w	800862c <HAL_UART_Init+0x420>
 80082ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082f2:	d1d2      	bne.n	800829a <HAL_UART_Init+0x8e>
        pclk = (uint32_t) LSE_VALUE;
 80082f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082f8:	e152      	b.n	80085a0 <HAL_UART_Init+0x394>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082fa:	4b8d      	ldr	r3, [pc, #564]	; (8008530 <HAL_UART_Init+0x324>)
 80082fc:	4a8d      	ldr	r2, [pc, #564]	; (8008534 <HAL_UART_Init+0x328>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008308:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800830c:	f000 8118 	beq.w	8008540 <HAL_UART_Init+0x334>
    switch (clocksource)
 8008310:	2b08      	cmp	r3, #8
 8008312:	d8c2      	bhi.n	800829a <HAL_UART_Init+0x8e>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <HAL_UART_Init+0x110>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008463 	.word	0x08008463
 8008320:	08008351 	.word	0x08008351
 8008324:	0800860d 	.word	0x0800860d
 8008328:	0800829b 	.word	0x0800829b
 800832c:	0800845d 	.word	0x0800845d
 8008330:	0800829b 	.word	0x0800829b
 8008334:	0800829b 	.word	0x0800829b
 8008338:	0800829b 	.word	0x0800829b
 800833c:	08008515 	.word	0x08008515
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008340:	4b7b      	ldr	r3, [pc, #492]	; (8008530 <HAL_UART_Init+0x324>)
 8008342:	4a7d      	ldr	r2, [pc, #500]	; (8008538 <HAL_UART_Init+0x32c>)
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008348:	f003 030c 	and.w	r3, r3, #12
 800834c:	5cd3      	ldrb	r3, [r2, r3]
 800834e:	e7db      	b.n	8008308 <HAL_UART_Init+0xfc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008350:	f7fe fd36 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008354:	2800      	cmp	r0, #0
 8008356:	f000 80c5 	beq.w	80084e4 <HAL_UART_Init+0x2d8>
 800835a:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835c:	6862      	ldr	r2, [r4, #4]
 800835e:	4b77      	ldr	r3, [pc, #476]	; (800853c <HAL_UART_Init+0x330>)
 8008360:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008364:	fbb0 f3f3 	udiv	r3, r0, r3
 8008368:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800836c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008370:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008372:	f1a3 0110 	sub.w	r1, r3, #16
 8008376:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800837a:	4291      	cmp	r1, r2
 800837c:	d88d      	bhi.n	800829a <HAL_UART_Init+0x8e>
        huart->Instance->BRR = usartdiv;
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	60c3      	str	r3, [r0, #12]
  huart->NbTxDataToProcess = 1;
 8008382:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8008384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->NbTxDataToProcess = 1;
 8008388:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800838c:	6722      	str	r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800838e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 80a3 	bne.w	80084dc <HAL_UART_Init+0x2d0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800839e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083a6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80083a8:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083aa:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80083ac:	f042 0201 	orr.w	r2, r2, #1
 80083b0:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 80083b6:	f7fc fb65 	bl	8004a84 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80083c0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083c2:	d40c      	bmi.n	80083de <HAL_UART_Init+0x1d2>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	0750      	lsls	r0, r2, #29
 80083c8:	d431      	bmi.n	800842e <HAL_UART_Init+0x222>
  huart->gState = HAL_UART_STATE_READY;
 80083ca:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80083cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80083ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80083d2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80083d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80083da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083de:	69dd      	ldr	r5, [r3, #28]
 80083e0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80083e4:	d1ee      	bne.n	80083c4 <HAL_UART_Init+0x1b8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e6:	f7fc fb4d 	bl	8004a84 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083ea:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ec:	1b80      	subs	r0, r0, r6
 80083ee:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083f2:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083f4:	f080 80bc 	bcs.w	8008570 <HAL_UART_Init+0x364>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083f8:	0752      	lsls	r2, r2, #29
 80083fa:	d5f0      	bpl.n	80083de <HAL_UART_Init+0x1d2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	0517      	lsls	r7, r2, #20
 8008400:	d5ed      	bpl.n	80083de <HAL_UART_Init+0x1d2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008406:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800840e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008412:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008414:	f021 0101 	bic.w	r1, r1, #1
 8008418:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 800841a:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 800841c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8008420:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008424:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008428:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 800842c:	e7d5      	b.n	80083da <HAL_UART_Init+0x1ce>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	69dd      	ldr	r5, [r3, #28]
 8008430:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008434:	d1c9      	bne.n	80083ca <HAL_UART_Init+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7fc fb25 	bl	8004a84 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800843a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843c:	1b80      	subs	r0, r0, r6
 800843e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008442:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008444:	f080 8094 	bcs.w	8008570 <HAL_UART_Init+0x364>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008448:	0751      	lsls	r1, r2, #29
 800844a:	d5f0      	bpl.n	800842e <HAL_UART_Init+0x222>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	0512      	lsls	r2, r2, #20
 8008450:	d5ed      	bpl.n	800842e <HAL_UART_Init+0x222>
 8008452:	e7d6      	b.n	8008402 <HAL_UART_Init+0x1f6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008454:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008458:	f000 80e0 	beq.w	800861c <HAL_UART_Init+0x410>
        pclk = HAL_RCC_GetSysClockFreq();
 800845c:	f7fe fc60 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8008460:	e778      	b.n	8008354 <HAL_UART_Init+0x148>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008462:	f7fe fc9b 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008466:	e775      	b.n	8008354 <HAL_UART_Init+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008468:	4b31      	ldr	r3, [pc, #196]	; (8008530 <HAL_UART_Init+0x324>)
 800846a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d0ee      	beq.n	8008454 <HAL_UART_Init+0x248>
 8008476:	d926      	bls.n	80084c6 <HAL_UART_Init+0x2ba>
 8008478:	2b80      	cmp	r3, #128	; 0x80
 800847a:	f000 80c9 	beq.w	8008610 <HAL_UART_Init+0x404>
 800847e:	2bc0      	cmp	r3, #192	; 0xc0
 8008480:	f47f af0b 	bne.w	800829a <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008484:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) LSE_VALUE;
 8008488:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800848c:	f47f af66 	bne.w	800835c <HAL_UART_Init+0x150>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008490:	6862      	ldr	r2, [r4, #4]
 8008492:	492a      	ldr	r1, [pc, #168]	; (800853c <HAL_UART_Init+0x330>)
 8008494:	0853      	lsrs	r3, r2, #1
 8008496:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 800849a:	fbb0 f0f1 	udiv	r0, r0, r1
 800849e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80084a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a6:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a8:	f1a2 0010 	sub.w	r0, r2, #16
 80084ac:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80084b0:	4288      	cmp	r0, r1
 80084b2:	f63f aef2 	bhi.w	800829a <HAL_UART_Init+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084b6:	f023 030f 	bic.w	r3, r3, #15
 80084ba:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084bc:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	e75c      	b.n	8008380 <HAL_UART_Init+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f47f aee7 	bne.w	800829a <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80084d0:	d1c7      	bne.n	8008462 <HAL_UART_Init+0x256>
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d2:	f7fe fc63 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80084d6:	b128      	cbz	r0, 80084e4 <HAL_UART_Init+0x2d8>
 80084d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084da:	e7d9      	b.n	8008490 <HAL_UART_Init+0x284>
    UART_AdvFeatureConfig(huart);
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff fe3d 	bl	800815c <UART_AdvFeatureConfig>
 80084e2:	e758      	b.n	8008396 <HAL_UART_Init+0x18a>
  huart->RxISR = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80084ea:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80084ee:	6723      	str	r3, [r4, #112]	; 0x70
 80084f0:	e74d      	b.n	800838e <HAL_UART_Init+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <HAL_UART_Init+0x324>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d0a9      	beq.n	8008454 <HAL_UART_Init+0x248>
 8008500:	d9e1      	bls.n	80084c6 <HAL_UART_Init+0x2ba>
 8008502:	2b20      	cmp	r3, #32
 8008504:	f000 8084 	beq.w	8008610 <HAL_UART_Init+0x404>
 8008508:	2b30      	cmp	r3, #48	; 0x30
 800850a:	f47f aec6 	bne.w	800829a <HAL_UART_Init+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800850e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008512:	d0bd      	beq.n	8008490 <HAL_UART_Init+0x284>
        pclk = (uint32_t) LSE_VALUE;
 8008514:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008518:	e720      	b.n	800835c <HAL_UART_Init+0x150>
 800851a:	bf00      	nop
 800851c:	cfff69f3 	.word	0xcfff69f3
 8008520:	40008000 	.word	0x40008000
 8008524:	40004400 	.word	0x40004400
 8008528:	40004800 	.word	0x40004800
 800852c:	40004c00 	.word	0x40004c00
 8008530:	40021000 	.word	0x40021000
 8008534:	0800d204 	.word	0x0800d204
 8008538:	0800d208 	.word	0x0800d208
 800853c:	0800d218 	.word	0x0800d218
    switch (clocksource)
 8008540:	2b08      	cmp	r3, #8
 8008542:	f63f aeaa 	bhi.w	800829a <HAL_UART_Init+0x8e>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <HAL_UART_Init+0x340>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	080084d3 	.word	0x080084d3
 8008550:	08008607 	.word	0x08008607
 8008554:	08008623 	.word	0x08008623
 8008558:	0800829b 	.word	0x0800829b
 800855c:	0800861d 	.word	0x0800861d
 8008560:	0800829b 	.word	0x0800829b
 8008564:	0800829b 	.word	0x0800829b
 8008568:	0800829b 	.word	0x0800829b
 800856c:	08008627 	.word	0x08008627
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008576:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008578:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857a:	f022 0201 	bic.w	r2, r2, #1
 800857e:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8008580:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8008582:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8008586:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800858a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800858e:	e724      	b.n	80083da <HAL_UART_Init+0x1ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008590:	2b00      	cmp	r3, #0
 8008592:	f47f ae82 	bne.w	800829a <HAL_UART_Init+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008596:	f7fe fc01 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800859a:	2800      	cmp	r0, #0
 800859c:	d0a2      	beq.n	80084e4 <HAL_UART_Init+0x2d8>
 800859e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085a0:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <HAL_UART_Init+0x424>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085a8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80085ac:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b0:	428b      	cmp	r3, r1
 80085b2:	f4ff ae72 	bcc.w	800829a <HAL_UART_Init+0x8e>
 80085b6:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80085ba:	f63f ae6e 	bhi.w	800829a <HAL_UART_Init+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085be:	2500      	movs	r5, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4629      	mov	r1, r5
 80085c4:	f7f8 fb68 	bl	8000c98 <__aeabi_uldivmod>
 80085c8:	020b      	lsls	r3, r1, #8
 80085ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085ce:	0202      	lsls	r2, r0, #8
 80085d0:	0870      	lsrs	r0, r6, #1
 80085d2:	1817      	adds	r7, r2, r0
 80085d4:	f143 0800 	adc.w	r8, r3, #0
 80085d8:	4632      	mov	r2, r6
 80085da:	462b      	mov	r3, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	4641      	mov	r1, r8
 80085e0:	f7f8 fb5a 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <HAL_UART_Init+0x428>)
 80085e6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f63f ae55 	bhi.w	800829a <HAL_UART_Init+0x8e>
          huart->Instance->BRR = usartdiv;
 80085f0:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80085f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80085f6:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80085f8:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 80085fc:	66a3      	str	r3, [r4, #104]	; 0x68
 80085fe:	e6c6      	b.n	800838e <HAL_UART_Init+0x182>
        pclk = HAL_RCC_GetSysClockFreq();
 8008600:	f7fe fb8e 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8008604:	e7c9      	b.n	800859a <HAL_UART_Init+0x38e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008606:	f7fe fbdb 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
 800860a:	e764      	b.n	80084d6 <HAL_UART_Init+0x2ca>
        pclk = (uint32_t) HSI_VALUE;
 800860c:	480a      	ldr	r0, [pc, #40]	; (8008638 <HAL_UART_Init+0x42c>)
 800860e:	e6a5      	b.n	800835c <HAL_UART_Init+0x150>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008614:	4808      	ldr	r0, [pc, #32]	; (8008638 <HAL_UART_Init+0x42c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008616:	f47f aea1 	bne.w	800835c <HAL_UART_Init+0x150>
 800861a:	e739      	b.n	8008490 <HAL_UART_Init+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 800861c:	f7fe fb80 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8008620:	e759      	b.n	80084d6 <HAL_UART_Init+0x2ca>
        pclk = (uint32_t) HSI_VALUE;
 8008622:	4805      	ldr	r0, [pc, #20]	; (8008638 <HAL_UART_Init+0x42c>)
 8008624:	e734      	b.n	8008490 <HAL_UART_Init+0x284>
        pclk = (uint32_t) LSE_VALUE;
 8008626:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800862a:	e731      	b.n	8008490 <HAL_UART_Init+0x284>
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4802      	ldr	r0, [pc, #8]	; (8008638 <HAL_UART_Init+0x42c>)
 800862e:	e7b7      	b.n	80085a0 <HAL_UART_Init+0x394>
 8008630:	0800d218 	.word	0x0800d218
 8008634:	000ffcff 	.word	0x000ffcff
 8008638:	00f42400 	.word	0x00f42400

0800863c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008640:	2a01      	cmp	r2, #1
 8008642:	d017      	beq.n	8008674 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8008644:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008646:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	2124      	movs	r1, #36	; 0x24
 800864a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 800864e:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008650:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008652:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008654:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008656:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800865a:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800865e:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8008660:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008662:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008664:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008666:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008668:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800866c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008670:	bc30      	pop	{r4, r5}
 8008672:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008674:	2002      	movs	r0, #2
}
 8008676:	4770      	bx	lr

08008678 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008678:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800867c:	2a01      	cmp	r2, #1
 800867e:	d049      	beq.n	8008714 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008680:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8008682:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008684:	681a      	ldr	r2, [r3, #0]
{
 8008686:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008688:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800868c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008690:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008692:	f020 0001 	bic.w	r0, r0, #1
 8008696:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008698:	6890      	ldr	r0, [r2, #8]
 800869a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
{
 800869e:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086a0:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80086a2:	481d      	ldr	r0, [pc, #116]	; (8008718 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086a4:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80086a6:	f240 1107 	movw	r1, #263	; 0x107
 80086aa:	9000      	str	r0, [sp, #0]
 80086ac:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80086ae:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 80086b2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 80086b6:	f200 2006 	addw	r0, r0, #518	; 0x206
 80086ba:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 80086be:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c2:	b325      	cbz	r5, 800870e <HAL_UARTEx_SetTxFifoThreshold+0x96>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086c4:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086c6:	6896      	ldr	r6, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	f3c5 6542 	ubfx	r5, r5, #25, #3
 80086ce:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086d0:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086d4:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086d8:	f816 0c10 	ldrb.w	r0, [r6, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 80086dc:	f815 7c08 	ldrb.w	r7, [r5, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80086e0:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086e4:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086e6:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086e8:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ec:	fb90 f0f5 	sdiv	r0, r0, r5
 80086f0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80086f4:	2100      	movs	r1, #0
 80086f6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80086fa:	2520      	movs	r5, #32
  return HAL_OK;
 80086fc:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086fe:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008700:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008704:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008708:	b004      	add	sp, #16
 800870a:	bcf0      	pop	{r4, r5, r6, r7}
 800870c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800870e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008710:	4608      	mov	r0, r1
 8008712:	e7ed      	b.n	80086f0 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8008714:	2002      	movs	r0, #2
}
 8008716:	4770      	bx	lr
 8008718:	03010101 	.word	0x03010101

0800871c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800871c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008720:	2a01      	cmp	r2, #1
 8008722:	d049      	beq.n	80087b8 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008724:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008726:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008728:	681a      	ldr	r2, [r3, #0]
{
 800872a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800872c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008730:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008732:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008734:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008736:	f020 0001 	bic.w	r0, r0, #1
 800873a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800873c:	6890      	ldr	r0, [r2, #8]
 800873e:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
{
 8008742:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008744:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008746:	481d      	ldr	r0, [pc, #116]	; (80087bc <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008748:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800874a:	f240 1107 	movw	r1, #263	; 0x107
 800874e:	9000      	str	r0, [sp, #0]
 8008750:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008752:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8008756:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 800875a:	f200 2006 	addw	r0, r0, #518	; 0x206
 800875e:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8008762:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008766:	b325      	cbz	r5, 80087b2 <HAL_UARTEx_SetRxFifoThreshold+0x96>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008768:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800876a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800876c:	a904      	add	r1, sp, #16
 800876e:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8008772:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008774:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008778:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800877c:	f816 0c10 	ldrb.w	r0, [r6, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008780:	f815 7c08 	ldrb.w	r7, [r5, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008784:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008788:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800878a:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800878c:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008790:	fb90 f0f5 	sdiv	r0, r0, r5
 8008794:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008798:	2100      	movs	r1, #0
 800879a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800879e:	2520      	movs	r5, #32
  return HAL_OK;
 80087a0:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087a2:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087a4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80087a8:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 80087ac:	b004      	add	sp, #16
 80087ae:	bcf0      	pop	{r4, r5, r6, r7}
 80087b0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80087b2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80087b4:	4608      	mov	r0, r1
 80087b6:	e7ed      	b.n	8008794 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 80087b8:	2002      	movs	r0, #2
}
 80087ba:	4770      	bx	lr
 80087bc:	03010101 	.word	0x03010101

080087c0 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80087c0:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80087c2:	8840      	ldrh	r0, [r0, #2]
 80087c4:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80087c8:	0c00      	lsrs	r0, r0, #16
 80087ca:	4770      	bx	lr

080087cc <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80087cc:	b410      	push	{r4}
 80087ce:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80087d0:	8802      	ldrh	r2, [r0, #0]
 80087d2:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80087d4:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80087d8:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80087dc:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80087e0:	42a2      	cmp	r2, r4
{
 80087e2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80087e4:	d219      	bcs.n	800881a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80087e6:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80087ea:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80087ee:	b2e4      	uxtb	r4, r4
 80087f0:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80087f4:	8882      	ldrh	r2, [r0, #4]
 80087f6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80087fa:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8008800:	bfbc      	itt	lt
 8008802:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8008806:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfbc      	itt	lt
 800880c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8008810:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8008812:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8008816:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800881a:	b289      	uxth	r1, r1
 800881c:	2000      	movs	r0, #0
 800881e:	b29b      	uxth	r3, r3
 8008820:	f361 000f 	bfi	r0, r1, #0, #16
 8008824:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008828:	b005      	add	sp, #20
 800882a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800882e:	4770      	bx	lr

08008830 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8008830:	4401      	add	r1, r0
 8008832:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8008836:	4770      	bx	lr

08008838 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8008838:	4401      	add	r1, r0
}
 800883a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 800883e:	4770      	bx	lr

08008840 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8008840:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8008844:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8008846:	4770      	bx	lr

08008848 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8008848:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 800884c:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8008854:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8008856:	2400      	movs	r4, #0
 8008858:	7384      	strb	r4, [r0, #14]
  pHandle->EncRestart = false;
 800885a:	73c4      	strb	r4, [r0, #15]
  pHandle->pVSS = pVSS;
 800885c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pENC = pENC;
 8008860:	6083      	str	r3, [r0, #8]
}
 8008862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008866:	4770      	bx	lr

08008868 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8008868:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800886a:	2200      	movs	r2, #0
{
 800886c:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800886e:	4611      	mov	r1, r2
 8008870:	6840      	ldr	r0, [r0, #4]
 8008872:	f002 fa97 	bl	800ada4 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 8008876:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800887a:	6860      	ldr	r0, [r4, #4]
 800887c:	f002 fa8a 	bl	800ad94 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8008880:	6820      	ldr	r0, [r4, #0]
 8008882:	2100      	movs	r1, #0
 8008884:	f001 fd5c 	bl	800a340 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8008888:	2200      	movs	r2, #0
 800888a:	4611      	mov	r1, r2
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	f001 fd5b 	bl	800a348 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8008892:	8ae2      	ldrh	r2, [r4, #22]
 8008894:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	f001 fd55 	bl	800a348 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800889e:	8ae1      	ldrh	r1, [r4, #22]
 80088a0:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 80088a2:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 80088a4:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 80088a8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ac:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 80088ae:	3301      	adds	r3, #1
 80088b0:	81a3      	strh	r3, [r4, #12]
}
 80088b2:	bd10      	pop	{r4, pc}
 80088b4:	10624dd3 	.word	0x10624dd3

080088b8 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 80088b8:	8983      	ldrh	r3, [r0, #12]
 80088ba:	b12b      	cbz	r3, 80088c8 <EAC_Exec+0x10>
  {
    pHandle->hRemainingTicks--;
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29b      	uxth	r3, r3
 80088c0:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 80088c2:	b11b      	cbz	r3, 80088cc <EAC_Exec+0x14>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 80088c4:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 80088c6:	4770      	bx	lr
  bool retVal = true;
 80088c8:	2001      	movs	r0, #1
 80088ca:	4770      	bx	lr
{
 80088cc:	b510      	push	{r4, lr}
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 80088ce:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80088d2:	7e03      	ldrb	r3, [r0, #24]
 80088d4:	fb91 f1f3 	sdiv	r1, r1, r3
 80088d8:	4604      	mov	r4, r0
 80088da:	6880      	ldr	r0, [r0, #8]
 80088dc:	f000 f944 	bl	8008b68 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80088e0:	2001      	movs	r0, #1
 80088e2:	73a0      	strb	r0, [r4, #14]
}
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	bf00      	nop

080088e8 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80088e8:	7b80      	ldrb	r0, [r0, #14]
 80088ea:	4770      	bx	lr

080088ec <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80088ec:	73c1      	strb	r1, [r0, #15]
}
 80088ee:	4770      	bx	lr

080088f0 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80088f0:	7bc0      	ldrb	r0, [r0, #15]
 80088f2:	4770      	bx	lr

080088f4 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80088f4:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80088f6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 80088fa:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80088fc:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80088fe:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8008902:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008906:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008908:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 800890a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800890e:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8008910:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8008914:	6259      	str	r1, [r3, #36]	; 0x24
 8008916:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800891a:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 800891c:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800891e:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8008920:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8008924:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008928:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800892c:	619a      	str	r2, [r3, #24]
 800892e:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8008930:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8008934:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008938:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800893c:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8008940:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008942:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8008954:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8008958:	b13a      	cbz	r2, 800896a <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800895a:	3a01      	subs	r2, #1
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	3201      	adds	r2, #1
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	3028      	adds	r0, #40	; 0x28
  }
}
 8008964:	bc70      	pop	{r4, r5, r6}
 8008966:	f002 baa9 	b.w	800aebc <memset>
 800896a:	bc70      	pop	{r4, r5, r6}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop

08008970 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8008970:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8008972:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8008976:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8008978:	b13a      	cbz	r2, 800898a <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800897a:	3a01      	subs	r2, #1
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	3201      	adds	r2, #1
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	2100      	movs	r1, #0
 8008984:	3028      	adds	r0, #40	; 0x28
 8008986:	f002 fa99 	bl	800aebc <memset>
  }
  pHandle->SensorIsReliable = true;
 800898a:	2301      	movs	r3, #1
 800898c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8008990:	bd10      	pop	{r4, pc}
 8008992:	bf00      	nop

08008994 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8008994:	6a01      	ldr	r1, [r0, #32]
 8008996:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008998:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 800899a:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 800899c:	b289      	uxth	r1, r1
 800899e:	fb03 f301 	mul.w	r3, r3, r1
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80089a2:	2b00      	cmp	r3, #0
{
 80089a4:	4602      	mov	r2, r0
 80089a6:	bfbc      	itt	lt
 80089a8:	f64f 70ff 	movwlt	r0, #65535	; 0xffff
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80089ac:	181b      	addlt	r3, r3, r0
 80089ae:	141b      	asrs	r3, r3, #16

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80089b0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]

  pHandle->_Super.hMecAngle = mecAngle;
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80089b4:	7850      	ldrb	r0, [r2, #1]

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80089b6:	6894      	ldr	r4, [r2, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80089b8:	80d3      	strh	r3, [r2, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80089ba:	b29b      	uxth	r3, r3
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80089bc:	1a59      	subs	r1, r3, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80089be:	fb10 f303 	smulbb	r3, r0, r3
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80089c2:	fa04 f181 	sxtah	r1, r4, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80089c6:	b218      	sxth	r0, r3
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80089c8:	6091      	str	r1, [r2, #8]
  pHandle->_Super.hElAngle = elAngle;
 80089ca:	8090      	strh	r0, [r2, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 80089cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80089d4:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80089d6:	6a02      	ldr	r2, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80089d8:	f890 7075 	ldrb.w	r7, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80089dc:	68d3      	ldr	r3, [r2, #12]
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	60d3      	str	r3, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80089e4:	6a54      	ldr	r4, [r2, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
 80089e6:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 80089ea:	ea5f 7cd4 	movs.w	ip, r4, lsr #31
  pHandle->TimerOverflowNb = 0;
 80089ee:	f04f 0600 	mov.w	r6, #0
 80089f2:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089f6:	bf18      	it	ne
 80089f8:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80089fc:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089fe:	bf18      	it	ne
 8008a00:	6116      	strne	r6, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a02:	68d6      	ldr	r6, [r2, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8008a04:	b2ad      	uxth	r5, r5
 8008a06:	f046 0601 	orr.w	r6, r6, #1
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8008a0a:	4465      	add	r5, ip
 8008a0c:	60d6      	str	r6, [r2, #12]
 8008a0e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008a12:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8008a16:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 8008a1a:	bf98      	it	ls
 8008a1c:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8008a20:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  {
    pHandle->TimerOverflowError = true;
 8008a24:	bf88      	it	hi
 8008a26:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	bf88      	it	hi
 8008a2e:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
 8008a32:	1aa2      	subs	r2, r4, r2
 8008a34:	fb0c f505 	mul.w	r5, ip, r5
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8087 	beq.w	8008b4c <ENC_CalcAvrgMecSpeedUnit+0x178>
    /* encoder timer down-counting*/
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008a3e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8008a42:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008a44:	1b52      	subs	r2, r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008a46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	f000 8087 	beq.w	8008b5e <ENC_CalcAvrgMecSpeedUnit+0x18a>
 8008a50:	2f01      	cmp	r7, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a52:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a54:	d939      	bls.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a58:	2f02      	cmp	r7, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a5a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a5c:	d035      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a60:	2f03      	cmp	r7, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a62:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a64:	d031      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a66:	6b42      	ldr	r2, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a68:	2f04      	cmp	r7, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a6a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a6c:	d02d      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a6e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a70:	2f05      	cmp	r7, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a72:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a74:	d029      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a78:	2f06      	cmp	r7, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a7a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a7c:	d025      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a7e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a80:	2f07      	cmp	r7, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a82:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a84:	d021      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a86:	6c42      	ldr	r2, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a88:	2f08      	cmp	r7, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a8a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a8c:	d01d      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a8e:	6c82      	ldr	r2, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a90:	2f09      	cmp	r7, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a92:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a94:	d019      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a96:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a98:	2f0a      	cmp	r7, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a9a:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008a9c:	d015      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008a9e:	6d02      	ldr	r2, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008aa0:	2f0b      	cmp	r7, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008aa2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008aa4:	d011      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008aa6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008aa8:	2f0c      	cmp	r7, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008aaa:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008aac:	d00d      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008aae:	6d82      	ldr	r2, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ab0:	2f0d      	cmp	r7, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ab2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ab4:	d009      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ab6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ab8:	2f0e      	cmp	r7, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008aba:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008abc:	d005      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008abe:	6e02      	ldr	r2, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ac0:	2f0f      	cmp	r7, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ac2:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ac4:	d001      	beq.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ac6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008ac8:	4413      	add	r3, r2
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8008aca:	6a42      	ldr	r2, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8008acc:	fb0c f707 	mul.w	r7, ip, r7
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8008ad4:	fb93 f3f7 	sdiv	r3, r3, r7
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8008ad8:	b21f      	sxth	r7, r3
 8008ada:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008adc:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8008ae0:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8008ae4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8008ae8:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008aea:	320a      	adds	r2, #10
  pHandle->DeltaCapturesIndex++;
 8008aec:	3501      	adds	r5, #1
 8008aee:	b2ed      	uxtb	r5, r5
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008af0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  pHandle->DeltaCapturesIndex++;
 8008af4:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8008af8:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
  pHandle->PreviousCapture = CntCapture;
 8008afc:	f8a0 4072 	strh.w	r4, [r0, #114]	; 0x72
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8008b00:	eba3 030c 	sub.w	r3, r3, ip
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008b04:	fb07 f505 	mul.w	r5, r7, r5

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8008b08:	f890 c075 	ldrb.w	ip, [r0, #117]	; 0x75
 8008b0c:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8008b10:	7844      	ldrb	r4, [r0, #1]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008b12:	69c2      	ldr	r2, [r0, #28]
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8008b14:	8243      	strh	r3, [r0, #18]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8008b16:	45bc      	cmp	ip, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008b18:	fb04 f305 	mul.w	r3, r4, r5
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8008b1c:	f8b0 406e 	ldrh.w	r4, [r0, #110]	; 0x6e
 8008b20:	fb93 f3f4 	sdiv	r3, r3, r4
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008b24:	fb02 f203 	mul.w	r2, r2, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8008b28:	8b43      	ldrh	r3, [r0, #26]
 8008b2a:	fb92 f2f3 	sdiv	r2, r2, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8008b2e:	bf08      	it	eq
 8008b30:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8008b32:	81c2      	strh	r2, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8008b34:	bf08      	it	eq
 8008b36:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8008b3a:	b196      	cbz	r6, 8008b62 <ENC_CalcAvrgMecSpeedUnit+0x18e>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008b3c:	78c2      	ldrb	r2, [r0, #3]
 8008b3e:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8008b40:	2300      	movs	r3, #0
 8008b42:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8008b46:	bcf0      	pop	{r4, r5, r6, r7}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	4770      	bx	lr
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008b4c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8008b50:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008b52:	442a      	add	r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008b54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b58:	2f00      	cmp	r7, #0
 8008b5a:	f47f af79 	bne.w	8008a50 <ENC_CalcAvrgMecSpeedUnit+0x7c>
  int32_t wOverallAngleVariation = 0;
 8008b5e:	463b      	mov	r3, r7
 8008b60:	e7b3      	b.n	8008aca <ENC_CalcAvrgMecSpeedUnit+0xf6>
}
 8008b62:	bcf0      	pop	{r4, r5, r6, r7}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8008b64:	f001 bb82 	b.w	800a26c <SPD_IsMecSpeedReliable>

08008b68 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008b68:	7842      	ldrb	r2, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8008b6a:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008b6c:	b28b      	uxth	r3, r1
 8008b6e:	fb12 f203 	smulbb	r2, r2, r3
  if ( hMecAngle < 0 )
 8008b72:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008b74:	8082      	strh	r2, [r0, #4]
 8008b76:	bfb8      	it	lt
 8008b78:	f103 33ff 	addlt.w	r3, r3, #4294967295
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008b7c:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008b7e:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <ENC_SetMecAngle+0x30>)
 8008b84:	bfb8      	it	lt
 8008b86:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8008b88:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008b8c:	fba1 1303 	umull	r1, r3, r1, r3
 8008b90:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8008b92:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	80008001 	.word	0x80008001

08008b9c <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8008b9c:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8008b9e:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8008ba0:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	8243      	strh	r3, [r0, #18]
 8008bb4:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8008bb6:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8008bba:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8008bbe:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008bc2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8008bc6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8008bca:	4770      	bx	lr

08008bcc <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8008bcc:	b120      	cbz	r0, 8008bd8 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8008bce:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8008bd2:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8008bd4:	9b00      	ldr	r3, [sp, #0]
 8008bd6:	60c3      	str	r3, [r0, #12]
  }
}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop

08008bdc <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8008bdc:	b190      	cbz	r0, 8008c04 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8008bde:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8008be0:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8008be2:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008be4:	b151      	cbz	r1, 8008bfc <FCP_CalcCRC+0x20>
 8008be6:	1e4a      	subs	r2, r1, #1
 8008be8:	1c81      	adds	r1, r0, #2
 8008bea:	fa51 f282 	uxtab	r2, r1, r2
 8008bee:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8008bf0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8008bf4:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008bf6:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8008bf8:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008bfa:	d1f9      	bne.n	8008bf0 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8008bfc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8008c00:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8008c08:	b508      	push	{r3, lr}
 8008c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c0e:	2100      	movs	r1, #0
 8008c10:	f002 f954 	bl	800aebc <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8008c1a:	bd08      	pop	{r3, pc}

08008c1c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008c1c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8008c20:	1c53      	adds	r3, r2, #1
 8008c22:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8008c24:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8008c26:	bf88      	it	hi
 8008c28:	2300      	movhi	r3, #0
{
 8008c2a:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008c2c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8008c30:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8008c34:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8008c38:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008c40:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008c44:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008c46:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008c48:	d1fa      	bne.n	8008c40 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	bfb8      	it	lt
 8008c4e:	327f      	addlt	r2, #127	; 0x7f
 8008c50:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8008c52:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8008c56:	bc30      	pop	{r4, r5}
 8008c58:	4608      	mov	r0, r1
 8008c5a:	4770      	bx	lr

08008c5c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8008c5c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop

08008c64 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8008c64:	8a03      	ldrh	r3, [r0, #16]
 8008c66:	8b42      	ldrh	r2, [r0, #26]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d306      	bcc.n	8008c7a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8008c6c:	8b82      	ldrh	r2, [r0, #28]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d801      	bhi.n	8008c76 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 8008c72:	8ac0      	ldrh	r0, [r0, #22]
 8008c74:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8008c76:	2000      	movs	r0, #0
  }
  return hFault;
}
 8008c78:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8008c7a:	2008      	movs	r0, #8
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8008c80:	2300      	movs	r3, #0
 8008c82:	8203      	strh	r3, [r0, #16]
}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop

08008c88 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008c88:	7803      	ldrb	r3, [r0, #0]
 8008c8a:	b123      	cbz	r3, 8008c96 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 8008c8c:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008c8e:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8008c90:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008c92:	8203      	strh	r3, [r0, #16]
 8008c94:	4770      	bx	lr
{
 8008c96:	b510      	push	{r4, lr}
 8008c98:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8008c9a:	3004      	adds	r0, #4
 8008c9c:	f7fa faac 	bl	80031f8 <RCM_RegisterRegConv>
 8008ca0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f7ff ffeb 	bl	8008c80 <NTC_Clear>
}
 8008caa:	bd10      	pop	{r4, pc}

08008cac <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008cac:	7803      	ldrb	r3, [r0, #0]
 8008cae:	b11b      	cbz	r3, 8008cb8 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	82c3      	strh	r3, [r0, #22]
 8008cb4:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 8008cb6:	4770      	bx	lr
{
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008cbc:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008cc0:	f7fa fb6a 	bl	8003398 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8008cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	d007      	beq.n	8008cdc <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008ccc:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8008cce:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008cd0:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8008cd2:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8008cd6:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8008cda:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7ff ffc1 	bl	8008c64 <NTC_SetFaultState>
 8008ce2:	82e0      	strh	r0, [r4, #22]
}
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop

08008ce8 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008ce8:	7803      	ldrb	r3, [r0, #0]
 8008cea:	b113      	cbz	r3, 8008cf2 <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8008cec:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 8008cee:	b200      	sxth	r0, r0
 8008cf0:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8008cf2:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008cf4:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8008cf6:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008cfa:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008cfc:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8008cfe:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfbc      	itt	lt
 8008d06:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008d0a:	33ff      	addlt	r3, #255	; 0xff
 8008d0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8008d10:	b200      	sxth	r0, r0
 8008d12:	4770      	bx	lr

08008d14 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8008d14:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008d16:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008d18:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008d1a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008d1c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8008d1e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8008d20:	6283      	str	r3, [r0, #40]	; 0x28
}
 8008d22:	4770      	bx	lr

08008d24 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8008d24:	8081      	strh	r1, [r0, #4]
}
 8008d26:	4770      	bx	lr

08008d28 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8008d28:	80c1      	strh	r1, [r0, #6]
}
 8008d2a:	4770      	bx	lr

08008d2c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8008d2c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8008d34:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop

08008d3c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8008d3c:	6081      	str	r1, [r0, #8]

  return;
}
 8008d3e:	4770      	bx	lr

08008d40 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8008d40:	8b00      	ldrh	r0, [r0, #24]
 8008d42:	4770      	bx	lr

08008d44 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8008d44:	8b40      	ldrh	r0, [r0, #26]
 8008d46:	4770      	bx	lr

08008d48 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8008d48:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8008d4a:	4770      	bx	lr

08008d4c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8008d4c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop

08008d54 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008d54:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8008d58:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8008d5c:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008d5e:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008d62:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008d66:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8008d6a:	b18b      	cbz	r3, 8008d90 <PI_Controller+0x3c>
 8008d6c:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008d70:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8008d74:	187b      	adds	r3, r7, r1
 8008d76:	d424      	bmi.n	8008dc2 <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	da04      	bge.n	8008d86 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8008d7c:	4f16      	ldr	r7, [pc, #88]	; (8008dd8 <PI_Controller+0x84>)
 8008d7e:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8008d82:	bf28      	it	cs
 8008d84:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	dc03      	bgt.n	8008d92 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8008d8a:	6904      	ldr	r4, [r0, #16]
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	dc00      	bgt.n	8008d92 <PI_Controller+0x3e>
 8008d90:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8008d92:	8b81      	ldrh	r1, [r0, #28]
 8008d94:	8bc3      	ldrh	r3, [r0, #30]
 8008d96:	410a      	asrs	r2, r1
 8008d98:	fa44 f303 	asr.w	r3, r4, r3
 8008d9c:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	db08      	blt.n	8008db4 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8008da2:	429e      	cmp	r6, r3
 8008da4:	dd02      	ble.n	8008dac <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8008da6:	1af3      	subs	r3, r6, r3
 8008da8:	441c      	add	r4, r3
 8008daa:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8008dac:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 8008dae:	b218      	sxth	r0, r3
}
 8008db0:	bcf0      	pop	{r4, r5, r6, r7}
 8008db2:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8008db4:	1aeb      	subs	r3, r5, r3
 8008db6:	441c      	add	r4, r3
 8008db8:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 8008dba:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 8008dbc:	b218      	sxth	r0, r3
}
 8008dbe:	bcf0      	pop	{r4, r5, r6, r7}
 8008dc0:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	dddf      	ble.n	8008d86 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	dddd      	ble.n	8008d86 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008dca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d1df      	bne.n	8008d92 <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	e7dc      	b.n	8008d90 <PI_Controller+0x3c>
 8008dd6:	bf00      	nop
 8008dd8:	80000001 	.word	0x80000001

08008ddc <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8008ddc:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
{
 8008de0:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8008de2:	b1b3      	cbz	r3, 8008e12 <PID_Controller+0x36>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8008de4:	6a84      	ldr	r4, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8008de6:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8008de8:	4605      	mov	r5, r0
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8008dea:	1b0c      	subs	r4, r1, r4
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8008dec:	fb03 f304 	mul.w	r3, r3, r4
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 8008df0:	62a9      	str	r1, [r5, #40]	; 0x28
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8008df2:	fa43 f606 	asr.w	r6, r3, r6

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8008df6:	f7ff ffad 	bl	8008d54 <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8008dfa:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8008dfe:	4430      	add	r0, r6
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8008e00:	4283      	cmp	r3, r0
 8008e02:	db04      	blt.n	8008e0e <PID_Controller+0x32>
    {
      wTemp_output = pHandle->hUpperOutputLimit;
    }
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 8008e04:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8008e08:	4283      	cmp	r3, r0
 8008e0a:	bfb8      	it	lt
 8008e0c:	4603      	movlt	r3, r0
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8008e0e:	b218      	sxth	r0, r3
 8008e10:	bd70      	pop	{r4, r5, r6, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8008e12:	f7ff ff9f 	bl	8008d54 <PI_Controller>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	b218      	sxth	r0, r3
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008e1c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8008e20:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008e22:	8b0c      	ldrh	r4, [r1, #24]
 8008e24:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008e26:	898a      	ldrh	r2, [r1, #12]
 8008e28:	8acb      	ldrh	r3, [r1, #22]
{
 8008e2a:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008e2c:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e30:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8008e34:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008e38:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e3c:	f7ff fcc0 	bl	80087c0 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8008e40:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8008e44:	490f      	ldr	r1, [pc, #60]	; (8008e84 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e46:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8008e4a:	bfb8      	it	lt
 8008e4c:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e50:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 8008e54:	bfb8      	it	lt
 8008e56:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e58:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8008e5a:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e5c:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8008e60:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8008e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e68:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8008e6a:	fb81 2103 	smull	r2, r1, r1, r3
 8008e6e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8008e70:	4630      	mov	r0, r6
 8008e72:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8008e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8008e7a:	f7ff becf 	b.w	8008c1c <MPM_CalcElMotorPower>
 8008e7e:	bf00      	nop
 8008e80:	1b4e81b5 	.word	0x1b4e81b5
 8008e84:	66666667 	.word	0x66666667

08008e88 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8008e88:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8008e8a:	4b18      	ldr	r3, [pc, #96]	; (8008eec <startTimers+0x64>)
 8008e8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e8e:	07d2      	lsls	r2, r2, #31
 8008e90:	b082      	sub	sp, #8
 8008e92:	d415      	bmi.n	8008ec0 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008e9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008ea2:	f002 0201 	and.w	r2, r2, #1
 8008ea6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008ea8:	9a01      	ldr	r2, [sp, #4]
 8008eaa:	694a      	ldr	r2, [r1, #20]
 8008eac:	f042 0201 	orr.w	r2, r2, #1
 8008eb0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008eb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8008eba:	b002      	add	sp, #8
 8008ebc:	bc30      	pop	{r4, r5}
 8008ebe:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8008ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008ec4:	4c0a      	ldr	r4, [pc, #40]	; (8008ef0 <startTimers+0x68>)
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	6859      	ldr	r1, [r3, #4]
 8008eca:	4d0a      	ldr	r5, [pc, #40]	; (8008ef4 <startTimers+0x6c>)
 8008ecc:	4021      	ands	r1, r4
 8008ece:	f041 0120 	orr.w	r1, r1, #32
 8008ed2:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ed4:	6958      	ldr	r0, [r3, #20]
 8008ed6:	f040 0001 	orr.w	r0, r0, #1
 8008eda:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008edc:	6859      	ldr	r1, [r3, #4]
 8008ede:	402a      	ands	r2, r5
 8008ee0:	4021      	ands	r1, r4
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
}
 8008ee6:	b002      	add	sp, #8
 8008ee8:	bc30      	pop	{r4, r5}
 8008eea:	4770      	bx	lr
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	fdffff8f 	.word	0xfdffff8f
 8008ef4:	02000070 	.word	0x02000070

08008ef8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8008ef8:	b470      	push	{r4, r5, r6}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8008efa:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8008efc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8008f00:	3201      	adds	r2, #1
 8008f02:	2c60      	cmp	r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8008f04:	bf18      	it	ne
 8008f06:	0852      	lsrne	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008f08:	f06f 0602 	mvn.w	r6, #2
 8008f0c:	0155      	lsls	r5, r2, #5
 8008f0e:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8008f10:	2400      	movs	r4, #0
  while (*cnt < NB_CONVERSIONS)
 8008f12:	e002      	b.n	8008f1a <waitForPolarizationEnd+0x22>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008f14:	6902      	ldr	r2, [r0, #16]
 8008f16:	0792      	lsls	r2, r2, #30
 8008f18:	d404      	bmi.n	8008f24 <waitForPolarizationEnd+0x2c>
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	2a0f      	cmp	r2, #15
 8008f1e:	d9f9      	bls.n	8008f14 <waitForPolarizationEnd+0x1c>
          break;
        }
      }
    }
  }
}
 8008f20:	bc70      	pop	{r4, r5, r6}
 8008f22:	4770      	bx	lr
      hCalibrationPeriodCounter++;
 8008f24:	3401      	adds	r4, #1
 8008f26:	b2a4      	uxth	r4, r4
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008f28:	42a5      	cmp	r5, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008f2a:	6106      	str	r6, [r0, #16]
 8008f2c:	d8f5      	bhi.n	8008f1a <waitForPolarizationEnd+0x22>
        if (*cnt < NB_CONVERSIONS)
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	2a0f      	cmp	r2, #15
 8008f32:	d8f2      	bhi.n	8008f1a <waitForPolarizationEnd+0x22>
          *SWerror = 1u;
 8008f34:	2301      	movs	r3, #1
 8008f36:	800b      	strh	r3, [r1, #0]
          break;
 8008f38:	e7f2      	b.n	8008f20 <waitForPolarizationEnd+0x28>
 8008f3a:	bf00      	nop

08008f3c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8008f3c:	6843      	ldr	r3, [r0, #4]
 8008f3e:	4718      	bx	r3

08008f40 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8008f40:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f42:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f46:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f48:	140c      	asrs	r4, r1, #16
{
 8008f4a:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f4c:	fb02 f404 	mul.w	r4, r2, r4
{
 8008f50:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f52:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f56:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f58:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f5a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f5e:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8008f60:	4421      	add	r1, r4
 8008f62:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f66:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8008f6a:	106d      	asrs	r5, r5, #1
 8008f6c:	ea4f 0292 	mov.w	r2, r2, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f70:	ea4f 0666 	mov.w	r6, r6, asr #1
  if ( wY < 0 )
 8008f74:	d46e      	bmi.n	8009054 <PWMC_SetPhaseVoltage+0x114>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	db4c      	blt.n	8009014 <PWMC_SetPhaseVoltage+0xd4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008f7a:	1bad      	subs	r5, r5, r6
 8008f7c:	bf44      	itt	mi
 8008f7e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8008f82:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfbc      	itt	lt
 8008f8a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8008f8e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008f92:	2900      	cmp	r1, #0
 8008f94:	bfb8      	it	lt
 8008f96:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008f9a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008f9e:	bfb8      	it	lt
 8008fa0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8008fa4:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8008fa6:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008faa:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 8008fae:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8008fb2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8008fb6:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8008fb8:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8008fba:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8008fbe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008fc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fc6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8008fd2:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8008fd4:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8008fd6:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8008fd8:	d118      	bne.n	800900c <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8008fda:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
 8008fde:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8008fe2:	2d00      	cmp	r5, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8008fe4:	bfcc      	ite	gt
 8008fe6:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8008fe8:	1b12      	suble	r2, r2, r4
 8008fea:	b292      	uxth	r2, r2
    }

    if ( pHandle->Ib > 0 )
 8008fec:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
 8008ff0:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8008ff2:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8008ff6:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8008ff8:	bfcc      	ite	gt
 8008ffa:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8008ffc:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8008ffe:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8009000:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8009002:	bfcc      	ite	gt
 8009004:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8009006:	1b09      	suble	r1, r1, r4
 8009008:	8683      	strh	r3, [r0, #52]	; 0x34
 800900a:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800900c:	6983      	ldr	r3, [r0, #24]
}
 800900e:	b003      	add	sp, #12
 8009010:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8009012:	4718      	bx	r3
      if ( wX <= 0 )
 8009014:	2c00      	cmp	r4, #0
 8009016:	dd3c      	ble.n	8009092 <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfb8      	it	lt
 800901c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8009020:	f04f 0100 	mov.w	r1, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8009024:	bfb8      	it	lt
 8009026:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800902a:	1ba5      	subs	r5, r4, r6
        pHandle->Sector = SECTOR_1;
 800902c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8009030:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009032:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009036:	bfb8      	it	lt
 8009038:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800903c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009040:	bfb8      	it	lt
 8009042:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8009046:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhC;
 800904a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800904e:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8009050:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8009052:	e7b2      	b.n	8008fba <PWMC_SetPhaseVoltage+0x7a>
    if ( wZ < 0 )
 8009054:	2e00      	cmp	r6, #0
 8009056:	db5d      	blt.n	8009114 <PWMC_SetPhaseVoltage+0x1d4>
      if ( wX <= 0 )
 8009058:	2c00      	cmp	r4, #0
 800905a:	dd38      	ble.n	80090ce <PWMC_SetPhaseVoltage+0x18e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800905c:	1b2d      	subs	r5, r5, r4
 800905e:	bf44      	itt	mi
 8009060:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8009064:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8009068:	2900      	cmp	r1, #0
 800906a:	bfb8      	it	lt
 800906c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009070:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8009074:	bfb8      	it	lt
 8009076:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_3;
 800907a:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 800907c:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8009080:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8009084:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8009088:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800908a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800908c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8009090:	e793      	b.n	8008fba <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8009092:	2900      	cmp	r1, #0
 8009094:	bfb8      	it	lt
 8009096:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800909a:	f04f 0305 	mov.w	r3, #5
        wTimePhC = wTimePhA - wY / 131072;
 800909e:	bfb8      	it	lt
 80090a0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80090a4:	1b2d      	subs	r5, r5, r4
        pHandle->Sector = SECTOR_6;
 80090a6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 80090aa:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80090ac:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80090b0:	bfb8      	it	lt
 80090b2:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80090b6:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80090ba:	bfb8      	it	lt
 80090bc:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80090c0:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhB;
 80090c4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 80090c8:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80090ca:	87c1      	strh	r1, [r0, #62]	; 0x3e
 80090cc:	e775      	b.n	8008fba <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80090ce:	1ba5      	subs	r5, r4, r6
 80090d0:	bf44      	itt	mi
 80090d2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80090d6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfb8      	it	lt
 80090de:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80090e2:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80090e6:	bfb8      	it	lt
 80090e8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80090ec:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 80090f0:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80090f2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80090f6:	bfb8      	it	lt
 80090f8:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80090fc:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009100:	bfb8      	it	lt
 8009102:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8009106:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhC;
 800910a:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800910c:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800910e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8009112:	e752      	b.n	8008fba <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009114:	1bad      	subs	r5, r5, r6
 8009116:	bf44      	itt	mi
 8009118:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800911c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfbc      	itt	lt
 8009124:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8009128:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800912c:	2900      	cmp	r1, #0
 800912e:	bfb8      	it	lt
 8009130:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009134:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8009138:	bfb8      	it	lt
 800913a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800913e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8009140:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8009144:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pHandle->Sector = SECTOR_5;
 8009148:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 800914c:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800914e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8009150:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8009154:	e731      	b.n	8008fba <PWMC_SetPhaseVoltage+0x7a>
 8009156:	bf00      	nop

08009158 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8009158:	6883      	ldr	r3, [r0, #8]
 800915a:	4718      	bx	r3

0800915c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800915c:	b510      	push	{r4, lr}
 800915e:	4604      	mov	r4, r0
 8009160:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8009162:	b1a1      	cbz	r1, 800918e <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8009164:	2901      	cmp	r1, #1
 8009166:	d002      	beq.n	800916e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8009168:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800916a:	b002      	add	sp, #8
 800916c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800916e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009172:	b1d3      	cbz	r3, 80091aa <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 8009174:	3b01      	subs	r3, #1
 8009176:	b29b      	uxth	r3, r3
 8009178:	9101      	str	r1, [sp, #4]
 800917a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1f2      	bne.n	8009168 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8009182:	6903      	ldr	r3, [r0, #16]
 8009184:	4798      	blx	r3
        retVal = true;
 8009186:	9901      	ldr	r1, [sp, #4]
 8009188:	4608      	mov	r0, r1
}
 800918a:	b002      	add	sp, #8
 800918c:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 800918e:	f7ff ffe3 	bl	8009158 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8009192:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8009196:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e4      	bne.n	8009168 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800919e:	4620      	mov	r0, r4
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	4798      	blx	r3
      retVal = true;
 80091a4:	2001      	movs	r0, #1
}
 80091a6:	b002      	add	sp, #8
 80091a8:	bd10      	pop	{r4, pc}
      retVal = true;
 80091aa:	4608      	mov	r0, r1
}
 80091ac:	b002      	add	sp, #8
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80091b0:	69c3      	ldr	r3, [r0, #28]
 80091b2:	4718      	bx	r3

080091b4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80091b4:	6883      	ldr	r3, [r0, #8]
 80091b6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80091ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091be:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80091c0:	6883      	ldr	r3, [r0, #8]
 80091c2:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 80091c4:	b082      	sub	sp, #8
 80091c6:	d417      	bmi.n	80091f8 <R3_2_ADCxInit+0x44>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 80091c8:	4b24      	ldr	r3, [pc, #144]	; (800925c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 80091ca:	6882      	ldr	r2, [r0, #8]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4924      	ldr	r1, [pc, #144]	; (8009260 <R3_2_ADCxInit+0xac>)
 80091d0:	099b      	lsrs	r3, r3, #6
 80091d2:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80091d6:	fba1 1303 	umull	r1, r3, r1, r3
 80091da:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80091de:	099b      	lsrs	r3, r3, #6
 80091e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80091e4:	6082      	str	r2, [r0, #8]
 80091e6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	b12b      	cbz	r3, 80091f8 <R3_2_ADCxInit+0x44>
    {
      wait_loop_index--;
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1f9      	bne.n	80091ec <R3_2_ADCxInit+0x38>
  MODIFY_REG(ADCx->CR,
 80091f8:	6883      	ldr	r3, [r0, #8]
 80091fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009206:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009208:	6883      	ldr	r3, [r0, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	dbfc      	blt.n	8009208 <R3_2_ADCxInit+0x54>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800920e:	6803      	ldr	r3, [r0, #0]
 8009210:	07da      	lsls	r2, r3, #31
 8009212:	d408      	bmi.n	8009226 <R3_2_ADCxInit+0x72>
  MODIFY_REG(ADCx->CR,
 8009214:	4a13      	ldr	r2, [pc, #76]	; (8009264 <R3_2_ADCxInit+0xb0>)
 8009216:	6883      	ldr	r3, [r0, #8]
 8009218:	4013      	ands	r3, r2
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009220:	6803      	ldr	r3, [r0, #0]
 8009222:	07db      	lsls	r3, r3, #31
 8009224:	d5f7      	bpl.n	8009216 <R3_2_ADCxInit+0x62>
  MODIFY_REG(ADCx->CR,
 8009226:	6882      	ldr	r2, [r0, #8]
 8009228:	490e      	ldr	r1, [pc, #56]	; (8009264 <R3_2_ADCxInit+0xb0>)
 800922a:	400a      	ands	r2, r1
 800922c:	f042 0208 	orr.w	r2, r2, #8
 8009230:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009232:	6882      	ldr	r2, [r0, #8]
 8009234:	400a      	ands	r2, r1
 8009236:	f042 0220 	orr.w	r2, r2, #32
 800923a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800923c:	68c3      	ldr	r3, [r0, #12]
 800923e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800924a:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 800924c:	6883      	ldr	r3, [r0, #8]
 800924e:	400b      	ands	r3, r1
 8009250:	f043 0304 	orr.w	r3, r3, #4
 8009254:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8009256:	b002      	add	sp, #8
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000680 	.word	0x20000680
 8009260:	053e2d63 	.word	0x053e2d63
 8009264:	7fffffc0 	.word	0x7fffffc0

08009268 <R3_2_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8009268:	b4f0      	push	{r4, r5, r6, r7}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800926a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800926c:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009270:	689d      	ldr	r5, [r3, #8]
 8009272:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009276:	2c05      	cmp	r4, #5
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8009278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800927a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800927c:	6813      	ldr	r3, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800927e:	6836      	ldr	r6, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009280:	686a      	ldr	r2, [r5, #4]
 8009282:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009286:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800928a:	606a      	str	r2, [r5, #4]
 800928c:	d821      	bhi.n	80092d2 <R3_2_GetPhaseCurrents+0x6a>
 800928e:	2501      	movs	r5, #1
 8009290:	fa05 f404 	lsl.w	r4, r5, r4
 8009294:	f014 0f21 	tst.w	r4, #33	; 0x21
 8009298:	d12c      	bne.n	80092f4 <R3_2_GetPhaseCurrents+0x8c>
 800929a:	f014 0f06 	tst.w	r4, #6
 800929e:	d044      	beq.n	800932a <R3_2_GetPhaseCurrents+0xc2>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092a0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80092a2:	4d53      	ldr	r5, [pc, #332]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80092a4:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 80092a6:	42ac      	cmp	r4, r5
 80092a8:	da75      	bge.n	8009396 <R3_2_GetPhaseCurrents+0x12e>
 80092aa:	462c      	mov	r4, r5
      {
        Iab->a = -INT16_MAX;
 80092ac:	800d      	strh	r5, [r1, #0]
 80092ae:	462f      	mov	r7, r5
 80092b0:	f248 0301 	movw	r3, #32769	; 0x8001
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80092b4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80092b6:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80092b8:	1b12      	subs	r2, r2, r4

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 80092ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80092be:	da74      	bge.n	80093aa <R3_2_GetPhaseCurrents+0x142>
      {
        Iab->b = INT16_MAX;
      }
      else  if ( Aux < -INT16_MAX )
 80092c0:	4c4b      	ldr	r4, [pc, #300]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
 80092c2:	42a2      	cmp	r2, r4
 80092c4:	db7d      	blt.n	80093c2 <R3_2_GetPhaseCurrents+0x15a>
      {
        Iab->b = -INT16_MAX;
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 80092c6:	fa0f fc82 	sxth.w	ip, r2
 80092ca:	f8a1 c002 	strh.w	ip, [r1, #2]
 80092ce:	b292      	uxth	r2, r2
 80092d0:	e006      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 80092d2:	f9b1 7000 	ldrsh.w	r7, [r1]
 80092d6:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 80092da:	b2bb      	uxth	r3, r7
 80092dc:	fa1f f28c 	uxth.w	r2, ip
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80092e0:	4413      	add	r3, r2
 80092e2:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 80092e4:	f8a0 7048 	strh.w	r7, [r0, #72]	; 0x48
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80092e8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 80092ec:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
}
 80092f0:	bcf0      	pop	{r4, r5, r6, r7}
 80092f2:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80092f4:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80092f6:	4d3e      	ldr	r5, [pc, #248]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80092f8:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 80092fa:	42ac      	cmp	r4, r5
 80092fc:	db35      	blt.n	800936a <R3_2_GetPhaseCurrents+0x102>
      else  if ( Aux > INT16_MAX )
 80092fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009302:	db42      	blt.n	800938a <R3_2_GetPhaseCurrents+0x122>
        Iab->b = INT16_MAX;
 8009304:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009308:	461a      	mov	r2, r3
 800930a:	804b      	strh	r3, [r1, #2]
 800930c:	461c      	mov	r4, r3
 800930e:	469c      	mov	ip, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8009310:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8009312:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8009314:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8009316:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800931a:	da2c      	bge.n	8009376 <R3_2_GetPhaseCurrents+0x10e>
      else  if ( Aux < -INT16_MAX )
 800931c:	4f34      	ldr	r7, [pc, #208]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
 800931e:	42bc      	cmp	r4, r7
 8009320:	da2f      	bge.n	8009382 <R3_2_GetPhaseCurrents+0x11a>
        Iab->a = -INT16_MAX;
 8009322:	800f      	strh	r7, [r1, #0]
 8009324:	f248 0301 	movw	r3, #32769	; 0x8001
 8009328:	e7da      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 800932a:	f014 0f18 	tst.w	r4, #24
 800932e:	d0d0      	beq.n	80092d2 <R3_2_GetPhaseCurrents+0x6a>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8009330:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8009332:	4a2f      	ldr	r2, [pc, #188]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8009334:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 8009336:	4294      	cmp	r4, r2
 8009338:	db41      	blt.n	80093be <R3_2_GetPhaseCurrents+0x156>
      else  if ( Aux > INT16_MAX )
 800933a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
        Iab->a = INT16_MAX;
 800933e:	bfa6      	itte	ge
 8009340:	f647 73ff 	movwge	r3, #32767	; 0x7fff
 8009344:	800b      	strhge	r3, [r1, #0]
        Iab->a = ( int16_t )Aux;
 8009346:	800c      	strhlt	r4, [r1, #0]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8009348:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800934a:	4b29      	ldr	r3, [pc, #164]	; (80093f0 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800934c:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 800934e:	429a      	cmp	r2, r3
 8009350:	db3c      	blt.n	80093cc <R3_2_GetPhaseCurrents+0x164>
      else  if ( Aux > INT16_MAX )
 8009352:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009356:	db41      	blt.n	80093dc <R3_2_GetPhaseCurrents+0x174>
 8009358:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = INT16_MAX;
 800935c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009360:	804b      	strh	r3, [r1, #2]
 8009362:	461a      	mov	r2, r3
 8009364:	469c      	mov	ip, r3
 8009366:	b2bb      	uxth	r3, r7
 8009368:	e7ba      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 800936a:	462c      	mov	r4, r5
        Iab->b = -INT16_MAX;
 800936c:	804d      	strh	r5, [r1, #2]
 800936e:	46ac      	mov	ip, r5
 8009370:	f248 0201 	movw	r2, #32769	; 0x8001
 8009374:	e7cc      	b.n	8009310 <R3_2_GetPhaseCurrents+0xa8>
        Iab->a = INT16_MAX;
 8009376:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800937a:	4623      	mov	r3, r4
 800937c:	800c      	strh	r4, [r1, #0]
 800937e:	4627      	mov	r7, r4
 8009380:	e7ae      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 8009382:	b227      	sxth	r7, r4
 8009384:	800f      	strh	r7, [r1, #0]
 8009386:	b2a3      	uxth	r3, r4
 8009388:	e7aa      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
        Iab->b = ( int16_t )Aux;
 800938a:	fa0f fc84 	sxth.w	ip, r4
 800938e:	f8a1 c002 	strh.w	ip, [r1, #2]
 8009392:	b2a2      	uxth	r2, r4
 8009394:	e7bc      	b.n	8009310 <R3_2_GetPhaseCurrents+0xa8>
      else  if ( Aux > INT16_MAX )
 8009396:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800939a:	db0c      	blt.n	80093b6 <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 800939c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80093a0:	4613      	mov	r3, r2
 80093a2:	800a      	strh	r2, [r1, #0]
 80093a4:	4614      	mov	r4, r2
 80093a6:	4617      	mov	r7, r2
 80093a8:	e784      	b.n	80092b4 <R3_2_GetPhaseCurrents+0x4c>
        Iab->b = INT16_MAX;
 80093aa:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80093ae:	4622      	mov	r2, r4
 80093b0:	804c      	strh	r4, [r1, #2]
 80093b2:	46a4      	mov	ip, r4
 80093b4:	e794      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 80093b6:	b227      	sxth	r7, r4
 80093b8:	800f      	strh	r7, [r1, #0]
 80093ba:	b2a3      	uxth	r3, r4
 80093bc:	e77a      	b.n	80092b4 <R3_2_GetPhaseCurrents+0x4c>
        Iab->a = -INT16_MAX;
 80093be:	800a      	strh	r2, [r1, #0]
 80093c0:	e7c2      	b.n	8009348 <R3_2_GetPhaseCurrents+0xe0>
        Iab->b = -INT16_MAX;
 80093c2:	804c      	strh	r4, [r1, #2]
 80093c4:	46a4      	mov	ip, r4
 80093c6:	f248 0201 	movw	r2, #32769	; 0x8001
 80093ca:	e789      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 80093cc:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = -INT16_MAX;
 80093d0:	804b      	strh	r3, [r1, #2]
 80093d2:	469c      	mov	ip, r3
 80093d4:	f248 0201 	movw	r2, #32769	; 0x8001
 80093d8:	b2bb      	uxth	r3, r7
 80093da:	e781      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 80093dc:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = ( int16_t )Aux;
 80093e0:	fa0f fc82 	sxth.w	ip, r2
 80093e4:	b2bb      	uxth	r3, r7
 80093e6:	f8a1 c002 	strh.w	ip, [r1, #2]
 80093ea:	b292      	uxth	r2, r2
 80093ec:	e778      	b.n	80092e0 <R3_2_GetPhaseCurrents+0x78>
 80093ee:	bf00      	nop
 80093f0:	ffff8001 	.word	0xffff8001

080093f4 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80093f4:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80093f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80093f8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80093fc:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8009400:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009404:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009406:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009408:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800940a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800940c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800940e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009410:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8009412:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009414:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009416:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009418:	4904      	ldr	r1, [pc, #16]	; (800942c <R3_2_SetADCSampPointPolarization+0x38>)
 800941a:	685b      	ldr	r3, [r3, #4]
}
 800941c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009420:	420b      	tst	r3, r1
}
 8009422:	bf14      	ite	ne
 8009424:	2001      	movne	r0, #1
 8009426:	2000      	moveq	r0, #0
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	02000070 	.word	0x02000070

08009430 <R3_2_SetADCSampPointSectX>:
{
 8009430:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8009432:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8009436:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8009438:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800943a:	1aca      	subs	r2, r1, r3
 800943c:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8009440:	b292      	uxth	r2, r2
 8009442:	42b2      	cmp	r2, r6
 8009444:	d914      	bls.n	8009470 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8009446:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8009448:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800944a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 800944c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009450:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009452:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8009454:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8009456:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009458:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800945a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800945c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800945e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009460:	6852      	ldr	r2, [r2, #4]
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <R3_2_SetADCSampPointSectX+0x70>)
 8009464:	421a      	tst	r2, r3
}
 8009466:	bf14      	ite	ne
 8009468:	2001      	movne	r0, #1
 800946a:	2000      	moveq	r0, #0
 800946c:	bc70      	pop	{r4, r5, r6}
 800946e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8009470:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8009472:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8009474:	b2ad      	uxth	r5, r5
 8009476:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 800947a:	d904      	bls.n	8009486 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800947c:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	b29b      	uxth	r3, r3
 8009484:	e7e4      	b.n	8009450 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009486:	4433      	add	r3, r6
 8009488:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800948a:	4299      	cmp	r1, r3
 800948c:	d8e0      	bhi.n	8009450 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800948e:	43db      	mvns	r3, r3
 8009490:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8009494:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009498:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800949a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 800949e:	e7d7      	b.n	8009450 <R3_2_SetADCSampPointSectX+0x20>
 80094a0:	02000070 	.word	0x02000070

080094a4 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80094a4:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80094a8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80094b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80094b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80094b6:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80094b8:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80094ba:	6853      	ldr	r3, [r2, #4]
 80094bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80094c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c4:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80094c6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80094ca:	2b0f      	cmp	r3, #15
 80094cc:	d80b      	bhi.n	80094e6 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 80094ce:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 80094d2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 80094d6:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 80094d8:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80094da:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 80094dc:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 80094ea:	bc70      	pop	{r4, r5, r6}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80094f2:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80094f4:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094f8:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80094fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009500:	681c      	ldr	r4, [r3, #0]
 8009502:	6853      	ldr	r3, [r2, #4]
 8009504:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950c:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800950e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8009512:	2b0f      	cmp	r3, #15
 8009514:	d808      	bhi.n	8009528 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8009516:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800951a:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800951c:	3301      	adds	r3, #1
 800951e:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8009520:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8009522:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8009526:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 800952c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop

08009534 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009534:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8009536:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009538:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800953a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800953e:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009540:	f06f 0001 	mvn.w	r0, #1
 8009544:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009546:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009548:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800954a:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	07d2      	lsls	r2, r2, #31
 8009550:	d5fc      	bpl.n	800954c <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009554:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
 8009558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800955c:	2802      	cmp	r0, #2
 800955e:	645a      	str	r2, [r3, #68]	; 0x44
 8009560:	d000      	beq.n	8009564 <R3_2_TurnOnLowSides+0x30>
 8009562:	4770      	bx	lr
{
 8009564:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009566:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800956a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800956c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009570:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009574:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009578:	61ae      	str	r6, [r5, #24]
 800957a:	6184      	str	r4, [r0, #24]
 800957c:	619a      	str	r2, [r3, #24]
  }
  return;
}
 800957e:	bc70      	pop	{r4, r5, r6}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop

08009584 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009584:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8009586:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800958a:	688b      	ldr	r3, [r1, #8]
{
 800958c:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked=true; 
 800958e:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009590:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8009592:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009596:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800959a:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800959e:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80095a2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80095a4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80095a6:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80095a8:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80095aa:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80095ac:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	07d2      	lsls	r2, r2, #31
 80095b2:	d5fc      	bpl.n	80095ae <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80095b4:	f06f 0201 	mvn.w	r2, #1
 80095b8:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80095ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80095bc:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80095c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095c4:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80095c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80095c8:	2802      	cmp	r0, #2
 80095ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095ce:	645a      	str	r2, [r3, #68]	; 0x44
 80095d0:	d008      	beq.n	80095e4 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80095d2:	f06f 0201 	mvn.w	r2, #1
 80095d6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80095e0:	bcf0      	pop	{r4, r5, r6, r7}
 80095e2:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80095e4:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80095e8:	6a0d      	ldr	r5, [r1, #32]
 80095ea:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
 80095ee:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80095f0:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 80095f4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80095f6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80095fa:	f240 5755 	movw	r7, #1365	; 0x555
 80095fe:	ea1c 0f07 	tst.w	ip, r7
 8009602:	d103      	bne.n	800960c <R3_2_SwitchOnPWM+0x88>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8009604:	62ae      	str	r6, [r5, #40]	; 0x28
 8009606:	6284      	str	r4, [r0, #40]	; 0x28
 8009608:	6291      	str	r1, [r2, #40]	; 0x28
 800960a:	e7e2      	b.n	80095d2 <R3_2_SwitchOnPWM+0x4e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800960c:	61ae      	str	r6, [r5, #24]
 800960e:	6184      	str	r4, [r0, #24]
 8009610:	6191      	str	r1, [r2, #24]
 8009612:	e7de      	b.n	80095d2 <R3_2_SwitchOnPWM+0x4e>

08009614 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009614:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8009616:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	f022 0201 	bic.w	r2, r2, #1
{
 800961e:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8009620:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 8009624:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009628:	2500      	movs	r5, #0
 800962a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800962e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8009632:	645a      	str	r2, [r3, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8009634:	b91c      	cbnz	r4, 800963e <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009636:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800963a:	2a02      	cmp	r2, #2
 800963c:	d00d      	beq.n	800965a <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800963e:	f06f 0201 	mvn.w	r2, #1
 8009642:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	07d2      	lsls	r2, r2, #31
 8009648:	d5fc      	bpl.n	8009644 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800964a:	f06f 0101 	mvn.w	r1, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800964e:	2200      	movs	r2, #0
 8009650:	6119      	str	r1, [r3, #16]
}
 8009652:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 8009654:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
}
 8009658:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800965a:	e9d1 2408 	ldrd	r2, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800965e:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8009662:	6295      	str	r5, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009664:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009666:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800966a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800966e:	62a5      	str	r5, [r4, #40]	; 0x28
 8009670:	6291      	str	r1, [r2, #40]	; 0x28
 8009672:	e7e4      	b.n	800963e <R3_2_SwitchOffPWM+0x2a>

08009674 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8009674:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009676:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009678:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800967a:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800967c:	686a      	ldr	r2, [r5, #4]
 800967e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009686:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009688:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800968c:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800968e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009692:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8009694:	6800      	ldr	r0, [r0, #0]
 8009696:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 8009698:	4293      	cmp	r3, r2
 800969a:	db0e      	blt.n	80096ba <R3_2_RLGetPhaseCurrents+0x46>
  {
    if ( wAux < INT16_MAX )
 800969c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80096a0:	4293      	cmp	r3, r2
 80096a2:	dd05      	ble.n	80096b0 <R3_2_RLGetPhaseCurrents+0x3c>
 80096a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80096a8:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80096aa:	804b      	strh	r3, [r1, #2]
}
 80096ac:	bc30      	pop	{r4, r5}
 80096ae:	4770      	bx	lr
 80096b0:	b21b      	sxth	r3, r3
  pStator_Currents->a = (int16_t)wAux;
 80096b2:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80096b4:	804b      	strh	r3, [r1, #2]
}
 80096b6:	bc30      	pop	{r4, r5}
 80096b8:	4770      	bx	lr
 80096ba:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->a = (int16_t)wAux;
 80096bc:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 80096be:	804b      	strh	r3, [r1, #2]
}
 80096c0:	bc30      	pop	{r4, r5}
 80096c2:	4770      	bx	lr
 80096c4:	ffff8002 	.word	0xffff8002
 80096c8:	ffff8001 	.word	0xffff8001

080096cc <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096cc:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 80096ce:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096d0:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 80096d2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 80096d6:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80096d8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80096dc:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80096de:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80096e0:	6913      	ldr	r3, [r2, #16]
 80096e2:	07db      	lsls	r3, r3, #31
 80096e4:	d5fc      	bpl.n	80096e0 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80096e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80096e8:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
 80096ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f0:	2802      	cmp	r0, #2
 80096f2:	6453      	str	r3, [r2, #68]	; 0x44
 80096f4:	d000      	beq.n	80096f8 <R3_2_RLTurnOnLowSides+0x2c>
 80096f6:	4770      	bx	lr
{
 80096f8:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80096fa:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80096fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009700:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009704:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009708:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800970c:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800970e:	6284      	str	r4, [r0, #40]	; 0x28
 8009710:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8009712:	bc70      	pop	{r4, r5, r6}
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop

08009718 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009718:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800971a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800971c:	688b      	ldr	r3, [r1, #8]
{
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009722:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8009726:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800972a:	f06f 0201 	mvn.w	r2, #1
 800972e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009730:	691a      	ldr	r2, [r3, #16]
 8009732:	07d6      	lsls	r6, r2, #31
 8009734:	d5fc      	bpl.n	8009730 <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8009736:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800973a:	f06f 0701 	mvn.w	r7, #1
 800973e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009740:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009742:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009744:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009746:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	07d2      	lsls	r2, r2, #31
 800974c:	d5fc      	bpl.n	8009748 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800974e:	68da      	ldr	r2, [r3, #12]
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009750:	f891 60ba 	ldrb.w	r6, [r1, #186]	; 0xba
 8009754:	f042 0201 	orr.w	r2, r2, #1
 8009758:	60da      	str	r2, [r3, #12]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800975a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009760:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009764:	2e02      	cmp	r6, #2
 8009766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800976a:	645a      	str	r2, [r3, #68]	; 0x44
 800976c:	d117      	bne.n	800979e <R3_2_RLSwitchOnPWM+0x86>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800976e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8009772:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8009776:	f8b1 e0ac 	ldrh.w	lr, [r1, #172]	; 0xac
 800977a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800977c:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
 8009780:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009782:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8009786:	f240 5155 	movw	r1, #1365	; 0x555
 800978a:	ea18 0f01 	tst.w	r8, r1
  WRITE_REG(GPIOx->BSRR, PinMask);
 800978e:	bf15      	itete	ne
 8009790:	f8cc e018 	strne.w	lr, [ip, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8009794:	f8cc e028 	streq.w	lr, [ip, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009798:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800979a:	62b7      	streq	r7, [r6, #40]	; 0x28
 800979c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800979e:	2303      	movs	r3, #3
 80097a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 80097a4:	68aa      	ldr	r2, [r5, #8]
 80097a6:	4906      	ldr	r1, [pc, #24]	; (80097c0 <R3_2_RLSwitchOnPWM+0xa8>)
 80097a8:	400a      	ands	r2, r1
 80097aa:	f042 0208 	orr.w	r2, r2, #8
 80097ae:	60aa      	str	r2, [r5, #8]
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	400b      	ands	r3, r1
 80097b4:	f043 0308 	orr.w	r3, r3, #8
 80097b8:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80097ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097be:	bf00      	nop
 80097c0:	7fffffc0 	.word	0x7fffffc0

080097c4 <R3_2_Init>:
{
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	4607      	mov	r7, r0
 80097ca:	b091      	sub	sp, #68	; 0x44
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80097cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 80097ce:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8009afc <R3_2_Init+0x338>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 80097d2:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 80097d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80097d6:	686a      	ldr	r2, [r5, #4]
 80097d8:	9101      	str	r1, [sp, #4]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80097da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80097dc:	9102      	str	r1, [sp, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80097de:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80097e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80097e2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80097e6:	9103      	str	r1, [sp, #12]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80097e8:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80097ec:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80097f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80097f2:	9104      	str	r1, [sp, #16]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80097f4:	e9d3 9804 	ldrd	r9, r8, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80097f8:	e9d3 ec06 	ldrd	lr, ip, [r3, #24]
 80097fc:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80097fe:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009800:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009802:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009804:	f022 0220 	bic.w	r2, r2, #32
 8009808:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800980a:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800980c:	6872      	ldr	r2, [r6, #4]
 800980e:	f022 0204 	bic.w	r2, r2, #4
 8009812:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009814:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009816:	6872      	ldr	r2, [r6, #4]
 8009818:	f022 0220 	bic.w	r2, r2, #32
 800981c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800981e:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009820:	49b3      	ldr	r1, [pc, #716]	; (8009af0 <R3_2_Init+0x32c>)
 8009822:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8009824:	455c      	cmp	r4, fp
 8009826:	bf0c      	ite	eq
 8009828:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800982c:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8009830:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8009832:	f1ba 0f00 	cmp.w	sl, #0
 8009836:	d014      	beq.n	8009862 <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8009838:	f8da 2000 	ldr.w	r2, [sl]
 800983c:	b11a      	cbz	r2, 8009846 <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800983e:	6811      	ldr	r1, [r2, #0]
 8009840:	f041 0101 	orr.w	r1, r1, #1
 8009844:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8009846:	f8da 2004 	ldr.w	r2, [sl, #4]
 800984a:	b11a      	cbz	r2, 8009854 <R3_2_Init+0x90>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	f041 0101 	orr.w	r1, r1, #1
 8009852:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8009854:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009858:	b11a      	cbz	r2, 8009862 <R3_2_Init+0x9e>
 800985a:	6811      	ldr	r1, [r2, #0]
 800985c:	f041 0101 	orr.w	r1, r1, #1
 8009860:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8009862:	f1b9 0f00 	cmp.w	r9, #0
 8009866:	d051      	beq.n	800990c <R3_2_Init+0x148>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8009868:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 800986c:	2a01      	cmp	r2, #1
 800986e:	d041      	beq.n	80098f4 <R3_2_Init+0x130>
 8009870:	9a01      	ldr	r2, [sp, #4]
 8009872:	2a00      	cmp	r2, #0
 8009874:	d03e      	beq.n	80098f4 <R3_2_Init+0x130>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009876:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009878:	9005      	str	r0, [sp, #20]
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 800987a:	f8b3 00b6 	ldrh.w	r0, [r3, #182]	; 0xb6
 800987e:	4601      	mov	r1, r0
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8009880:	9805      	ldr	r0, [sp, #20]
 8009882:	ea4f 4a90 	mov.w	sl, r0, lsr #18
 8009886:	f00a 0a3c 	and.w	sl, sl, #60	; 0x3c
 800988a:	f102 0008 	add.w	r0, r2, #8
  SET_BIT(DACx->SWTRIGR,
 800988e:	9a05      	ldr	r2, [sp, #20]
 8009890:	f002 0b03 	and.w	fp, r2, #3
  MODIFY_REG(*preg,
 8009894:	f85a 2000 	ldr.w	r2, [sl, r0]
 8009898:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800989c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80098a0:	430a      	orrs	r2, r1
 80098a2:	f84a 2000 	str.w	r2, [sl, r0]
  SET_BIT(DACx->SWTRIGR,
 80098a6:	9801      	ldr	r0, [sp, #4]
 80098a8:	6842      	ldr	r2, [r0, #4]
 80098aa:	ea4b 0202 	orr.w	r2, fp, r2
 80098ae:	6042      	str	r2, [r0, #4]
  return ((READ_BIT(DACx->CR,
 80098b0:	9a05      	ldr	r2, [sp, #20]
 80098b2:	f002 0110 	and.w	r1, r2, #16
 80098b6:	9a01      	ldr	r2, [sp, #4]
 80098b8:	2001      	movs	r0, #1
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	fa00 f101 	lsl.w	r1, r0, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80098c0:	ea31 0202 	bics.w	r2, r1, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80098c4:	4a8b      	ldr	r2, [pc, #556]	; (8009af4 <R3_2_Init+0x330>)
 80098c6:	f000 81d5 	beq.w	8009c74 <R3_2_Init+0x4b0>
  SET_BIT(DACx->CR,
 80098ca:	9801      	ldr	r0, [sp, #4]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	f8df a228 	ldr.w	sl, [pc, #552]	; 8009af8 <R3_2_Init+0x334>
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	fbaa a202 	umull	sl, r2, sl, r2
 80098d8:	4301      	orrs	r1, r0
 80098da:	0cd2      	lsrs	r2, r2, #19
 80098dc:	9801      	ldr	r0, [sp, #4]
 80098de:	00d2      	lsls	r2, r2, #3
 80098e0:	6001      	str	r1, [r0, #0]
 80098e2:	9207      	str	r2, [sp, #28]
    while(wait_loop_index != 0UL)
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	b12a      	cbz	r2, 80098f4 <R3_2_Init+0x130>
      wait_loop_index--;
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	3a01      	subs	r2, #1
 80098ec:	9207      	str	r2, [sp, #28]
    while(wait_loop_index != 0UL)
 80098ee:	9a07      	ldr	r2, [sp, #28]
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d1f9      	bne.n	80098e8 <R3_2_Init+0x124>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80098f4:	f8d9 2000 	ldr.w	r2, [r9]
 80098f8:	f042 0201 	orr.w	r2, r2, #1
 80098fc:	f8c9 2000 	str.w	r2, [r9]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009900:	f8d9 2000 	ldr.w	r2, [r9]
 8009904:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009908:	f8c9 2000 	str.w	r2, [r9]
    if ( COMP_OCPBx != NULL )
 800990c:	f1b8 0f00 	cmp.w	r8, #0
 8009910:	d04c      	beq.n	80099ac <R3_2_Init+0x1e8>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8009912:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8009916:	2a01      	cmp	r2, #1
 8009918:	d03c      	beq.n	8009994 <R3_2_Init+0x1d0>
 800991a:	9802      	ldr	r0, [sp, #8]
 800991c:	2800      	cmp	r0, #0
 800991e:	d039      	beq.n	8009994 <R3_2_Init+0x1d0>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 8009922:	f8b3 b0b6 	ldrh.w	fp, [r3, #182]	; 0xb6
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8009926:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800992a:	3008      	adds	r0, #8
 800992c:	f009 093c 	and.w	r9, r9, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 8009930:	f002 0a03 	and.w	sl, r2, #3
  MODIFY_REG(*preg,
 8009934:	f859 1000 	ldr.w	r1, [r9, r0]
 8009938:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800993c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009940:	ea4b 0101 	orr.w	r1, fp, r1
 8009944:	f849 1000 	str.w	r1, [r9, r0]
  SET_BIT(DACx->SWTRIGR,
 8009948:	9802      	ldr	r0, [sp, #8]
 800994a:	6841      	ldr	r1, [r0, #4]
 800994c:	ea4a 0101 	orr.w	r1, sl, r1
 8009950:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(DACx->CR,
 8009952:	9902      	ldr	r1, [sp, #8]
 8009954:	f002 0210 	and.w	r2, r2, #16
 8009958:	2001      	movs	r0, #1
 800995a:	6809      	ldr	r1, [r1, #0]
 800995c:	fa00 f202 	lsl.w	r2, r0, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009960:	ea32 0101 	bics.w	r1, r2, r1
 8009964:	f000 814a 	beq.w	8009bfc <R3_2_Init+0x438>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009968:	4962      	ldr	r1, [pc, #392]	; (8009af4 <R3_2_Init+0x330>)
  SET_BIT(DACx->CR,
 800996a:	9802      	ldr	r0, [sp, #8]
 800996c:	6809      	ldr	r1, [r1, #0]
 800996e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8009af8 <R3_2_Init+0x334>
 8009972:	6800      	ldr	r0, [r0, #0]
 8009974:	fba9 9101 	umull	r9, r1, r9, r1
 8009978:	4302      	orrs	r2, r0
 800997a:	0cc9      	lsrs	r1, r1, #19
 800997c:	9802      	ldr	r0, [sp, #8]
 800997e:	00c9      	lsls	r1, r1, #3
 8009980:	6002      	str	r2, [r0, #0]
 8009982:	9109      	str	r1, [sp, #36]	; 0x24
    while(wait_loop_index != 0UL)
 8009984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009986:	b12a      	cbz	r2, 8009994 <R3_2_Init+0x1d0>
      wait_loop_index--;
 8009988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998a:	3a01      	subs	r2, #1
 800998c:	9209      	str	r2, [sp, #36]	; 0x24
    while(wait_loop_index != 0UL)
 800998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009990:	2a00      	cmp	r2, #0
 8009992:	d1f9      	bne.n	8009988 <R3_2_Init+0x1c4>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009994:	f8d8 2000 	ldr.w	r2, [r8]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	f8c8 2000 	str.w	r2, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80099a0:	f8d8 2000 	ldr.w	r2, [r8]
 80099a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80099a8:	f8c8 2000 	str.w	r2, [r8]
    if ( COMP_OCPCx != NULL )
 80099ac:	f1be 0f00 	cmp.w	lr, #0
 80099b0:	d04c      	beq.n	8009a4c <R3_2_Init+0x288>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 80099b2:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 80099b6:	2a01      	cmp	r2, #1
 80099b8:	d03c      	beq.n	8009a34 <R3_2_Init+0x270>
 80099ba:	9803      	ldr	r0, [sp, #12]
 80099bc:	2800      	cmp	r0, #0
 80099be:	d039      	beq.n	8009a34 <R3_2_Init+0x270>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80099c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 80099c2:	f8b3 a0b6 	ldrh.w	sl, [r3, #182]	; 0xb6
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 80099c6:	ea4f 4892 	mov.w	r8, r2, lsr #18
 80099ca:	3008      	adds	r0, #8
 80099cc:	f008 083c 	and.w	r8, r8, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80099d0:	f002 0903 	and.w	r9, r2, #3
  MODIFY_REG(*preg,
 80099d4:	f858 1000 	ldr.w	r1, [r8, r0]
 80099d8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80099dc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80099e0:	ea4a 0101 	orr.w	r1, sl, r1
 80099e4:	f848 1000 	str.w	r1, [r8, r0]
  SET_BIT(DACx->SWTRIGR,
 80099e8:	9803      	ldr	r0, [sp, #12]
 80099ea:	6841      	ldr	r1, [r0, #4]
 80099ec:	ea49 0101 	orr.w	r1, r9, r1
 80099f0:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(DACx->CR,
 80099f2:	9903      	ldr	r1, [sp, #12]
 80099f4:	f002 0210 	and.w	r2, r2, #16
 80099f8:	2001      	movs	r0, #1
 80099fa:	6809      	ldr	r1, [r1, #0]
 80099fc:	fa00 f202 	lsl.w	r2, r0, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009a00:	ea32 0101 	bics.w	r1, r2, r1
 8009a04:	f000 810e 	beq.w	8009c24 <R3_2_Init+0x460>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009a08:	493a      	ldr	r1, [pc, #232]	; (8009af4 <R3_2_Init+0x330>)
  SET_BIT(DACx->CR,
 8009a0a:	9803      	ldr	r0, [sp, #12]
 8009a0c:	6809      	ldr	r1, [r1, #0]
 8009a0e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009af8 <R3_2_Init+0x334>
 8009a12:	6800      	ldr	r0, [r0, #0]
 8009a14:	fba8 8101 	umull	r8, r1, r8, r1
 8009a18:	4302      	orrs	r2, r0
 8009a1a:	0cc9      	lsrs	r1, r1, #19
 8009a1c:	9803      	ldr	r0, [sp, #12]
 8009a1e:	00c9      	lsls	r1, r1, #3
 8009a20:	6002      	str	r2, [r0, #0]
 8009a22:	910b      	str	r1, [sp, #44]	; 0x2c
    while(wait_loop_index != 0UL)
 8009a24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a26:	b12a      	cbz	r2, 8009a34 <R3_2_Init+0x270>
      wait_loop_index--;
 8009a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a2a:	3a01      	subs	r2, #1
 8009a2c:	920b      	str	r2, [sp, #44]	; 0x2c
    while(wait_loop_index != 0UL)
 8009a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a30:	2a00      	cmp	r2, #0
 8009a32:	d1f9      	bne.n	8009a28 <R3_2_Init+0x264>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009a34:	f8de 2000 	ldr.w	r2, [lr]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	f8ce 2000 	str.w	r2, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009a40:	f8de 2000 	ldr.w	r2, [lr]
 8009a44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009a48:	f8ce 2000 	str.w	r2, [lr]
    if ( COMP_OVPx != NULL )
 8009a4c:	f1bc 0f00 	cmp.w	ip, #0
 8009a50:	d047      	beq.n	8009ae2 <R3_2_Init+0x31e>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8009a52:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009a56:	2a01      	cmp	r2, #1
 8009a58:	d037      	beq.n	8009aca <R3_2_Init+0x306>
 8009a5a:	9904      	ldr	r1, [sp, #16]
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	d034      	beq.n	8009aca <R3_2_Init+0x306>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8009a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 8009a62:	f8b3 80b8 	ldrh.w	r8, [r3, #184]	; 0xb8
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8009a66:	0c90      	lsrs	r0, r2, #18
 8009a68:	f000 003c 	and.w	r0, r0, #60	; 0x3c
 8009a6c:	3108      	adds	r1, #8
  SET_BIT(DACx->SWTRIGR,
 8009a6e:	f002 0e03 	and.w	lr, r2, #3
  MODIFY_REG(*preg,
 8009a72:	5843      	ldr	r3, [r0, r1]
 8009a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a7c:	ea48 0303 	orr.w	r3, r8, r3
 8009a80:	5043      	str	r3, [r0, r1]
  SET_BIT(DACx->SWTRIGR,
 8009a82:	9804      	ldr	r0, [sp, #16]
 8009a84:	6843      	ldr	r3, [r0, #4]
 8009a86:	ea4e 0303 	orr.w	r3, lr, r3
 8009a8a:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(DACx->CR,
 8009a8c:	f002 0210 	and.w	r2, r2, #16
 8009a90:	2101      	movs	r1, #1
 8009a92:	6803      	ldr	r3, [r0, #0]
 8009a94:	fa01 f202 	lsl.w	r2, r1, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009a98:	ea32 0303 	bics.w	r3, r2, r3
 8009a9c:	f000 80d6 	beq.w	8009c4c <R3_2_Init+0x488>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009aa0:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <R3_2_Init+0x330>)
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4814      	ldr	r0, [pc, #80]	; (8009af8 <R3_2_Init+0x334>)
  SET_BIT(DACx->CR,
 8009aa8:	6809      	ldr	r1, [r1, #0]
 8009aaa:	fba0 0303 	umull	r0, r3, r0, r3
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	0cdb      	lsrs	r3, r3, #19
 8009ab2:	9904      	ldr	r1, [sp, #16]
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	600a      	str	r2, [r1, #0]
 8009ab8:	930d      	str	r3, [sp, #52]	; 0x34
    while(wait_loop_index != 0UL)
 8009aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009abc:	b12b      	cbz	r3, 8009aca <R3_2_Init+0x306>
      wait_loop_index--;
 8009abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	930d      	str	r3, [sp, #52]	; 0x34
    while(wait_loop_index != 0UL)
 8009ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f9      	bne.n	8009abe <R3_2_Init+0x2fa>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009aca:	f8dc 3000 	ldr.w	r3, [ip]
 8009ace:	f043 0301 	orr.w	r3, r3, #1
 8009ad2:	f8cc 3000 	str.w	r3, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8009ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ade:	f8cc 3000 	str.w	r3, [ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009ae2:	68ab      	ldr	r3, [r5, #8]
 8009ae4:	07d8      	lsls	r0, r3, #31
 8009ae6:	d571      	bpl.n	8009bcc <R3_2_Init+0x408>
 8009ae8:	68b3      	ldr	r3, [r6, #8]
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d57a      	bpl.n	8009be4 <R3_2_Init+0x420>
 8009aee:	e007      	b.n	8009b00 <R3_2_Init+0x33c>
 8009af0:	e0042000 	.word	0xe0042000
 8009af4:	20000680 	.word	0x20000680
 8009af8:	431bde83 	.word	0x431bde83
 8009afc:	40012c00 	.word	0x40012c00
  volatile uint32_t Brk2Timeout = 1000;
 8009b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b04:	930f      	str	r3, [sp, #60]	; 0x3c
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009b06:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8009b08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b0a:	f023 0301 	bic.w	r3, r3, #1
 8009b0e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009b10:	6863      	ldr	r3, [r4, #4]
 8009b12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1a:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009b1c:	69a3      	ldr	r3, [r4, #24]
 8009b1e:	f043 0308 	orr.w	r3, r3, #8
 8009b22:	61a3      	str	r3, [r4, #24]
 8009b24:	69a3      	ldr	r3, [r4, #24]
 8009b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b2a:	61a3      	str	r3, [r4, #24]
 8009b2c:	69e3      	ldr	r3, [r4, #28]
 8009b2e:	f043 0308 	orr.w	r3, r3, #8
 8009b32:	61e3      	str	r3, [r4, #28]
 8009b34:	69e3      	ldr	r3, [r4, #28]
 8009b36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b3a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009b3c:	6963      	ldr	r3, [r4, #20]
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	6163      	str	r3, [r4, #20]
 8009b44:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d02c      	beq.n	8009ba6 <R3_2_Init+0x3e2>
    if ( pHandle->_Super.Motor == M1 )
 8009b4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b50:	b92b      	cbnz	r3, 8009b5e <R3_2_Init+0x39a>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8009b52:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d033      	beq.n	8009bc2 <R3_2_Init+0x3fe>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d046      	beq.n	8009bec <R3_2_Init+0x428>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009b5e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009b62:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8009b64:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8009b68:	b183      	cbz	r3, 8009b8c <R3_2_Init+0x3c8>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	05da      	lsls	r2, r3, #23
 8009b6e:	d50d      	bpl.n	8009b8c <R3_2_Init+0x3c8>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8009b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b72:	b15b      	cbz	r3, 8009b8c <R3_2_Init+0x3c8>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8009b74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b78:	e001      	b.n	8009b7e <R3_2_Init+0x3ba>
 8009b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b7c:	b133      	cbz	r3, 8009b8c <R3_2_Init+0x3c8>
 8009b7e:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8009b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b82:	3b01      	subs	r3, #1
 8009b84:	930f      	str	r3, [sp, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	05db      	lsls	r3, r3, #23
 8009b8a:	d4f6      	bmi.n	8009b7a <R3_2_Init+0x3b6>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009b8c:	68e3      	ldr	r3, [r4, #12]
 8009b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b92:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009b94:	6a23      	ldr	r3, [r4, #32]
 8009b96:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009b9a:	f043 0305 	orr.w	r3, r3, #5
 8009b9e:	6223      	str	r3, [r4, #32]
}
 8009ba0:	b011      	add	sp, #68	; 0x44
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8009ba6:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d109      	bne.n	8009bc2 <R3_2_Init+0x3fe>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8009bae:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 8009bb2:	2903      	cmp	r1, #3
 8009bb4:	d105      	bne.n	8009bc2 <R3_2_Init+0x3fe>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009bb6:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009bb8:	6963      	ldr	r3, [r4, #20]
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009bc0:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8009bc2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009bc6:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bca:	e7c8      	b.n	8009b5e <R3_2_Init+0x39a>
      R3_2_ADCxInit (ADCx_1);
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f7ff faf1 	bl	80091b4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8009bd6:	686b      	ldr	r3, [r5, #4]
 8009bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bdc:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009bde:	68b3      	ldr	r3, [r6, #8]
 8009be0:	07d9      	lsls	r1, r3, #31
 8009be2:	d48d      	bmi.n	8009b00 <R3_2_Init+0x33c>
      R3_2_ADCxInit (ADCx_2);
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff fae5 	bl	80091b4 <R3_2_ADCxInit>
 8009bea:	e789      	b.n	8009b00 <R3_2_Init+0x33c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009bec:	2101      	movs	r1, #1
 8009bee:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009bf0:	6961      	ldr	r1, [r4, #20]
 8009bf2:	f041 0101 	orr.w	r1, r1, #1
 8009bf6:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009bf8:	6323      	str	r3, [r4, #48]	; 0x30
 8009bfa:	e7b0      	b.n	8009b5e <R3_2_Init+0x39a>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009bfc:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <R3_2_Init+0x4d8>)
 8009bfe:	4928      	ldr	r1, [pc, #160]	; (8009ca0 <R3_2_Init+0x4dc>)
 8009c00:	6812      	ldr	r2, [r2, #0]
 8009c02:	fba1 1202 	umull	r1, r2, r1, r2
 8009c06:	0cd2      	lsrs	r2, r2, #19
 8009c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c0c:	920a      	str	r2, [sp, #40]	; 0x28
    while(wait_loop_index != 0UL)
 8009c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	f43f aebf 	beq.w	8009994 <R3_2_Init+0x1d0>
      wait_loop_index--;
 8009c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c18:	3a01      	subs	r2, #1
 8009c1a:	920a      	str	r2, [sp, #40]	; 0x28
    while(wait_loop_index != 0UL)
 8009c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d1f9      	bne.n	8009c16 <R3_2_Init+0x452>
 8009c22:	e6b7      	b.n	8009994 <R3_2_Init+0x1d0>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009c24:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <R3_2_Init+0x4d8>)
 8009c26:	491e      	ldr	r1, [pc, #120]	; (8009ca0 <R3_2_Init+0x4dc>)
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	fba1 1202 	umull	r1, r2, r1, r2
 8009c2e:	0cd2      	lsrs	r2, r2, #19
 8009c30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c34:	920c      	str	r2, [sp, #48]	; 0x30
    while(wait_loop_index != 0UL)
 8009c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	f43f aefb 	beq.w	8009a34 <R3_2_Init+0x270>
      wait_loop_index--;
 8009c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c40:	3a01      	subs	r2, #1
 8009c42:	920c      	str	r2, [sp, #48]	; 0x30
    while(wait_loop_index != 0UL)
 8009c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	d1f9      	bne.n	8009c3e <R3_2_Init+0x47a>
 8009c4a:	e6f3      	b.n	8009a34 <R3_2_Init+0x270>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009c4c:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <R3_2_Init+0x4d8>)
 8009c4e:	4a14      	ldr	r2, [pc, #80]	; (8009ca0 <R3_2_Init+0x4dc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	0cdb      	lsrs	r3, r3, #19
 8009c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009c5c:	930e      	str	r3, [sp, #56]	; 0x38
    while(wait_loop_index != 0UL)
 8009c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f43f af32 	beq.w	8009aca <R3_2_Init+0x306>
      wait_loop_index--;
 8009c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	930e      	str	r3, [sp, #56]	; 0x38
    while(wait_loop_index != 0UL)
 8009c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f9      	bne.n	8009c66 <R3_2_Init+0x4a2>
 8009c72:	e72a      	b.n	8009aca <R3_2_Init+0x306>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009c74:	490a      	ldr	r1, [pc, #40]	; (8009ca0 <R3_2_Init+0x4dc>)
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	fba1 1202 	umull	r1, r2, r1, r2
 8009c7c:	0cd2      	lsrs	r2, r2, #19
 8009c7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c82:	9208      	str	r2, [sp, #32]
    while(wait_loop_index != 0UL)
 8009c84:	9a08      	ldr	r2, [sp, #32]
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	f43f ae34 	beq.w	80098f4 <R3_2_Init+0x130>
      wait_loop_index--;
 8009c8c:	9a08      	ldr	r2, [sp, #32]
 8009c8e:	3a01      	subs	r2, #1
 8009c90:	9208      	str	r2, [sp, #32]
    while(wait_loop_index != 0UL)
 8009c92:	9a08      	ldr	r2, [sp, #32]
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	d1f9      	bne.n	8009c8c <R3_2_Init+0x4c8>
 8009c98:	e62c      	b.n	80098f4 <R3_2_Init+0x130>
 8009c9a:	bf00      	nop
 8009c9c:	20000680 	.word	0x20000680
 8009ca0:	431bde83 	.word	0x431bde83

08009ca4 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009ca4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009ca6:	4946      	ldr	r1, [pc, #280]	; (8009dc0 <R3_2_CurrentReadingPolarization+0x11c>)
{
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pHandle->PhaseAOffset = 0u;
 8009cac:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009cae:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009cb0:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 8009cb4:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 8009cb8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8009cba:	65c2      	str	r2, [r0, #92]	; 0x5c
 8009cbc:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8009cc0:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8009cc4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8009cc8:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009cca:	4b3e      	ldr	r3, [pc, #248]	; (8009dc4 <R3_2_CurrentReadingPolarization+0x120>)
 8009ccc:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009cce:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8009cd0:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009cd2:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009cd6:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8009cd8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8009cdc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8009ce0:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009ce2:	f7ff fc4f 	bl	8009584 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8009ce6:	4a38      	ldr	r2, [pc, #224]	; (8009dc8 <R3_2_CurrentReadingPolarization+0x124>)
 8009ce8:	686b      	ldr	r3, [r5, #4]
 8009cea:	4013      	ands	r3, r2
 8009cec:	2b70      	cmp	r3, #112	; 0x70
 8009cee:	d1fb      	bne.n	8009ce8 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	4936      	ldr	r1, [pc, #216]	; (8009dcc <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 8009cf4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009cf6:	400a      	ands	r2, r1
 8009cf8:	f042 0208 	orr.w	r2, r2, #8
 8009cfc:	60ba      	str	r2, [r7, #8]
 8009cfe:	68b3      	ldr	r3, [r6, #8]
 8009d00:	400b      	ands	r3, r1
 8009d02:	f043 0308 	orr.w	r3, r3, #8
 8009d06:	60b3      	str	r3, [r6, #8]
 8009d08:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8009d0c:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8009d10:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 8009d14:	4639      	mov	r1, r7
 8009d16:	4643      	mov	r3, r8
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f7ff f8ed 	bl	8008ef8 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff fc78 	bl	8009614 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8009d24:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8009d26:	4b2a      	ldr	r3, [pc, #168]	; (8009dd0 <R3_2_CurrentReadingPolarization+0x12c>)
 8009d28:	6063      	str	r3, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009d2a:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8009d2c:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8009d30:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8009d34:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009d38:	f7ff fc24 	bl	8009584 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8009d3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009d3e:	4639      	mov	r1, r7
 8009d40:	4643      	mov	r3, r8
 8009d42:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009d46:	4f23      	ldr	r7, [pc, #140]	; (8009dd4 <R3_2_CurrentReadingPolarization+0x130>)
  waitForPolarizationEnd( TIMx,
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f7ff f8d5 	bl	8008ef8 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff fc60 	bl	8009614 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009d54:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8009d5a:	481f      	ldr	r0, [pc, #124]	; (8009dd8 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009d5c:	6067      	str	r7, [r4, #4]
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009d5e:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009d60:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009d62:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009d66:	091b      	lsrs	r3, r3, #4
 8009d68:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009d6a:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8009d6c:	61a0      	str	r0, [r4, #24]
 8009d6e:	f023 0308 	bic.w	r3, r3, #8
 8009d72:	61ab      	str	r3, [r5, #24]
 8009d74:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009d76:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8009d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d7e:	61aa      	str	r2, [r5, #24]
 8009d80:	69ea      	ldr	r2, [r5, #28]
 8009d82:	f022 0208 	bic.w	r2, r2, #8
 8009d86:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d88:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009d8a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009d8c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009d8e:	69ab      	ldr	r3, [r5, #24]
 8009d90:	f043 0308 	orr.w	r3, r3, #8
 8009d94:	61ab      	str	r3, [r5, #24]
 8009d96:	69ab      	ldr	r3, [r5, #24]
 8009d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d9c:	61ab      	str	r3, [r5, #24]
 8009d9e:	69eb      	ldr	r3, [r5, #28]
 8009da0:	f043 0308 	orr.w	r3, r3, #8
 8009da4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009da6:	6a2b      	ldr	r3, [r5, #32]
 8009da8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009dac:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8009db0:	2204      	movs	r2, #4
 8009db2:	622b      	str	r3, [r5, #32]
 8009db4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 8009db8:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	080094a5 	.word	0x080094a5
 8009dc4:	080093f5 	.word	0x080093f5
 8009dc8:	02000070 	.word	0x02000070
 8009dcc:	7fffffc0 	.word	0x7fffffc0
 8009dd0:	080094f1 	.word	0x080094f1
 8009dd4:	08009269 	.word	0x08009269
 8009dd8:	08009431 	.word	0x08009431

08009ddc <R3_2_TIMx_UP_IRQHandler>:
{
 8009ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009de0:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8009de2:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
{
 8009de6:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009de8:	e9d2 6002 	ldrd	r6, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009dec:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d03c      	beq.n	8009e6e <R3_2_TIMx_UP_IRQHandler+0x92>
    while (ADCx_1->JSQR != 0x0u)
 8009df4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1fc      	bne.n	8009df4 <R3_2_TIMx_UP_IRQHandler+0x18>
 8009dfa:	b22d      	sxth	r5, r5
 8009dfc:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009e00:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    if (Opamp != NULL )
 8009e04:	f1bc 0f00 	cmp.w	ip, #0
 8009e08:	d007      	beq.n	8009e1a <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009e0a:	f8dc 0000 	ldr.w	r0, [ip]
 8009e0e:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8009e10:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8009e14:	4338      	orrs	r0, r7
 8009e16:	f8cc 0000 	str.w	r0, [ip]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009e1a:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8009e1e:	f1bc 0f00 	cmp.w	ip, #0
 8009e22:	d009      	beq.n	8009e38 <R3_2_TIMx_UP_IRQHandler+0x5c>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009e24:	f8dc 0000 	ldr.w	r0, [ip]
 8009e28:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8009e2c:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8009e30:	ea43 030e 	orr.w	r3, r3, lr
 8009e34:	f8cc 3000 	str.w	r3, [ip]
 8009e38:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e3c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009e40:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e42:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e46:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e48:	432b      	orrs	r3, r5
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e4a:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009e4c:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009e50:	6873      	ldr	r3, [r6, #4]
 8009e52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009e5e:	2280      	movs	r2, #128	; 0x80
 8009e60:	6073      	str	r3, [r6, #4]
}
 8009e62:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009e66:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 8009e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6e:	b22d      	sxth	r5, r5
 8009e70:	e7e2      	b.n	8009e38 <R3_2_TIMx_UP_IRQHandler+0x5c>
 8009e72:	bf00      	nop

08009e74 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8009e74:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8009e78:	b923      	cbnz	r3, 8009e84 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009e7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009e7c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8009e80:	2a02      	cmp	r2, #2
 8009e82:	d004      	beq.n	8009e8e <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8009e8a:	3046      	adds	r0, #70	; 0x46
 8009e8c:	4770      	bx	lr
{
 8009e8e:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009e90:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009e94:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e9a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009e9c:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009ea0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009ea4:	628c      	str	r4, [r1, #40]	; 0x28
 8009ea6:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8009eae:	bc30      	pop	{r4, r5}
 8009eb0:	3046      	adds	r0, #70	; 0x46
 8009eb2:	4770      	bx	lr

08009eb4 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009eb4:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8009eb6:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009eb8:	6890      	ldr	r0, [r2, #8]
 8009eba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8009ebc:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ec2:	6442      	str	r2, [r0, #68]	; 0x44
}
 8009ec4:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8009ec8:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8009ecc:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop

08009ed4 <R3_2_IsOverCurrentOccurred>:
{
 8009ed4:	4602      	mov	r2, r0
  if ( pHandle->OverVoltageFlag == true )
 8009ed6:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 8009eda:	b160      	cbz	r0, 8009ef6 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009edc:	2300      	movs	r3, #0
 8009ede:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
 8009ee2:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009ee4:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8009ee6:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 8009eea:	b11b      	cbz	r3, 8009ef4 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8009eec:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 8009eee:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8009ef0:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
}
 8009ef4:	4770      	bx	lr
 8009ef6:	2140      	movs	r1, #64	; 0x40
 8009ef8:	e7f5      	b.n	8009ee6 <R3_2_IsOverCurrentOccurred+0x12>
 8009efa:	bf00      	nop

08009efc <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8009efc:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8009f00:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8009f02:	2900      	cmp	r1, #0
 8009f04:	d13c      	bne.n	8009f80 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009f06:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8009f08:	6893      	ldr	r3, [r2, #8]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009f0a:	f892 50ba 	ldrb.w	r5, [r2, #186]	; 0xba
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f14:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009f18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009f1c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009f1e:	6a1a      	ldr	r2, [r3, #32]
 8009f20:	f042 0201 	orr.w	r2, r2, #1
 8009f24:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009f26:	6a1a      	ldr	r2, [r3, #32]
 8009f28:	2d01      	cmp	r5, #1
 8009f2a:	f022 0204 	bic.w	r2, r2, #4
 8009f2e:	621a      	str	r2, [r3, #32]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009f30:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009f34:	6359      	str	r1, [r3, #52]	; 0x34
 8009f36:	d030      	beq.n	8009f9a <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009f38:	2d02      	cmp	r5, #2
 8009f3a:	d10f      	bne.n	8009f5c <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009f42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f4a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009f4c:	6a1a      	ldr	r2, [r3, #32]
 8009f4e:	f042 0210 	orr.w	r2, r2, #16
 8009f52:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009f5c:	6862      	ldr	r2, [r4, #4]
 8009f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f62:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009f66:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8009f6a:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009f6c:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009f6e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8009f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f74:	621a      	str	r2, [r3, #32]
 8009f76:	6a1a      	ldr	r2, [r3, #32]
 8009f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f7c:	621a      	str	r2, [r3, #32]
 8009f7e:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009f80:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009f82:	490f      	ldr	r1, [pc, #60]	; (8009fc0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009f84:	4a0f      	ldr	r2, [pc, #60]	; (8009fc4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009f86:	4c10      	ldr	r4, [pc, #64]	; (8009fc8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009f88:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8009f8a:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009f8c:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009f8e:	e9c0 2102 	strd	r2, r1, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 8009f92:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8009f96:	bc30      	pop	{r4, r5}
 8009f98:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009f9a:	699a      	ldr	r2, [r3, #24]
 8009f9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009fa0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fa8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009faa:	6a1a      	ldr	r2, [r3, #32]
 8009fac:	f022 0210 	bic.w	r2, r2, #16
 8009fb0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009fb2:	6a1a      	ldr	r2, [r3, #32]
 8009fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fb8:	621a      	str	r2, [r3, #32]
 8009fba:	e7cf      	b.n	8009f5c <R3_2_RLDetectionModeEnable+0x60>
 8009fbc:	08009675 	.word	0x08009675
 8009fc0:	08009719 	.word	0x08009719
 8009fc4:	08009615 	.word	0x08009615
 8009fc8:	080096cd 	.word	0x080096cd

08009fcc <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8009fcc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d03b      	beq.n	800a04c <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009fd4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8009fd6:	6893      	ldr	r3, [r2, #8]
{
 8009fd8:	b470      	push	{r4, r5, r6}
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8009fda:	f892 50ba 	ldrb.w	r5, [r2, #186]	; 0xba
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009fde:	4c40      	ldr	r4, [pc, #256]	; (800a0e0 <R3_2_RLDetectionModeDisable+0x114>)
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8009fe6:	4022      	ands	r2, r4
 8009fe8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009fec:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009fee:	6a19      	ldr	r1, [r3, #32]
 8009ff0:	2d01      	cmp	r5, #1
 8009ff2:	f041 0101 	orr.w	r1, r1, #1
 8009ff6:	6219      	str	r1, [r3, #32]
 8009ff8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ffc:	d027      	beq.n	800a04e <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009ffe:	2d02      	cmp	r5, #2
 800a000:	d049      	beq.n	800a096 <R3_2_RLDetectionModeDisable+0xca>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a002:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a004:	6999      	ldr	r1, [r3, #24]
 800a006:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800a00a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800a00e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800a012:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a014:	6a19      	ldr	r1, [r3, #32]
 800a016:	f041 0110 	orr.w	r1, r1, #16
 800a01a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a01c:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a01e:	69d9      	ldr	r1, [r3, #28]
 800a020:	400c      	ands	r4, r1
 800a022:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800a026:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a028:	6a19      	ldr	r1, [r3, #32]
 800a02a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a02e:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800a030:	492c      	ldr	r1, [pc, #176]	; (800a0e4 <R3_2_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a032:	4a2d      	ldr	r2, [pc, #180]	; (800a0e8 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a034:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a036:	4d2d      	ldr	r5, [pc, #180]	; (800a0ec <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a038:	4c2d      	ldr	r4, [pc, #180]	; (800a0f0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a03a:	6045      	str	r5, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 800a03c:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a03e:	6144      	str	r4, [r0, #20]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a040:	e9c0 2102 	strd	r2, r1, [r0, #8]
    pHandle->_Super.RLDetectionMode = false;
 800a044:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800a048:	bc70      	pop	{r4, r5, r6}
 800a04a:	4770      	bx	lr
 800a04c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800a04e:	6a19      	ldr	r1, [r3, #32]
 800a050:	f041 0104 	orr.w	r1, r1, #4
 800a054:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a056:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a058:	6999      	ldr	r1, [r3, #24]
 800a05a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800a05e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800a062:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800a066:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a068:	6a19      	ldr	r1, [r3, #32]
 800a06a:	f041 0110 	orr.w	r1, r1, #16
 800a06e:	6219      	str	r1, [r3, #32]
 800a070:	6a19      	ldr	r1, [r3, #32]
 800a072:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a076:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a078:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a07a:	69d9      	ldr	r1, [r3, #28]
 800a07c:	400c      	ands	r4, r1
 800a07e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800a082:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a084:	6a19      	ldr	r1, [r3, #32]
 800a086:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a08a:	6219      	str	r1, [r3, #32]
 800a08c:	6a19      	ldr	r1, [r3, #32]
 800a08e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800a092:	6219      	str	r1, [r3, #32]
 800a094:	e7cc      	b.n	800a030 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a096:	6a19      	ldr	r1, [r3, #32]
 800a098:	f021 0104 	bic.w	r1, r1, #4
 800a09c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a09e:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a0a0:	6999      	ldr	r1, [r3, #24]
 800a0a2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800a0a6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800a0aa:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800a0ae:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a0b0:	6a19      	ldr	r1, [r3, #32]
 800a0b2:	f041 0110 	orr.w	r1, r1, #16
 800a0b6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a0b8:	6a19      	ldr	r1, [r3, #32]
 800a0ba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a0be:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a0c0:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a0c2:	69d9      	ldr	r1, [r3, #28]
 800a0c4:	400c      	ands	r4, r1
 800a0c6:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800a0ca:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a0cc:	6a19      	ldr	r1, [r3, #32]
 800a0ce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a0d2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a0d4:	6a19      	ldr	r1, [r3, #32]
 800a0d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800a0da:	6219      	str	r1, [r3, #32]
 800a0dc:	e7a8      	b.n	800a030 <R3_2_RLDetectionModeDisable+0x64>
 800a0de:	bf00      	nop
 800a0e0:	fffeff8c 	.word	0xfffeff8c
 800a0e4:	08009585 	.word	0x08009585
 800a0e8:	08009615 	.word	0x08009615
 800a0ec:	08009269 	.word	0x08009269
 800a0f0:	08009535 	.word	0x08009535

0800a0f4 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a0f4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800a0f6:	6892      	ldr	r2, [r2, #8]
{
 800a0f8:	b470      	push	{r4, r5, r6}
 800a0fa:	4603      	mov	r3, r0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a0fc:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800a100:	f8b0 5056 	ldrh.w	r5, [r0, #86]	; 0x56
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a104:	69d0      	ldr	r0, [r2, #28]
 800a106:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a10a:	fb01 f104 	mul.w	r1, r1, r4
 800a10e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 800a112:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800a114:	1b64      	subs	r4, r4, r5
  pHandle->ADCRegularLocked=true;
 800a116:	2601      	movs	r6, #1
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800a118:	f8b3 5058 	ldrh.w	r5, [r3, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800a11c:	8659      	strh	r1, [r3, #50]	; 0x32
 800a11e:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
  pHandle->ADCRegularLocked=true;
 800a122:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
 800a126:	61d0      	str	r0, [r2, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a128:	6414      	str	r4, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a12a:	63d5      	str	r5, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a12c:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a12e:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a130:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 800a132:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 800a136:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a13a:	f041 0170 	orr.w	r1, r1, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 800a13e:	2403      	movs	r4, #3
 800a140:	6051      	str	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a142:	42b0      	cmp	r0, r6
  pHdl->Sector = SECTOR_4;
 800a144:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a148:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a14a:	d006      	beq.n	800a15a <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <R3_2_RLDetectionModeSetDuty+0x70>)
 800a14e:	421a      	tst	r2, r3
    hAux = MC_FOC_DURATION;
 800a150:	bf14      	ite	ne
 800a152:	4630      	movne	r0, r6
 800a154:	2000      	moveq	r0, #0
}
 800a156:	bc70      	pop	{r4, r5, r6}
 800a158:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800a15a:	2200      	movs	r2, #0
 800a15c:	871a      	strh	r2, [r3, #56]	; 0x38
}
 800a15e:	bc70      	pop	{r4, r5, r6}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	02000070 	.word	0x02000070

0800a168 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800a168:	8b42      	ldrh	r2, [r0, #26]
 800a16a:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a16c:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800a16e:	440a      	add	r2, r1
 800a170:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a172:	b18b      	cbz	r3, 800a198 <RVBS_Clear+0x30>
{
 800a174:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 800a176:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a178:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 800a17a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a17e:	3301      	adds	r3, #1
 800a180:	8b01      	ldrh	r1, [r0, #24]
 800a182:	b29b      	uxth	r3, r3
 800a184:	4299      	cmp	r1, r3
 800a186:	d8f8      	bhi.n	800a17a <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 800a188:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800a18a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800a18c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800a18e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 800a192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a196:	4770      	bx	lr
  pHandle->index = 0;
 800a198:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 800a19a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800a19c:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 800a19e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 800a1a2:	4770      	bx	lr

0800a1a4 <RVBS_Init>:
{
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800a1a8:	300c      	adds	r0, #12
 800a1aa:	f7f9 f825 	bl	80031f8 <RCM_RegisterRegConv>
 800a1ae:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f7ff ffd8 	bl	800a168 <RVBS_Clear>
}
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop

0800a1bc <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800a1bc:	88c3      	ldrh	r3, [r0, #6]
 800a1be:	8b42      	ldrh	r2, [r0, #26]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d305      	bcc.n	800a1d0 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800a1c4:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800a1c6:	4298      	cmp	r0, r3
 800a1c8:	bf8c      	ite	hi
 800a1ca:	2004      	movhi	r0, #4
 800a1cc:	2000      	movls	r0, #0
 800a1ce:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800a1d0:	2002      	movs	r0, #2
  }
  return fault;
}
 800a1d2:	4770      	bx	lr

0800a1d4 <RVBS_CalcAvVbus>:
{
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a1d8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800a1dc:	f7f9 f8dc 	bl	8003398 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800a1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1e4:	4298      	cmp	r0, r3
 800a1e6:	d01b      	beq.n	800a220 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 800a1e8:	6a26      	ldr	r6, [r4, #32]
 800a1ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800a1ee:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a1f2:	8b25      	ldrh	r5, [r4, #24]
 800a1f4:	b1cd      	cbz	r5, 800a22a <RVBS_CalcAvVbus+0x56>
 800a1f6:	2300      	movs	r3, #0
    wtemp = 0;
 800a1f8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800a1fa:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a1fe:	3301      	adds	r3, #1
 800a200:	b2db      	uxtb	r3, r3
 800a202:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 800a204:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a206:	d3f8      	bcc.n	800a1fa <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 800a208:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a20c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a210:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a212:	3d01      	subs	r5, #1
 800a214:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 800a216:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a218:	da09      	bge.n	800a22e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 800a21a:	3301      	adds	r3, #1
 800a21c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff ffcb 	bl	800a1bc <RVBS_CheckFaultState>
 800a226:	8120      	strh	r0, [r4, #8]
}
 800a228:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a22a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 800a22c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a234:	4620      	mov	r0, r4
 800a236:	f7ff ffc1 	bl	800a1bc <RVBS_CheckFaultState>
 800a23a:	8120      	strh	r0, [r4, #8]
}
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	bf00      	nop

0800a240 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800a240:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800a242:	2201      	movs	r2, #1
 800a244:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 800a246:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800a24a:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800a24e:	4770      	bx	lr

0800a250 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800a250:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop

0800a258 <SPD_GetMecAngle>:
  * @retval int16_t rotor mechanical angle (s16degrees)
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->wMecAngle );
}
 800a258:	6880      	ldr	r0, [r0, #8]
 800a25a:	4770      	bx	lr

0800a25c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800a25c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop

0800a264 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800a264:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop

0800a26c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800a26c:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 800a270:	b430      	push	{r4, r5}
 800a272:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 800a274:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 800a276:	bfb8      	it	lt
 800a278:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a27a:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a27c:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a27e:	7803      	ldrb	r3, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a280:	8a81      	ldrh	r1, [r0, #20]
    hAux = -( *pMecSpeedUnit );
 800a282:	bfb8      	it	lt
 800a284:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a286:	4295      	cmp	r5, r2
 800a288:	d819      	bhi.n	800a2be <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a28a:	4291      	cmp	r1, r2
 800a28c:	bf2c      	ite	cs
 800a28e:	2200      	movcs	r2, #0
 800a290:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800a292:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 800a296:	b2a9      	uxth	r1, r5
 800a298:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800a29a:	bfb8      	it	lt
 800a29c:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a29e:	8b05      	ldrh	r5, [r0, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 800a2a0:	bfb8      	it	lt
 800a2a2:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a2a4:	428d      	cmp	r5, r1
 800a2a6:	d300      	bcc.n	800a2aa <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800a2a8:	b15a      	cbz	r2, 800a2c2 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d901      	bls.n	800a2b2 <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a2b2:	7003      	strb	r3, [r0, #0]

  return ( SpeedSensorReliability );
}
 800a2b4:	1b18      	subs	r0, r3, r4
 800a2b6:	bf18      	it	ne
 800a2b8:	2001      	movne	r0, #1
 800a2ba:	bc30      	pop	{r4, r5}
 800a2bc:	4770      	bx	lr
    SpeedError = true;
 800a2be:	2201      	movs	r2, #1
 800a2c0:	e7e7      	b.n	800a292 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	bf88      	it	hi
 800a2c6:	2300      	movhi	r3, #0
 800a2c8:	e7f3      	b.n	800a2b2 <SPD_IsMecSpeedReliable+0x46>
 800a2ca:	bf00      	nop

0800a2cc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800a2cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a2d0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800a2d4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a2d8:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800a2dc:	b200      	sxth	r0, r0
 800a2de:	4770      	bx	lr

0800a2e0 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800a2e0:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a2e2:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a2e6:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 800a2ea:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 800a2ec:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a2ee:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a2f0:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 800a2f2:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 800a2f6:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a2f8:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800a2fc:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 800a2fe:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800a300:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a302:	6183      	str	r3, [r0, #24]
}
 800a304:	bc30      	pop	{r4, r5}
 800a306:	4770      	bx	lr

0800a308 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 800a308:	6141      	str	r1, [r0, #20]
}
 800a30a:	4770      	bx	lr

0800a30c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800a30c:	6940      	ldr	r0, [r0, #20]
 800a30e:	4770      	bx	lr

0800a310 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800a310:	7803      	ldrb	r3, [r0, #0]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d000      	beq.n	800a318 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800a316:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800a318:	6900      	ldr	r0, [r0, #16]
 800a31a:	2100      	movs	r1, #0
 800a31c:	f7fe bd0e 	b.w	8008d3c <PID_SetIntegralTerm>

0800a320 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800a320:	6840      	ldr	r0, [r0, #4]
 800a322:	2800      	cmp	r0, #0
 800a324:	bfbc      	itt	lt
 800a326:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a32a:	30ff      	addlt	r0, #255	; 0xff
}
 800a32c:	1400      	asrs	r0, r0, #16
 800a32e:	4770      	bx	lr

0800a330 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800a330:	6880      	ldr	r0, [r0, #8]
 800a332:	2800      	cmp	r0, #0
 800a334:	bfbc      	itt	lt
 800a336:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a33a:	30ff      	addlt	r0, #255	; 0xff
}
 800a33c:	1400      	asrs	r0, r0, #16
 800a33e:	4770      	bx	lr

0800a340 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a340:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800a342:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a344:	60c3      	str	r3, [r0, #12]
}
 800a346:	4770      	bx	lr

0800a348 <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a348:	7803      	ldrb	r3, [r0, #0]
{
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	4604      	mov	r4, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a352:	b313      	cbz	r3, 800a39a <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a354:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a356:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a358:	2800      	cmp	r0, #0
 800a35a:	bfbc      	itt	lt
 800a35c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a360:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a362:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a364:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a368:	db1c      	blt.n	800a3a4 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800a36a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800a36e:	428b      	cmp	r3, r1
 800a370:	dc18      	bgt.n	800a3a4 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800a372:	8c23      	ldrh	r3, [r4, #32]
 800a374:	428b      	cmp	r3, r1
 800a376:	dd03      	ble.n	800a380 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800a378:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800a37c:	428b      	cmp	r3, r1
 800a37e:	db11      	blt.n	800a3a4 <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800a380:	b9c6      	cbnz	r6, 800a3b4 <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800a382:	7823      	ldrb	r3, [r4, #0]
 800a384:	042d      	lsls	r5, r5, #16
 800a386:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 800a388:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800a38c:	bf0c      	ite	eq
 800a38e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800a390:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800a392:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800a394:	61a3      	str	r3, [r4, #24]
 800a396:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800a398:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800a39a:	f7ff ffc9 	bl	800a330 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800a39e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	da01      	bge.n	800a3a8 <STC_ExecRamp+0x60>
      AllowedRange = false;
 800a3a4:	2000      	movs	r0, #0
}
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800a3a8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a3ac:	42ab      	cmp	r3, r5
 800a3ae:	dcf9      	bgt.n	800a3a4 <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 800a3b0:	2e00      	cmp	r6, #0
 800a3b2:	d0e6      	beq.n	800a382 <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a3b4:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800a3b6:	4a08      	ldr	r2, [pc, #32]	; (800a3d8 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 800a3b8:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a3ba:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800a3c4:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800a3c6:	1a2d      	subs	r5, r5, r0
 800a3c8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800a3ca:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800a3cc:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	61a5      	str	r5, [r4, #24]
}
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	bf00      	nop
 800a3d8:	10624dd3 	.word	0x10624dd3

0800a3dc <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a3e0:	6183      	str	r3, [r0, #24]
}
 800a3e2:	4770      	bx	lr

0800a3e4 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a3e4:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800a3e6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a3ea:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800a3ec:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	bf18      	it	ne
 800a3f2:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d910      	bls.n	800a41a <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800a3f8:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 800a3fe:	440d      	add	r5, r1
 800a400:	2d00      	cmp	r5, #0
 800a402:	4629      	mov	r1, r5
 800a404:	bfbc      	itt	lt
 800a406:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 800a40a:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800a40c:	2a01      	cmp	r2, #1
 800a40e:	ea4f 4621 	mov.w	r6, r1, asr #16
 800a412:	d009      	beq.n	800a428 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800a414:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800a416:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 800a418:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800a41a:	d1f1      	bne.n	800a400 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a41c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800a420:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a422:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 800a424:	60c3      	str	r3, [r0, #12]
 800a426:	e7eb      	b.n	800a400 <STC_CalcTorqueReference+0x1c>
 800a428:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800a42a:	6940      	ldr	r0, [r0, #20]
 800a42c:	f7ff ff16 	bl	800a25c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800a430:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800a432:	b201      	sxth	r1, r0
 800a434:	6920      	ldr	r0, [r4, #16]
 800a436:	f7fe fc8d 	bl	8008d54 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800a43a:	0403      	lsls	r3, r0, #16
 800a43c:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	bf00      	nop

0800a444 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800a444:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop

0800a44c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800a44c:	8bc0      	ldrh	r0, [r0, #30]
 800a44e:	4770      	bx	lr

0800a450 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800a450:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop

0800a458 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800a458:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800a45c:	2000      	movs	r0, #0
 800a45e:	b29a      	uxth	r2, r3
 800a460:	f362 000f 	bfi	r0, r2, #0, #16
 800a464:	0c1b      	lsrs	r3, r3, #16
{
 800a466:	b082      	sub	sp, #8
  return IqdRefDefault;
 800a468:	f363 401f 	bfi	r0, r3, #16, #16
}
 800a46c:	b002      	add	sp, #8
 800a46e:	4770      	bx	lr

0800a470 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a470:	b510      	push	{r4, lr}
 800a472:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800a474:	6940      	ldr	r0, [r0, #20]
 800a476:	f7ff fef1 	bl	800a25c <SPD_GetAvrgMecSpeedUnit>
 800a47a:	0400      	lsls	r0, r0, #16
 800a47c:	6060      	str	r0, [r4, #4]
}
 800a47e:	bd10      	pop	{r4, pc}

0800a480 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800a480:	2300      	movs	r3, #0
 800a482:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800a484:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop

0800a48c <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a48c:	8843      	ldrh	r3, [r0, #2]
{
 800a48e:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 800a490:	8885      	ldrh	r5, [r0, #4]
{
 800a492:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 800a494:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a496:	430b      	orrs	r3, r1
 800a498:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800a49c:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800a49e:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 800a4a0:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a4a2:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 800a4a4:	d006      	beq.n	800a4b4 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800a4a6:	b90a      	cbnz	r2, 800a4ac <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800a4a8:	bc30      	pop	{r4, r5}
 800a4aa:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800a4ac:	200a      	movs	r0, #10
 800a4ae:	7020      	strb	r0, [r4, #0]
}
 800a4b0:	bc30      	pop	{r4, r5}
 800a4b2:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800a4b4:	2a00      	cmp	r2, #0
 800a4b6:	d1f7      	bne.n	800a4a8 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800a4b8:	200b      	movs	r0, #11
 800a4ba:	7020      	strb	r0, [r4, #0]
}
 800a4bc:	bc30      	pop	{r4, r5}
 800a4be:	4770      	bx	lr

0800a4c0 <STM_NextState>:
{
 800a4c0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 800a4c2:	7803      	ldrb	r3, [r0, #0]
 800a4c4:	2b14      	cmp	r3, #20
 800a4c6:	d819      	bhi.n	800a4fc <STM_NextState+0x3c>
 800a4c8:	e8df f003 	tbb	[pc, r3]
 800a4cc:	240d1257 	.word	0x240d1257
 800a4d0:	3c0d352e 	.word	0x3c0d352e
 800a4d4:	1818423f 	.word	0x1818423f
 800a4d8:	4a650b47 	.word	0x4a650b47
 800a4dc:	53505e4d 	.word	0x53505e4d
 800a4e0:	39          	.byte	0x39
 800a4e1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a4e2:	290e      	cmp	r1, #14
 800a4e4:	d001      	beq.n	800a4ea <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 800a4e6:	2907      	cmp	r1, #7
 800a4e8:	d108      	bne.n	800a4fc <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 800a4ea:	7001      	strb	r1, [r0, #0]
 800a4ec:	2001      	movs	r0, #1
}
 800a4ee:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800a4f0:	2907      	cmp	r1, #7
 800a4f2:	d0fa      	beq.n	800a4ea <STM_NextState+0x2a>
 800a4f4:	f1a1 030d 	sub.w	r3, r1, #13
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d9f6      	bls.n	800a4ea <STM_NextState+0x2a>
 800a4fc:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a500:	2b01      	cmp	r3, #1
 800a502:	d00f      	beq.n	800a524 <STM_NextState+0x64>
 800a504:	2907      	cmp	r1, #7
 800a506:	d00d      	beq.n	800a524 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800a508:	2200      	movs	r2, #0
 800a50a:	2180      	movs	r1, #128	; 0x80
 800a50c:	f7ff ffbe 	bl	800a48c <STM_FaultProcessing>
 800a510:	2000      	movs	r0, #0
}
 800a512:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800a514:	2911      	cmp	r1, #17
 800a516:	d8f7      	bhi.n	800a508 <STM_NextState+0x48>
 800a518:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <STM_NextState+0xe0>)
 800a51a:	40cb      	lsrs	r3, r1
 800a51c:	07da      	lsls	r2, r3, #31
 800a51e:	d4e4      	bmi.n	800a4ea <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a520:	2903      	cmp	r1, #3
 800a522:	d1f1      	bne.n	800a508 <STM_NextState+0x48>
 800a524:	2000      	movs	r0, #0
}
 800a526:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a528:	2913      	cmp	r1, #19
 800a52a:	d0de      	beq.n	800a4ea <STM_NextState+0x2a>
 800a52c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a530:	2b05      	cmp	r3, #5
 800a532:	d1e5      	bne.n	800a500 <STM_NextState+0x40>
 800a534:	e7d9      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800a536:	1f8b      	subs	r3, r1, #6
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d8df      	bhi.n	800a4fc <STM_NextState+0x3c>
 800a53c:	e7d5      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800a53e:	2912      	cmp	r1, #18
 800a540:	d1d1      	bne.n	800a4e6 <STM_NextState+0x26>
 800a542:	e7d2      	b.n	800a4ea <STM_NextState+0x2a>
      if ( bState == STOP )
 800a544:	2908      	cmp	r1, #8
 800a546:	d1d9      	bne.n	800a4fc <STM_NextState+0x3c>
 800a548:	e7cf      	b.n	800a4ea <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 800a54a:	2909      	cmp	r1, #9
 800a54c:	d1d6      	bne.n	800a4fc <STM_NextState+0x3c>
 800a54e:	e7cc      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800a550:	2900      	cmp	r1, #0
 800a552:	d0ca      	beq.n	800a4ea <STM_NextState+0x2a>
 800a554:	290c      	cmp	r1, #12
 800a556:	d1d1      	bne.n	800a4fc <STM_NextState+0x3c>
 800a558:	e7c7      	b.n	800a4ea <STM_NextState+0x2a>
      if ( bState == IDLE )
 800a55a:	2900      	cmp	r1, #0
 800a55c:	d1ce      	bne.n	800a4fc <STM_NextState+0x3c>
 800a55e:	e7c4      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800a560:	2902      	cmp	r1, #2
 800a562:	d1c0      	bne.n	800a4e6 <STM_NextState+0x26>
 800a564:	e7c1      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a566:	2911      	cmp	r1, #17
 800a568:	d1bd      	bne.n	800a4e6 <STM_NextState+0x26>
 800a56a:	e7be      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800a56c:	2904      	cmp	r1, #4
 800a56e:	d1ba      	bne.n	800a4e6 <STM_NextState+0x26>
 800a570:	e7bb      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a572:	1f0b      	subs	r3, r1, #4
 800a574:	2b01      	cmp	r3, #1
 800a576:	d8b6      	bhi.n	800a4e6 <STM_NextState+0x26>
 800a578:	e7b7      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a57a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d0b3      	beq.n	800a4ea <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 800a582:	290c      	cmp	r1, #12
 800a584:	d1be      	bne.n	800a504 <STM_NextState+0x44>
 800a586:	e7b0      	b.n	800a4ea <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800a588:	2914      	cmp	r1, #20
 800a58a:	d8b7      	bhi.n	800a4fc <STM_NextState+0x3c>
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <STM_NextState+0xe4>)
 800a58e:	40cb      	lsrs	r3, r1
 800a590:	07db      	lsls	r3, r3, #31
 800a592:	d4aa      	bmi.n	800a4ea <STM_NextState+0x2a>
 800a594:	e7b2      	b.n	800a4fc <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800a596:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800a59a:	2b07      	cmp	r3, #7
 800a59c:	d1ae      	bne.n	800a4fc <STM_NextState+0x3c>
 800a59e:	e7a4      	b.n	800a4ea <STM_NextState+0x2a>
 800a5a0:	00030092 	.word	0x00030092
 800a5a4:	00140080 	.word	0x00140080

0800a5a8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800a5a8:	7800      	ldrb	r0, [r0, #0]
 800a5aa:	4770      	bx	lr

0800a5ac <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800a5ac:	7803      	ldrb	r3, [r0, #0]
 800a5ae:	2b0b      	cmp	r3, #11
 800a5b0:	d001      	beq.n	800a5b6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800a5b2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800a5b4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800a5b6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a5b8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800a5ba:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a5bc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800a5be:	2001      	movs	r0, #1
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop

0800a5c4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800a5c4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800a5c6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800a5c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop

0800a5d0 <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{
 800a5d0:	b410      	push	{r4}
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 800a5d2:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->MovementDuration = 0.0f;
 800a5d4:	2400      	movs	r4, #0
  pHandle->ReceivedTh = 0.0f;
 800a5d6:	2300      	movs	r3, #0
  pHandle->MovementDuration = 0.0f;
 800a5d8:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 800a5da:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 800a5dc:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 800a5de:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 800a5e0:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 800a5e2:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 800a5e4:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800a5e6:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 800a5e8:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Jerk = 0.0f;
 800a5ea:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 800a5ec:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 800a5ee:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 800a5f0:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 800a5f2:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 800a5f4:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 800a5f6:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->ElapseTime = 0.0f;
 800a5f8:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;
 800a5fa:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->ReceivedTh = 0.0f;
 800a5fe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->TcTick = 0;
 800a602:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->PositionControlRegulation = DISABLE;
 800a604:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a608:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  pHandle->MecAngleOffset = 0;
 800a60c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 800a610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 800a618:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a61a:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800a61e:	2803      	cmp	r0, #3
 800a620:	d061      	beq.n	800a6e6 <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800a622:	b108      	cbz	r0, 800a628 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800a624:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 800a626:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800a628:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800a62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a630:	ddf9      	ble.n	800a626 <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a632:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a636:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800a6f4 <TC_MoveCommand+0xdc>
    pHandle->StartingAngle = startingAngle;
 800a63a:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a63e:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 800a642:	ee27 6a06 	vmul.f32	s12, s14, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a646:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a64a:	ee81 7a06 	vdiv.f32	s14, s2, s12
    pHandle->ElapseTime = 0.0f;
 800a64e:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800a650:	2001      	movs	r0, #1
 800a652:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800a656:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 800a65c:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800a65e:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a660:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a664:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a668:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a66c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a670:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a674:	ee27 7a06 	vmul.f32	s14, s14, s12
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a678:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a67c:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 800a680:	ee70 2a20 	vadd.f32	s5, s0, s1
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a684:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800a688:	ee67 6aa6 	vmul.f32	s13, s15, s13
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a68c:	ee33 4aa3 	vadd.f32	s8, s7, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a690:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800a694:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a698:	eec0 3aa6 	vdiv.f32	s7, s1, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a69c:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a6a0:	ee24 4a23 	vmul.f32	s8, s8, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a6a4:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a6a8:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a6ac:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->AngleStep = angleStep;
 800a6b0:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 800a6b4:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800a6b8:	edc3 2a02 	vstr	s5, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a6bc:	ed83 7a00 	vstr	s14, [r3]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a6c0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800a6c4:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a6c8:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a6cc:	ed83 4a0e 	vstr	s8, [r3, #56]	; 0x38
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800a6d0:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a6d4:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a6d8:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a6dc:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a6e0:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
 800a6e4:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a6e6:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ee:	dca0      	bgt.n	800a632 <TC_MoveCommand+0x1a>
 800a6f0:	e798      	b.n	800a624 <TC_MoveCommand+0xc>
 800a6f2:	bf00      	nop
 800a6f4:	3de38e39 	.word	0x3de38e39

0800a6f8 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 800a6f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800a6fc:	b353      	cbz	r3, 800a754 <TC_FollowCommand+0x5c>
  {
    // Calculate dt
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800a6fe:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 800a702:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 800a706:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800a70a:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800a70c:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 800a710:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 800a712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71a:	dd27      	ble.n	800a76c <TC_FollowCommand+0x74>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800a71c:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 800a720:	ee70 6a66 	vsub.f32	s13, s0, s13
    }
  }
  
  // Estimated acceleration
  if (pHandle->ReceivedTh > 1) {
 800a724:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800a726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 800a72a:	d915      	bls.n	800a758 <TC_FollowCommand+0x60>
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800a72c:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 800a730:	ee37 6a46 	vsub.f32	s12, s14, s12
 800a734:	eec6 6a27 	vdiv.f32	s13, s12, s15
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 800a738:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 800a73c:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800a740:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 800a742:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 800a746:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 800a74a:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800a74e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  
  return;
}
 800a752:	4770      	bx	lr
  float omega = 0, acceleration = 0, dt = 0;
 800a754:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a77c <TC_FollowCommand+0x84>
  pHandle->ThetaPrev  = Angle;
 800a758:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
    pHandle->ReceivedTh++;
 800a75c:	3301      	adds	r3, #1
 800a75e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 800a762:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 800a766:	eddf 6a05 	vldr	s13, [pc, #20]	; 800a77c <TC_FollowCommand+0x84>
 800a76a:	e7e9      	b.n	800a740 <TC_FollowCommand+0x48>
  if (pHandle->ReceivedTh > 1) {
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d9f1      	bls.n	800a754 <TC_FollowCommand+0x5c>
  float omega = 0, acceleration = 0, dt = 0;
 800a770:	ed9f 7a02 	vldr	s14, [pc, #8]	; 800a77c <TC_FollowCommand+0x84>
 800a774:	eef0 6a47 	vmov.f32	s13, s14
 800a778:	e7de      	b.n	800a738 <TC_FollowCommand+0x40>
 800a77a:	bf00      	nop
 800a77c:	00000000 	.word	0x00000000

0800a780 <TC_PositionRegulation>:
  * @brief  It proceeds on the position control loop.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_PositionRegulation(PosCtrl_Handle_t *pHandle)
{
 800a780:	b538      	push	{r3, r4, r5, lr}
  int32_t wMecAngleRef;
  int32_t wMecAngle;
  int32_t wError;
  int32_t hTorqueRef_Pos;

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a782:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a786:	2b01      	cmp	r3, #1
 800a788:	d039      	beq.n	800a7fe <TC_PositionRegulation+0x7e>
  {
    TC_MoveExecution(pHandle);
  }
  
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d003      	beq.n	800a796 <TC_PositionRegulation+0x16>
  {
    TC_FollowExecution(pHandle);
  }
  
  if (pHandle->PositionControlRegulation == ENABLE)
 800a78e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800a792:	b9a3      	cbnz	r3, 800a7be <TC_PositionRegulation+0x3e>

    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
  }

}
 800a794:	bd38      	pop	{r3, r4, r5, pc}
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_FollowExecution(PosCtrl_Handle_t *pHandle)
{
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a796:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 800a79a:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 800a79e:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a7a2:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800a7a6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a7aa:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a7ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a7b2:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a7b6:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0ea      	beq.n	800a794 <TC_PositionRegulation+0x14>
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800a7be:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800a914 <TC_PositionRegulation+0x194>
 800a7c2:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
 800a7c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a7d0:	6e80      	ldr	r0, [r0, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800a7d2:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a7d6:	f7ff fd99 	bl	800a30c <STC_GetSpeedSensor>
 800a7da:	f7ff fd3d 	bl	800a258 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800a7de:	1a29      	subs	r1, r5, r0
 800a7e0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a7e2:	f7fe fafb 	bl	8008ddc <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800a7e6:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800a7e8:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800a7ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a7ec:	f7ff fda8 	bl	800a340 <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a7f4:	2200      	movs	r2, #0
}
 800a7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800a7fa:	f7ff bda5 	b.w	800a348 <STC_ExecRamp>
  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 800a7fe:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a802:	edd0 5a04 	vldr	s11, [r0, #16]
 800a806:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800a80a:	ed90 6a00 	vldr	s12, [r0]
 800a80e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	ee77 6a27 	vadd.f32	s13, s14, s15
 800a81a:	ee36 5a27 	vadd.f32	s10, s12, s15
 800a81e:	d529      	bpl.n	800a874 <TC_PositionRegulation+0xf4>
 800a820:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 800a824:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 800a828:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 800a82c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800a830:	ee66 5a27 	vmul.f32	s11, s12, s15
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a834:	ee37 7a25 	vadd.f32	s14, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a838:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a83c:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a840:	eee7 5a27 	vfma.f32	s11, s14, s15
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a844:	eef4 6ac5 	vcmpe.f32	s13, s10
 800a848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800a84c:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
  pHandle->ElapseTime += pHandle->SamplingTime;
 800a850:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a854:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a858:	dd99      	ble.n	800a78e <TC_PositionRegulation+0xe>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 800a85a:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800a85e:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 800a860:	bf04      	itt	eq
 800a862:	2305      	moveq	r3, #5
 800a864:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 800a868:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a86a:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 800a86c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a86e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800a872:	e78c      	b.n	800a78e <TC_PositionRegulation+0xe>
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800a874:	edd0 5a05 	vldr	s11, [r0, #20]
 800a878:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	d414      	bmi.n	800a8ac <TC_PositionRegulation+0x12c>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 800a882:	edd0 5a06 	vldr	s11, [r0, #24]
 800a886:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88e:	d414      	bmi.n	800a8ba <TC_PositionRegulation+0x13a>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 800a890:	edd0 5a07 	vldr	s11, [r0, #28]
 800a894:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89c:	d51a      	bpl.n	800a8d4 <TC_PositionRegulation+0x154>
    pHandle->Omega = pHandle->CruiseSpeed;
 800a89e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800a918 <TC_PositionRegulation+0x198>
 800a8a2:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a8a6:	eeb0 6a65 	vmov.f32	s12, s11
 800a8aa:	e7c3      	b.n	800a834 <TC_PositionRegulation+0xb4>
 800a8ac:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 800a8b0:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 800a8b4:	ee66 5a27 	vmul.f32	s11, s12, s15
 800a8b8:	e7bc      	b.n	800a834 <TC_PositionRegulation+0xb4>
 800a8ba:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 800a8be:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 800a8c2:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 800a8c6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800a8ca:	ee36 6a65 	vsub.f32	s12, s12, s11
 800a8ce:	ee66 5a27 	vmul.f32	s11, s12, s15
 800a8d2:	e7af      	b.n	800a834 <TC_PositionRegulation+0xb4>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 800a8d4:	edd0 5a08 	vldr	s11, [r0, #32]
 800a8d8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e0:	d4eb      	bmi.n	800a8ba <TC_PositionRegulation+0x13a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 800a8e2:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
 800a8e6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ee:	d4dd      	bmi.n	800a8ac <TC_PositionRegulation+0x12c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 800a8f0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f8:	d492      	bmi.n	800a820 <TC_PositionRegulation+0xa0>
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a8fa:	eef4 6ac5 	vcmpe.f32	s13, s10
    pHandle->Theta = pHandle->FinalAngle;
 800a8fe:	6882      	ldr	r2, [r0, #8]
  pHandle->ElapseTime += pHandle->SamplingTime;
 800a900:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800a904:	2302      	movs	r3, #2
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta = pHandle->FinalAngle;
 800a90a:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800a90c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a910:	dca3      	bgt.n	800a85a <TC_PositionRegulation+0xda>
 800a912:	e73c      	b.n	800a78e <TC_PositionRegulation+0xe>
 800a914:	4622f983 	.word	0x4622f983
 800a918:	00000000 	.word	0x00000000

0800a91c <TC_EncAlignmentCommand>:
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800a91c:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800a920:	2b02      	cmp	r3, #2
 800a922:	d012      	beq.n	800a94a <TC_EncAlignmentCommand+0x2e>
{
 800a924:	b510      	push	{r4, lr}
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800a926:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a92a:	2b04      	cmp	r3, #4
{
 800a92c:	b082      	sub	sp, #8
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800a92e:	d010      	beq.n	800a952 <TC_EncAlignmentCommand+0x36>
      pHandle->pENC->_Super.wMecAngle = 0;
 800a930:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800a932:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800a934:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 800a936:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800a938:	60a3      	str	r3, [r4, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a93a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800a93e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 800a942:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 800a946:	b002      	add	sp, #8
 800a948:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a94a:	2300      	movs	r3, #0
 800a94c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800a950:	4770      	bx	lr
      pHandle->EncoderAbsoluteAligned = false;
 800a952:	2300      	movs	r3, #0
 800a954:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 800a958:	4604      	mov	r4, r0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a95a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a95c:	f7ff fcd6 	bl	800a30c <STC_GetSpeedSensor>
 800a960:	f7ff fc7a 	bl	800a258 <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a964:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a968:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d005      	beq.n	800a97a <TC_EncAlignmentCommand+0x5e>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800a96e:	b123      	cbz	r3, 800a97a <TC_EncAlignmentCommand+0x5e>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 800a970:	2301      	movs	r3, #1
 800a972:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 800a976:	b002      	add	sp, #8
 800a978:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a97a:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a97e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800aa44 <TC_EncAlignmentCommand+0x128>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a982:	eddf 7a31 	vldr	s15, [pc, #196]	; 800aa48 <TC_EncAlignmentCommand+0x12c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800a986:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800aa4c <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a98a:	eddf 4a31 	vldr	s9, [pc, #196]	; 800aa50 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800a98e:	eddf 5a31 	vldr	s11, [pc, #196]	; 800aa54 <TC_EncAlignmentCommand+0x138>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a992:	eec7 6a06 	vdiv.f32	s13, s14, s12
    pHandle->ElapseTime = 0.0f;
 800a996:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 800a998:	2201      	movs	r2, #1
 800a99a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800a99e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 800a9a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 800a9a4:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800a9a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a9a8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a9ac:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a9b0:	ee26 6a07 	vmul.f32	s12, s12, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a9b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800a9b8:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->AngleStep = angleStep;
 800a9bc:	edc4 5a03 	vstr	s11, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a9c0:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800a9c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a9c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800a9cc:	ee27 7a05 	vmul.f32	s14, s14, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a9d0:	ee27 6aa7 	vmul.f32	s12, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a9d4:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a9d8:	ee26 5a27 	vmul.f32	s10, s12, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a9dc:	ee36 6a06 	vadd.f32	s12, s12, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a9e0:	ee84 3a85 	vdiv.f32	s6, s9, s10
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a9e4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a9e8:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a9ec:	eeb2 5a00 	vmov.f32	s10, #32	; 0x41000000  8.0
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a9f0:	ee26 6a03 	vmul.f32	s12, s12, s6
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800a9f4:	ee77 2aa7 	vadd.f32	s5, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a9f8:	ee67 3aa3 	vmul.f32	s7, s15, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a9fc:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800aa00:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800aa04:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->FinalAngle = startingAngle + angleStep;
 800aa08:	ee77 5a25 	vadd.f32	s11, s14, s11
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa0c:	edc4 6a00 	vstr	s13, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800aa10:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800aa14:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800aa18:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aa1c:	ed84 3a0d 	vstr	s6, [r4, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800aa20:	edc4 2a05 	vstr	s5, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800aa24:	edc4 3a06 	vstr	s7, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800aa28:	ed84 4a07 	vstr	s8, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800aa2c:	edc4 4a08 	vstr	s9, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800aa30:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 800aa34:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->Theta = startingAngle;
 800aa38:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800aa3c:	edc4 5a02 	vstr	s11, [r4, #8]
 800aa40:	e796      	b.n	800a970 <TC_EncAlignmentCommand+0x54>
 800aa42:	bf00      	nop
 800aa44:	3e638e39 	.word	0x3e638e39
 800aa48:	3de38e39 	.word	0x3de38e39
 800aa4c:	38c90fdb 	.word	0x38c90fdb
 800aa50:	3f060a92 	.word	0x3f060a92
 800aa54:	40c90fdb 	.word	0x40c90fdb

0800aa58 <TC_EncoderReset>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800aa58:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 800aa5c:	b93a      	cbnz	r2, 800aa6e <TC_EncoderReset+0x16>
{
 800aa5e:	b430      	push	{r4, r5}
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800aa60:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
 800aa64:	2c01      	cmp	r4, #1
 800aa66:	4603      	mov	r3, r0
 800aa68:	d002      	beq.n	800aa70 <TC_EncoderReset+0x18>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
  }
}
 800aa6a:	bc30      	pop	{r4, r5}
 800aa6c:	4770      	bx	lr
 800aa6e:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 800aa70:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800aa72:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800aa76:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->Theta = 0.0f;
 800aa7a:	2500      	movs	r5, #0
    pHandle->pENC->_Super.wMecAngle = 0;
 800aa7c:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 800aa7e:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800aa82:	2402      	movs	r4, #2
    pHandle->Theta = 0.0f;
 800aa84:	649d      	str	r5, [r3, #72]	; 0x48
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800aa86:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800aa8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800aa8e:	bc30      	pop	{r4, r5}
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
 800aa90:	f7fe b86a 	b.w	8008b68 <ENC_SetMecAngle>

0800aa94 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 800aa94:	b508      	push	{r3, lr}

  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 800aa96:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800aa98:	f7ff fc38 	bl	800a30c <STC_GetSpeedSensor>
 800aa9c:	f7ff fbdc 	bl	800a258 <SPD_GetMecAngle>
 800aaa0:	ee07 0a10 	vmov	s14, r0
 800aaa4:	eddf 7a03 	vldr	s15, [pc, #12]	; 800aab4 <TC_GetCurrentPosition+0x20>
 800aaa8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 800aaac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aab0:	bd08      	pop	{r3, pc}
 800aab2:	bf00      	nop
 800aab4:	38c90fdb 	.word	0x38c90fdb

0800aab8 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 800aab8:	ed90 0a02 	vldr	s0, [r0, #8]
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop

0800aac0 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 800aac0:	ed90 0a00 	vldr	s0, [r0]
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop

0800aac8 <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 800aac8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800aaca:	3301      	adds	r3, #1
 800aacc:	6583      	str	r3, [r0, #88]	; 0x58
}
 800aace:	4770      	bx	lr

0800aad0 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800aad0:	f7fe b86e 	b.w	8008bb0 <FCP_Init>

0800aad4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800aad4:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 800aad8:	b192      	cbz	r2, 800ab00 <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800aada:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 800aade:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800aae2:	4603      	mov	r3, r0
 800aae4:	b199      	cbz	r1, 800ab0e <UFCP_TX_IRQ_Handler+0x3a>
 800aae6:	2901      	cmp	r1, #1
 800aae8:	d00b      	beq.n	800ab02 <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800aaea:	7d40      	ldrb	r0, [r0, #21]
 800aaec:	3001      	adds	r0, #1
 800aaee:	4281      	cmp	r1, r0
 800aaf0:	dc0f      	bgt.n	800ab12 <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800aaf2:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800aaf4:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800aaf6:	7d00      	ldrb	r0, [r0, #20]
 800aaf8:	6290      	str	r0, [r2, #40]	; 0x28
 800aafa:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800aafe:	4770      	bx	lr
 800ab00:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800ab02:	7d40      	ldrb	r0, [r0, #21]
 800ab04:	6290      	str	r0, [r2, #40]	; 0x28
      pBaseHandle->TxFrameLevel++;
 800ab06:	3101      	adds	r1, #1
 800ab08:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 800ab0c:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800ab0e:	7d00      	ldrb	r0, [r0, #20]
        break;
 800ab10:	e7f8      	b.n	800ab04 <UFCP_TX_IRQ_Handler+0x30>
{
 800ab12:	b430      	push	{r4, r5}
 800ab14:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 800ab18:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ab1a:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800ab1c:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800ab20:	2500      	movs	r5, #0
 800ab22:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab26:	6011      	str	r1, [r2, #0]
 800ab28:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800ab2c:	4623      	mov	r3, r4
}
 800ab2e:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800ab30:	4718      	bx	r3
 800ab32:	bf00      	nop

0800ab34 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800ab34:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800ab38:	b10b      	cbz	r3, 800ab3e <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ab3a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800ab3c:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800ab3e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 800ab42:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab46:	6813      	ldr	r3, [r2, #0]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800ab48:	2101      	movs	r1, #1
 800ab4a:	f043 0320 	orr.w	r3, r3, #32
 800ab4e:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ab52:	2002      	movs	r0, #2
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	4770      	bx	lr

0800ab58 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5c:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800ab5e:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800ab62:	b110      	cbz	r0, 800ab6a <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ab64:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800ab66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 800ab6a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800ab6c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800ab6e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800ab70:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800ab72:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d05d      	beq.n	800ac36 <UFCP_Send+0xde>
 800ab7a:	1d10      	adds	r0, r2, #4
 800ab7c:	f104 051a 	add.w	r5, r4, #26
 800ab80:	4295      	cmp	r5, r2
 800ab82:	bf88      	it	hi
 800ab84:	42b8      	cmphi	r0, r7
 800ab86:	d86b      	bhi.n	800ac60 <UFCP_Send+0x108>
 800ab88:	2b0b      	cmp	r3, #11
 800ab8a:	d969      	bls.n	800ac60 <UFCP_Send+0x108>
 800ab8c:	4250      	negs	r0, r2
 800ab8e:	f000 0003 	and.w	r0, r0, #3
 800ab92:	1cc5      	adds	r5, r0, #3
 800ab94:	42a9      	cmp	r1, r5
 800ab96:	d339      	bcc.n	800ac0c <UFCP_Send+0xb4>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d06c      	beq.n	800ac76 <UFCP_Send+0x11e>
 800ab9c:	7811      	ldrb	r1, [r2, #0]
 800ab9e:	75a1      	strb	r1, [r4, #22]
 800aba0:	2801      	cmp	r0, #1
 800aba2:	f1a3 0102 	sub.w	r1, r3, #2
 800aba6:	b2c9      	uxtb	r1, r1
 800aba8:	f102 0c01 	add.w	ip, r2, #1
 800abac:	f104 0717 	add.w	r7, r4, #23
 800abb0:	d012      	beq.n	800abd8 <UFCP_Send+0x80>
 800abb2:	7851      	ldrb	r1, [r2, #1]
 800abb4:	75e1      	strb	r1, [r4, #23]
 800abb6:	2803      	cmp	r0, #3
 800abb8:	f1a3 0103 	sub.w	r1, r3, #3
 800abbc:	b2c9      	uxtb	r1, r1
 800abbe:	f102 0c02 	add.w	ip, r2, #2
 800abc2:	f104 0718 	add.w	r7, r4, #24
 800abc6:	d107      	bne.n	800abd8 <UFCP_Send+0x80>
 800abc8:	7891      	ldrb	r1, [r2, #2]
 800abca:	7621      	strb	r1, [r4, #24]
 800abcc:	1f19      	subs	r1, r3, #4
 800abce:	b2c9      	uxtb	r1, r1
 800abd0:	f102 0c03 	add.w	ip, r2, #3
 800abd4:	f104 0719 	add.w	r7, r4, #25
 800abd8:	1a1b      	subs	r3, r3, r0
 800abda:	b2dd      	uxtb	r5, r3
 800abdc:	f100 0316 	add.w	r3, r0, #22
 800abe0:	4402      	add	r2, r0
 800abe2:	ea4f 0895 	mov.w	r8, r5, lsr #2
 800abe6:	18e0      	adds	r0, r4, r3
 800abe8:	2300      	movs	r3, #0
 800abea:	3301      	adds	r3, #1
 800abec:	b2de      	uxtb	r6, r3
 800abee:	f852 eb04 	ldr.w	lr, [r2], #4
 800abf2:	f840 eb04 	str.w	lr, [r0], #4
 800abf6:	45b0      	cmp	r8, r6
 800abf8:	d8f7      	bhi.n	800abea <UFCP_Send+0x92>
 800abfa:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 800abfe:	1ac9      	subs	r1, r1, r3
 800ac00:	429d      	cmp	r5, r3
 800ac02:	b2c9      	uxtb	r1, r1
 800ac04:	eb0c 0203 	add.w	r2, ip, r3
 800ac08:	441f      	add	r7, r3
 800ac0a:	d014      	beq.n	800ac36 <UFCP_Send+0xde>
 800ac0c:	7813      	ldrb	r3, [r2, #0]
 800ac0e:	703b      	strb	r3, [r7, #0]
 800ac10:	b189      	cbz	r1, 800ac36 <UFCP_Send+0xde>
 800ac12:	7853      	ldrb	r3, [r2, #1]
 800ac14:	707b      	strb	r3, [r7, #1]
 800ac16:	2901      	cmp	r1, #1
 800ac18:	d00d      	beq.n	800ac36 <UFCP_Send+0xde>
 800ac1a:	7893      	ldrb	r3, [r2, #2]
 800ac1c:	70bb      	strb	r3, [r7, #2]
 800ac1e:	2902      	cmp	r1, #2
 800ac20:	d009      	beq.n	800ac36 <UFCP_Send+0xde>
 800ac22:	78d3      	ldrb	r3, [r2, #3]
 800ac24:	70fb      	strb	r3, [r7, #3]
 800ac26:	2903      	cmp	r1, #3
 800ac28:	d005      	beq.n	800ac36 <UFCP_Send+0xde>
 800ac2a:	7913      	ldrb	r3, [r2, #4]
 800ac2c:	713b      	strb	r3, [r7, #4]
 800ac2e:	2904      	cmp	r1, #4
 800ac30:	d001      	beq.n	800ac36 <UFCP_Send+0xde>
 800ac32:	7953      	ldrb	r3, [r2, #5]
 800ac34:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800ac36:	f104 0014 	add.w	r0, r4, #20
 800ac3a:	f7fd ffcf 	bl	8008bdc <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800ac3e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800ac42:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ac4c:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800ac4e:	2101      	movs	r1, #1
 800ac50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac54:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 800ac58:	2002      	movs	r0, #2
 800ac5a:	6013      	str	r3, [r2, #0]
}
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	3101      	adds	r1, #1
 800ac62:	4411      	add	r1, r2
 800ac64:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 800ac68:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ac6c:	f803 0f01 	strb.w	r0, [r3, #1]!
 800ac70:	428a      	cmp	r2, r1
 800ac72:	d1f9      	bne.n	800ac68 <UFCP_Send+0x110>
 800ac74:	e7df      	b.n	800ac36 <UFCP_Send+0xde>
 800ac76:	4694      	mov	ip, r2
 800ac78:	e7ae      	b.n	800abd8 <UFCP_Send+0x80>
 800ac7a:	bf00      	nop

0800ac7c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800ac7c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800ac80:	b1b3      	cbz	r3, 800acb0 <UFCP_RX_IRQ_Handler+0x34>
{
 800ac82:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800ac84:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 800ac88:	4604      	mov	r4, r0
{
 800ac8a:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 800ac8c:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 800ac8e:	b1e3      	cbz	r3, 800acca <UFCP_RX_IRQ_Handler+0x4e>
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d00f      	beq.n	800acb4 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800ac94:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 800ac98:	3101      	adds	r1, #1
 800ac9a:	428b      	cmp	r3, r1
 800ac9c:	dc1f      	bgt.n	800acde <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800ac9e:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 800aca0:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800aca2:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800aca6:	4823      	ldr	r0, [pc, #140]	; (800ad34 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 800aca8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800acb0:	4820      	ldr	r0, [pc, #128]	; (800ad34 <UFCP_RX_IRQ_Handler+0xb8>)
}
 800acb2:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800acb4:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 800acb6:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800acba:	481e      	ldr	r0, [pc, #120]	; (800ad34 <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 800acbc:	bf54      	ite	pl
 800acbe:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 800acc0:	2300      	movmi	r3, #0
 800acc2:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800acc6:	b003      	add	sp, #12
 800acc8:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800acca:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 800accc:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800acd0:	4819      	ldr	r0, [pc, #100]	; (800ad38 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800acd2:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 800acd4:	2301      	movs	r3, #1
 800acd6:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800acda:	b003      	add	sp, #12
 800acdc:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800acde:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800ace2:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ace6:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 800ace8:	2200      	movs	r2, #0
 800acea:	f023 0320 	bic.w	r3, r3, #32
 800acee:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800acf0:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800acf4:	600b      	str	r3, [r1, #0]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800acf6:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800acfa:	f7fd ff6f 	bl	8008bdc <FCP_CalcCRC>
 800acfe:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800ad02:	4283      	cmp	r3, r0
 800ad04:	d10a      	bne.n	800ad1c <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	68a5      	ldr	r5, [r4, #8]
 800ad0a:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800ad0e:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800ad12:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 800ad16:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800ad18:	4808      	ldr	r0, [pc, #32]	; (800ad3c <UFCP_RX_IRQ_Handler+0xc0>)
 800ad1a:	e7c7      	b.n	800acac <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 800ad1c:	aa02      	add	r2, sp, #8
 800ad1e:	230a      	movs	r3, #10
 800ad20:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800ad24:	4620      	mov	r0, r4
 800ad26:	2301      	movs	r3, #1
 800ad28:	21ff      	movs	r1, #255	; 0xff
 800ad2a:	f7ff ff15 	bl	800ab58 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800ad2e:	4803      	ldr	r0, [pc, #12]	; (800ad3c <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800ad30:	e7bc      	b.n	800acac <UFCP_RX_IRQ_Handler+0x30>
 800ad32:	bf00      	nop
 800ad34:	0800d230 	.word	0x0800d230
 800ad38:	0800d232 	.word	0x0800d232
 800ad3c:	0800d234 	.word	0x0800d234

0800ad40 <UFCP_OVR_IRQ_Handler>:
{
 800ad40:	b500      	push	{lr}
 800ad42:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 800ad44:	aa02      	add	r2, sp, #8
 800ad46:	2308      	movs	r3, #8
 800ad48:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800ad4c:	21ff      	movs	r1, #255	; 0xff
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f7ff ff02 	bl	800ab58 <UFCP_Send>
}
 800ad54:	b003      	add	sp, #12
 800ad56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad5a:	bf00      	nop

0800ad5c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800ad62:	4770      	bx	lr

0800ad64 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ad64:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800ad66:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800ad68:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ad6a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800ad6c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800ad6e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800ad70:	8243      	strh	r3, [r0, #18]
  pHandle->wElSpeedDpp32 = 0;
 800ad72:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->hRemainingStep = 0u;
 800ad76:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800ad78:	8603      	strh	r3, [r0, #48]	; 0x30
  pHandle->bTransitionStarted = false;
 800ad7a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800ad7e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->bTransitionLocked = false;
 800ad82:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800ad86:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800ad8a:	4770      	bx	lr

0800ad8c <VSS_Init>:
{
 800ad8c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800ad8e:	f7ff ffe9 	bl	800ad64 <VSS_Clear>
}
 800ad92:	bd08      	pop	{r3, pc}

0800ad94 <VSS_SetMecAngle>:
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 800ad94:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 800ad96:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800ad98:	7843      	ldrb	r3, [r0, #1]
 800ad9a:	fb91 f1f3 	sdiv	r1, r1, r3
 800ad9e:	80c1      	strh	r1, [r0, #6]
}
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800ada4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ada8:	bb73      	cbnz	r3, 800ae08 <VSS_SetMecAcceleration+0x64>
{
 800adaa:	b470      	push	{r4, r5, r6}
 800adac:	8b45      	ldrh	r5, [r0, #26]
 800adae:	69c3      	ldr	r3, [r0, #28]
 800adb0:	7844      	ldrb	r4, [r0, #1]
 800adb2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800adb6:	006d      	lsls	r5, r5, #1
 800adb8:	fb03 f301 	mul.w	r3, r3, r1
 800adbc:	fb93 f3f5 	sdiv	r3, r3, r5
  {
    if ( hDurationms == 0u )
 800adc0:	b1d2      	cbz	r2, 800adf8 <VSS_SetMecAcceleration+0x54>
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800adc2:	8e86      	ldrh	r6, [r0, #52]	; 0x34
 800adc4:	4d11      	ldr	r5, [pc, #68]	; (800ae0c <VSS_SetMecAcceleration+0x68>)
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800adc6:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800adc8:	fb02 f206 	mul.w	r2, r2, r6
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800adcc:	fba5 1202 	umull	r1, r2, r5, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800add0:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800add4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800add8:	fb91 f5f4 	sdiv	r5, r1, r4
      hNbrStep++;
 800addc:	3201      	adds	r2, #1
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800adde:	1b5b      	subs	r3, r3, r5
      hNbrStep++;
 800ade0:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800ade2:	041b      	lsls	r3, r3, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800ade4:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800ade6:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800adea:	fb04 f303 	mul.w	r3, r4, r3
      pHandle->hRemainingStep = hNbrStep;
 800adee:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800adf0:	e9c0 3108 	strd	r3, r1, [r0, #32]
    }
  }
}
 800adf4:	bc70      	pop	{r4, r5, r6}
 800adf6:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800adf8:	fb13 f304 	smulbb	r3, r3, r4
 800adfc:	81c3      	strh	r3, [r0, #14]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800adfe:	8181      	strh	r1, [r0, #12]
      pHandle->hRemainingStep = 0u;
 800ae00:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ae02:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 800ae04:	bc70      	pop	{r4, r5, r6}
 800ae06:	4770      	bx	lr
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	10624dd3 	.word	0x10624dd3

0800ae10 <RUC_SetPhaseDurationms>:
 800ae10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae18:	818a      	strh	r2, [r1, #12]
 800ae1a:	4770      	bx	lr

0800ae1c <RUC_SetPhaseFinalMecSpeedUnit>:
 800ae1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae24:	81ca      	strh	r2, [r1, #14]
 800ae26:	4770      	bx	lr

0800ae28 <RUC_SetPhaseFinalTorque>:
 800ae28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae30:	820a      	strh	r2, [r1, #16]
 800ae32:	4770      	bx	lr

0800ae34 <RUC_GetPhaseDurationms>:
 800ae34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae3c:	8988      	ldrh	r0, [r1, #12]
 800ae3e:	4770      	bx	lr

0800ae40 <RUC_GetPhaseFinalMecSpeedUnit>:
 800ae40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae48:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop

0800ae50 <RUC_GetPhaseFinalTorque>:
 800ae50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ae54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae58:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <RUC_GetNumberOfPhases>:
 800ae60:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop

0800ae68 <__errno>:
 800ae68:	4b01      	ldr	r3, [pc, #4]	; (800ae70 <__errno+0x8>)
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	2000068c 	.word	0x2000068c

0800ae74 <__libc_init_array>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	4e0d      	ldr	r6, [pc, #52]	; (800aeac <__libc_init_array+0x38>)
 800ae78:	4c0d      	ldr	r4, [pc, #52]	; (800aeb0 <__libc_init_array+0x3c>)
 800ae7a:	1ba4      	subs	r4, r4, r6
 800ae7c:	10a4      	asrs	r4, r4, #2
 800ae7e:	2500      	movs	r5, #0
 800ae80:	42a5      	cmp	r5, r4
 800ae82:	d109      	bne.n	800ae98 <__libc_init_array+0x24>
 800ae84:	4e0b      	ldr	r6, [pc, #44]	; (800aeb4 <__libc_init_array+0x40>)
 800ae86:	4c0c      	ldr	r4, [pc, #48]	; (800aeb8 <__libc_init_array+0x44>)
 800ae88:	f002 f872 	bl	800cf70 <_init>
 800ae8c:	1ba4      	subs	r4, r4, r6
 800ae8e:	10a4      	asrs	r4, r4, #2
 800ae90:	2500      	movs	r5, #0
 800ae92:	42a5      	cmp	r5, r4
 800ae94:	d105      	bne.n	800aea2 <__libc_init_array+0x2e>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae9c:	4798      	blx	r3
 800ae9e:	3501      	adds	r5, #1
 800aea0:	e7ee      	b.n	800ae80 <__libc_init_array+0xc>
 800aea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aea6:	4798      	blx	r3
 800aea8:	3501      	adds	r5, #1
 800aeaa:	e7f2      	b.n	800ae92 <__libc_init_array+0x1e>
 800aeac:	0800d498 	.word	0x0800d498
 800aeb0:	0800d498 	.word	0x0800d498
 800aeb4:	0800d498 	.word	0x0800d498
 800aeb8:	0800d49c 	.word	0x0800d49c

0800aebc <memset>:
 800aebc:	4402      	add	r2, r0
 800aebe:	4603      	mov	r3, r0
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d100      	bne.n	800aec6 <memset+0xa>
 800aec4:	4770      	bx	lr
 800aec6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeca:	e7f9      	b.n	800aec0 <memset+0x4>

0800aecc <__cvt>:
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	ec55 4b10 	vmov	r4, r5, d0
 800aed4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aed6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	460e      	mov	r6, r1
 800aede:	4691      	mov	r9, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	bfb8      	it	lt
 800aee4:	4622      	movlt	r2, r4
 800aee6:	462b      	mov	r3, r5
 800aee8:	f027 0720 	bic.w	r7, r7, #32
 800aeec:	bfbb      	ittet	lt
 800aeee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aef2:	461d      	movlt	r5, r3
 800aef4:	2300      	movge	r3, #0
 800aef6:	232d      	movlt	r3, #45	; 0x2d
 800aef8:	bfb8      	it	lt
 800aefa:	4614      	movlt	r4, r2
 800aefc:	2f46      	cmp	r7, #70	; 0x46
 800aefe:	700b      	strb	r3, [r1, #0]
 800af00:	d004      	beq.n	800af0c <__cvt+0x40>
 800af02:	2f45      	cmp	r7, #69	; 0x45
 800af04:	d100      	bne.n	800af08 <__cvt+0x3c>
 800af06:	3601      	adds	r6, #1
 800af08:	2102      	movs	r1, #2
 800af0a:	e000      	b.n	800af0e <__cvt+0x42>
 800af0c:	2103      	movs	r1, #3
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	ab02      	add	r3, sp, #8
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	4632      	mov	r2, r6
 800af18:	4653      	mov	r3, sl
 800af1a:	ec45 4b10 	vmov	d0, r4, r5
 800af1e:	f000 fcf3 	bl	800b908 <_dtoa_r>
 800af22:	2f47      	cmp	r7, #71	; 0x47
 800af24:	4680      	mov	r8, r0
 800af26:	d102      	bne.n	800af2e <__cvt+0x62>
 800af28:	f019 0f01 	tst.w	r9, #1
 800af2c:	d026      	beq.n	800af7c <__cvt+0xb0>
 800af2e:	2f46      	cmp	r7, #70	; 0x46
 800af30:	eb08 0906 	add.w	r9, r8, r6
 800af34:	d111      	bne.n	800af5a <__cvt+0x8e>
 800af36:	f898 3000 	ldrb.w	r3, [r8]
 800af3a:	2b30      	cmp	r3, #48	; 0x30
 800af3c:	d10a      	bne.n	800af54 <__cvt+0x88>
 800af3e:	2200      	movs	r2, #0
 800af40:	2300      	movs	r3, #0
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 fde7 	bl	8000b18 <__aeabi_dcmpeq>
 800af4a:	b918      	cbnz	r0, 800af54 <__cvt+0x88>
 800af4c:	f1c6 0601 	rsb	r6, r6, #1
 800af50:	f8ca 6000 	str.w	r6, [sl]
 800af54:	f8da 3000 	ldr.w	r3, [sl]
 800af58:	4499      	add	r9, r3
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	4620      	mov	r0, r4
 800af60:	4629      	mov	r1, r5
 800af62:	f7f5 fdd9 	bl	8000b18 <__aeabi_dcmpeq>
 800af66:	b938      	cbnz	r0, 800af78 <__cvt+0xac>
 800af68:	2230      	movs	r2, #48	; 0x30
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	454b      	cmp	r3, r9
 800af6e:	d205      	bcs.n	800af7c <__cvt+0xb0>
 800af70:	1c59      	adds	r1, r3, #1
 800af72:	9103      	str	r1, [sp, #12]
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	e7f8      	b.n	800af6a <__cvt+0x9e>
 800af78:	f8cd 900c 	str.w	r9, [sp, #12]
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af80:	eba3 0308 	sub.w	r3, r3, r8
 800af84:	4640      	mov	r0, r8
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	b004      	add	sp, #16
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800af8e <__exponent>:
 800af8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af90:	2900      	cmp	r1, #0
 800af92:	4604      	mov	r4, r0
 800af94:	bfba      	itte	lt
 800af96:	4249      	neglt	r1, r1
 800af98:	232d      	movlt	r3, #45	; 0x2d
 800af9a:	232b      	movge	r3, #43	; 0x2b
 800af9c:	2909      	cmp	r1, #9
 800af9e:	f804 2b02 	strb.w	r2, [r4], #2
 800afa2:	7043      	strb	r3, [r0, #1]
 800afa4:	dd20      	ble.n	800afe8 <__exponent+0x5a>
 800afa6:	f10d 0307 	add.w	r3, sp, #7
 800afaa:	461f      	mov	r7, r3
 800afac:	260a      	movs	r6, #10
 800afae:	fb91 f5f6 	sdiv	r5, r1, r6
 800afb2:	fb06 1115 	mls	r1, r6, r5, r1
 800afb6:	3130      	adds	r1, #48	; 0x30
 800afb8:	2d09      	cmp	r5, #9
 800afba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800afbe:	f103 32ff 	add.w	r2, r3, #4294967295
 800afc2:	4629      	mov	r1, r5
 800afc4:	dc09      	bgt.n	800afda <__exponent+0x4c>
 800afc6:	3130      	adds	r1, #48	; 0x30
 800afc8:	3b02      	subs	r3, #2
 800afca:	f802 1c01 	strb.w	r1, [r2, #-1]
 800afce:	42bb      	cmp	r3, r7
 800afd0:	4622      	mov	r2, r4
 800afd2:	d304      	bcc.n	800afde <__exponent+0x50>
 800afd4:	1a10      	subs	r0, r2, r0
 800afd6:	b003      	add	sp, #12
 800afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afda:	4613      	mov	r3, r2
 800afdc:	e7e7      	b.n	800afae <__exponent+0x20>
 800afde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afe2:	f804 2b01 	strb.w	r2, [r4], #1
 800afe6:	e7f2      	b.n	800afce <__exponent+0x40>
 800afe8:	2330      	movs	r3, #48	; 0x30
 800afea:	4419      	add	r1, r3
 800afec:	7083      	strb	r3, [r0, #2]
 800afee:	1d02      	adds	r2, r0, #4
 800aff0:	70c1      	strb	r1, [r0, #3]
 800aff2:	e7ef      	b.n	800afd4 <__exponent+0x46>

0800aff4 <_printf_float>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	b08d      	sub	sp, #52	; 0x34
 800affa:	460c      	mov	r4, r1
 800affc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b000:	4616      	mov	r6, r2
 800b002:	461f      	mov	r7, r3
 800b004:	4605      	mov	r5, r0
 800b006:	f001 fa37 	bl	800c478 <_localeconv_r>
 800b00a:	6803      	ldr	r3, [r0, #0]
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f5 f906 	bl	8000220 <strlen>
 800b014:	2300      	movs	r3, #0
 800b016:	930a      	str	r3, [sp, #40]	; 0x28
 800b018:	f8d8 3000 	ldr.w	r3, [r8]
 800b01c:	9005      	str	r0, [sp, #20]
 800b01e:	3307      	adds	r3, #7
 800b020:	f023 0307 	bic.w	r3, r3, #7
 800b024:	f103 0208 	add.w	r2, r3, #8
 800b028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b02c:	f8d4 b000 	ldr.w	fp, [r4]
 800b030:	f8c8 2000 	str.w	r2, [r8]
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b03c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b040:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b044:	9307      	str	r3, [sp, #28]
 800b046:	f8cd 8018 	str.w	r8, [sp, #24]
 800b04a:	f04f 32ff 	mov.w	r2, #4294967295
 800b04e:	4ba7      	ldr	r3, [pc, #668]	; (800b2ec <_printf_float+0x2f8>)
 800b050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b054:	f7f5 fd92 	bl	8000b7c <__aeabi_dcmpun>
 800b058:	bb70      	cbnz	r0, 800b0b8 <_printf_float+0xc4>
 800b05a:	f04f 32ff 	mov.w	r2, #4294967295
 800b05e:	4ba3      	ldr	r3, [pc, #652]	; (800b2ec <_printf_float+0x2f8>)
 800b060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b064:	f7f5 fd6c 	bl	8000b40 <__aeabi_dcmple>
 800b068:	bb30      	cbnz	r0, 800b0b8 <_printf_float+0xc4>
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 800b076:	b110      	cbz	r0, 800b07e <_printf_float+0x8a>
 800b078:	232d      	movs	r3, #45	; 0x2d
 800b07a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07e:	4a9c      	ldr	r2, [pc, #624]	; (800b2f0 <_printf_float+0x2fc>)
 800b080:	4b9c      	ldr	r3, [pc, #624]	; (800b2f4 <_printf_float+0x300>)
 800b082:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b086:	bf8c      	ite	hi
 800b088:	4690      	movhi	r8, r2
 800b08a:	4698      	movls	r8, r3
 800b08c:	2303      	movs	r3, #3
 800b08e:	f02b 0204 	bic.w	r2, fp, #4
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	6022      	str	r2, [r4, #0]
 800b096:	f04f 0900 	mov.w	r9, #0
 800b09a:	9700      	str	r7, [sp, #0]
 800b09c:	4633      	mov	r3, r6
 800b09e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f9e6 	bl	800b474 <_printf_common>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f040 808d 	bne.w	800b1c8 <_printf_float+0x1d4>
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	b00d      	add	sp, #52	; 0x34
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	4640      	mov	r0, r8
 800b0be:	4649      	mov	r1, r9
 800b0c0:	f7f5 fd5c 	bl	8000b7c <__aeabi_dcmpun>
 800b0c4:	b110      	cbz	r0, 800b0cc <_printf_float+0xd8>
 800b0c6:	4a8c      	ldr	r2, [pc, #560]	; (800b2f8 <_printf_float+0x304>)
 800b0c8:	4b8c      	ldr	r3, [pc, #560]	; (800b2fc <_printf_float+0x308>)
 800b0ca:	e7da      	b.n	800b082 <_printf_float+0x8e>
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	1c4b      	adds	r3, r1, #1
 800b0d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b0d4:	a80a      	add	r0, sp, #40	; 0x28
 800b0d6:	d13e      	bne.n	800b156 <_printf_float+0x162>
 800b0d8:	2306      	movs	r3, #6
 800b0da:	6063      	str	r3, [r4, #4]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b0e2:	ab09      	add	r3, sp, #36	; 0x24
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	ec49 8b10 	vmov	d0, r8, r9
 800b0ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0ee:	6022      	str	r2, [r4, #0]
 800b0f0:	f8cd a004 	str.w	sl, [sp, #4]
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f7ff fee8 	bl	800aecc <__cvt>
 800b0fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b100:	2b47      	cmp	r3, #71	; 0x47
 800b102:	4680      	mov	r8, r0
 800b104:	d109      	bne.n	800b11a <_printf_float+0x126>
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	1cd8      	adds	r0, r3, #3
 800b10a:	db02      	blt.n	800b112 <_printf_float+0x11e>
 800b10c:	6862      	ldr	r2, [r4, #4]
 800b10e:	4293      	cmp	r3, r2
 800b110:	dd47      	ble.n	800b1a2 <_printf_float+0x1ae>
 800b112:	f1aa 0a02 	sub.w	sl, sl, #2
 800b116:	fa5f fa8a 	uxtb.w	sl, sl
 800b11a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b11e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b120:	d824      	bhi.n	800b16c <_printf_float+0x178>
 800b122:	3901      	subs	r1, #1
 800b124:	4652      	mov	r2, sl
 800b126:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b12a:	9109      	str	r1, [sp, #36]	; 0x24
 800b12c:	f7ff ff2f 	bl	800af8e <__exponent>
 800b130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b132:	1813      	adds	r3, r2, r0
 800b134:	2a01      	cmp	r2, #1
 800b136:	4681      	mov	r9, r0
 800b138:	6123      	str	r3, [r4, #16]
 800b13a:	dc02      	bgt.n	800b142 <_printf_float+0x14e>
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	07d1      	lsls	r1, r2, #31
 800b140:	d501      	bpl.n	800b146 <_printf_float+0x152>
 800b142:	3301      	adds	r3, #1
 800b144:	6123      	str	r3, [r4, #16]
 800b146:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0a5      	beq.n	800b09a <_printf_float+0xa6>
 800b14e:	232d      	movs	r3, #45	; 0x2d
 800b150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b154:	e7a1      	b.n	800b09a <_printf_float+0xa6>
 800b156:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b15a:	f000 8177 	beq.w	800b44c <_printf_float+0x458>
 800b15e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b162:	d1bb      	bne.n	800b0dc <_printf_float+0xe8>
 800b164:	2900      	cmp	r1, #0
 800b166:	d1b9      	bne.n	800b0dc <_printf_float+0xe8>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7b6      	b.n	800b0da <_printf_float+0xe6>
 800b16c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b170:	d119      	bne.n	800b1a6 <_printf_float+0x1b2>
 800b172:	2900      	cmp	r1, #0
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	dd0c      	ble.n	800b192 <_printf_float+0x19e>
 800b178:	6121      	str	r1, [r4, #16]
 800b17a:	b913      	cbnz	r3, 800b182 <_printf_float+0x18e>
 800b17c:	6822      	ldr	r2, [r4, #0]
 800b17e:	07d2      	lsls	r2, r2, #31
 800b180:	d502      	bpl.n	800b188 <_printf_float+0x194>
 800b182:	3301      	adds	r3, #1
 800b184:	440b      	add	r3, r1
 800b186:	6123      	str	r3, [r4, #16]
 800b188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b18c:	f04f 0900 	mov.w	r9, #0
 800b190:	e7d9      	b.n	800b146 <_printf_float+0x152>
 800b192:	b913      	cbnz	r3, 800b19a <_printf_float+0x1a6>
 800b194:	6822      	ldr	r2, [r4, #0]
 800b196:	07d0      	lsls	r0, r2, #31
 800b198:	d501      	bpl.n	800b19e <_printf_float+0x1aa>
 800b19a:	3302      	adds	r3, #2
 800b19c:	e7f3      	b.n	800b186 <_printf_float+0x192>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e7f1      	b.n	800b186 <_printf_float+0x192>
 800b1a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b1a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	db05      	blt.n	800b1ba <_printf_float+0x1c6>
 800b1ae:	6822      	ldr	r2, [r4, #0]
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	07d1      	lsls	r1, r2, #31
 800b1b4:	d5e8      	bpl.n	800b188 <_printf_float+0x194>
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	e7e5      	b.n	800b186 <_printf_float+0x192>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfd4      	ite	le
 800b1be:	f1c3 0302 	rsble	r3, r3, #2
 800b1c2:	2301      	movgt	r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	e7de      	b.n	800b186 <_printf_float+0x192>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	055a      	lsls	r2, r3, #21
 800b1cc:	d407      	bmi.n	800b1de <_printf_float+0x1ea>
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d12b      	bne.n	800b234 <_printf_float+0x240>
 800b1dc:	e767      	b.n	800b0ae <_printf_float+0xba>
 800b1de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b1e2:	f240 80dc 	bls.w	800b39e <_printf_float+0x3aa>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1ee:	f7f5 fc93 	bl	8000b18 <__aeabi_dcmpeq>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d033      	beq.n	800b25e <_printf_float+0x26a>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	4a41      	ldr	r2, [pc, #260]	; (800b300 <_printf_float+0x30c>)
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b8      	blx	r7
 800b200:	3001      	adds	r0, #1
 800b202:	f43f af54 	beq.w	800b0ae <_printf_float+0xba>
 800b206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b20a:	429a      	cmp	r2, r3
 800b20c:	db02      	blt.n	800b214 <_printf_float+0x220>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	07d8      	lsls	r0, r3, #31
 800b212:	d50f      	bpl.n	800b234 <_printf_float+0x240>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f43f af45 	beq.w	800b0ae <_printf_float+0xba>
 800b224:	f04f 0800 	mov.w	r8, #0
 800b228:	f104 091a 	add.w	r9, r4, #26
 800b22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22e:	3b01      	subs	r3, #1
 800b230:	4543      	cmp	r3, r8
 800b232:	dc09      	bgt.n	800b248 <_printf_float+0x254>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	079b      	lsls	r3, r3, #30
 800b238:	f100 8103 	bmi.w	800b442 <_printf_float+0x44e>
 800b23c:	68e0      	ldr	r0, [r4, #12]
 800b23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b240:	4298      	cmp	r0, r3
 800b242:	bfb8      	it	lt
 800b244:	4618      	movlt	r0, r3
 800b246:	e734      	b.n	800b0b2 <_printf_float+0xbe>
 800b248:	2301      	movs	r3, #1
 800b24a:	464a      	mov	r2, r9
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f af2b 	beq.w	800b0ae <_printf_float+0xba>
 800b258:	f108 0801 	add.w	r8, r8, #1
 800b25c:	e7e6      	b.n	800b22c <_printf_float+0x238>
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc2b      	bgt.n	800b2bc <_printf_float+0x2c8>
 800b264:	2301      	movs	r3, #1
 800b266:	4a26      	ldr	r2, [pc, #152]	; (800b300 <_printf_float+0x30c>)
 800b268:	4631      	mov	r1, r6
 800b26a:	4628      	mov	r0, r5
 800b26c:	47b8      	blx	r7
 800b26e:	3001      	adds	r0, #1
 800b270:	f43f af1d 	beq.w	800b0ae <_printf_float+0xba>
 800b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b276:	b923      	cbnz	r3, 800b282 <_printf_float+0x28e>
 800b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27a:	b913      	cbnz	r3, 800b282 <_printf_float+0x28e>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	07d9      	lsls	r1, r3, #31
 800b280:	d5d8      	bpl.n	800b234 <_printf_float+0x240>
 800b282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b286:	4631      	mov	r1, r6
 800b288:	4628      	mov	r0, r5
 800b28a:	47b8      	blx	r7
 800b28c:	3001      	adds	r0, #1
 800b28e:	f43f af0e 	beq.w	800b0ae <_printf_float+0xba>
 800b292:	f04f 0900 	mov.w	r9, #0
 800b296:	f104 0a1a 	add.w	sl, r4, #26
 800b29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29c:	425b      	negs	r3, r3
 800b29e:	454b      	cmp	r3, r9
 800b2a0:	dc01      	bgt.n	800b2a6 <_printf_float+0x2b2>
 800b2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a4:	e794      	b.n	800b1d0 <_printf_float+0x1dc>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	47b8      	blx	r7
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	f43f aefc 	beq.w	800b0ae <_printf_float+0xba>
 800b2b6:	f109 0901 	add.w	r9, r9, #1
 800b2ba:	e7ee      	b.n	800b29a <_printf_float+0x2a6>
 800b2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	bfa8      	it	ge
 800b2c4:	461a      	movge	r2, r3
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	4691      	mov	r9, r2
 800b2ca:	dd07      	ble.n	800b2dc <_printf_float+0x2e8>
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f43f aee9 	beq.w	800b0ae <_printf_float+0xba>
 800b2dc:	f104 031a 	add.w	r3, r4, #26
 800b2e0:	f04f 0b00 	mov.w	fp, #0
 800b2e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2e8:	9306      	str	r3, [sp, #24]
 800b2ea:	e015      	b.n	800b318 <_printf_float+0x324>
 800b2ec:	7fefffff 	.word	0x7fefffff
 800b2f0:	0800d23a 	.word	0x0800d23a
 800b2f4:	0800d236 	.word	0x0800d236
 800b2f8:	0800d242 	.word	0x0800d242
 800b2fc:	0800d23e 	.word	0x0800d23e
 800b300:	0800d246 	.word	0x0800d246
 800b304:	2301      	movs	r3, #1
 800b306:	9a06      	ldr	r2, [sp, #24]
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f aecd 	beq.w	800b0ae <_printf_float+0xba>
 800b314:	f10b 0b01 	add.w	fp, fp, #1
 800b318:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b31c:	ebaa 0309 	sub.w	r3, sl, r9
 800b320:	455b      	cmp	r3, fp
 800b322:	dcef      	bgt.n	800b304 <_printf_float+0x310>
 800b324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b328:	429a      	cmp	r2, r3
 800b32a:	44d0      	add	r8, sl
 800b32c:	db15      	blt.n	800b35a <_printf_float+0x366>
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	07da      	lsls	r2, r3, #31
 800b332:	d412      	bmi.n	800b35a <_printf_float+0x366>
 800b334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b336:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b338:	eba3 020a 	sub.w	r2, r3, sl
 800b33c:	eba3 0a01 	sub.w	sl, r3, r1
 800b340:	4592      	cmp	sl, r2
 800b342:	bfa8      	it	ge
 800b344:	4692      	movge	sl, r2
 800b346:	f1ba 0f00 	cmp.w	sl, #0
 800b34a:	dc0e      	bgt.n	800b36a <_printf_float+0x376>
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b354:	f104 091a 	add.w	r9, r4, #26
 800b358:	e019      	b.n	800b38e <_printf_float+0x39a>
 800b35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b35e:	4631      	mov	r1, r6
 800b360:	4628      	mov	r0, r5
 800b362:	47b8      	blx	r7
 800b364:	3001      	adds	r0, #1
 800b366:	d1e5      	bne.n	800b334 <_printf_float+0x340>
 800b368:	e6a1      	b.n	800b0ae <_printf_float+0xba>
 800b36a:	4653      	mov	r3, sl
 800b36c:	4642      	mov	r2, r8
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	d1e9      	bne.n	800b34c <_printf_float+0x358>
 800b378:	e699      	b.n	800b0ae <_printf_float+0xba>
 800b37a:	2301      	movs	r3, #1
 800b37c:	464a      	mov	r2, r9
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f ae92 	beq.w	800b0ae <_printf_float+0xba>
 800b38a:	f108 0801 	add.w	r8, r8, #1
 800b38e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	eba3 030a 	sub.w	r3, r3, sl
 800b398:	4543      	cmp	r3, r8
 800b39a:	dcee      	bgt.n	800b37a <_printf_float+0x386>
 800b39c:	e74a      	b.n	800b234 <_printf_float+0x240>
 800b39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3a0:	2a01      	cmp	r2, #1
 800b3a2:	dc01      	bgt.n	800b3a8 <_printf_float+0x3b4>
 800b3a4:	07db      	lsls	r3, r3, #31
 800b3a6:	d53a      	bpl.n	800b41e <_printf_float+0x42a>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4642      	mov	r2, r8
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	f43f ae7b 	beq.w	800b0ae <_printf_float+0xba>
 800b3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f108 0801 	add.w	r8, r8, #1
 800b3c8:	f43f ae71 	beq.w	800b0ae <_printf_float+0xba>
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f103 3aff 	add.w	sl, r3, #4294967295
 800b3d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f7f5 fb9d 	bl	8000b18 <__aeabi_dcmpeq>
 800b3de:	b9c8      	cbnz	r0, 800b414 <_printf_float+0x420>
 800b3e0:	4653      	mov	r3, sl
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	4631      	mov	r1, r6
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	47b8      	blx	r7
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d10e      	bne.n	800b40c <_printf_float+0x418>
 800b3ee:	e65e      	b.n	800b0ae <_printf_float+0xba>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4652      	mov	r2, sl
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b8      	blx	r7
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	f43f ae57 	beq.w	800b0ae <_printf_float+0xba>
 800b400:	f108 0801 	add.w	r8, r8, #1
 800b404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b406:	3b01      	subs	r3, #1
 800b408:	4543      	cmp	r3, r8
 800b40a:	dcf1      	bgt.n	800b3f0 <_printf_float+0x3fc>
 800b40c:	464b      	mov	r3, r9
 800b40e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b412:	e6de      	b.n	800b1d2 <_printf_float+0x1de>
 800b414:	f04f 0800 	mov.w	r8, #0
 800b418:	f104 0a1a 	add.w	sl, r4, #26
 800b41c:	e7f2      	b.n	800b404 <_printf_float+0x410>
 800b41e:	2301      	movs	r3, #1
 800b420:	e7df      	b.n	800b3e2 <_printf_float+0x3ee>
 800b422:	2301      	movs	r3, #1
 800b424:	464a      	mov	r2, r9
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	f43f ae3e 	beq.w	800b0ae <_printf_float+0xba>
 800b432:	f108 0801 	add.w	r8, r8, #1
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	4543      	cmp	r3, r8
 800b43e:	dcf0      	bgt.n	800b422 <_printf_float+0x42e>
 800b440:	e6fc      	b.n	800b23c <_printf_float+0x248>
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	f104 0919 	add.w	r9, r4, #25
 800b44a:	e7f4      	b.n	800b436 <_printf_float+0x442>
 800b44c:	2900      	cmp	r1, #0
 800b44e:	f43f ae8b 	beq.w	800b168 <_printf_float+0x174>
 800b452:	2300      	movs	r3, #0
 800b454:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b458:	ab09      	add	r3, sp, #36	; 0x24
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	ec49 8b10 	vmov	d0, r8, r9
 800b460:	6022      	str	r2, [r4, #0]
 800b462:	f8cd a004 	str.w	sl, [sp, #4]
 800b466:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7ff fd2e 	bl	800aecc <__cvt>
 800b470:	4680      	mov	r8, r0
 800b472:	e648      	b.n	800b106 <_printf_float+0x112>

0800b474 <_printf_common>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	4691      	mov	r9, r2
 800b47a:	461f      	mov	r7, r3
 800b47c:	688a      	ldr	r2, [r1, #8]
 800b47e:	690b      	ldr	r3, [r1, #16]
 800b480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b484:	4293      	cmp	r3, r2
 800b486:	bfb8      	it	lt
 800b488:	4613      	movlt	r3, r2
 800b48a:	f8c9 3000 	str.w	r3, [r9]
 800b48e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b492:	4606      	mov	r6, r0
 800b494:	460c      	mov	r4, r1
 800b496:	b112      	cbz	r2, 800b49e <_printf_common+0x2a>
 800b498:	3301      	adds	r3, #1
 800b49a:	f8c9 3000 	str.w	r3, [r9]
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	0699      	lsls	r1, r3, #26
 800b4a2:	bf42      	ittt	mi
 800b4a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b4a8:	3302      	addmi	r3, #2
 800b4aa:	f8c9 3000 	strmi.w	r3, [r9]
 800b4ae:	6825      	ldr	r5, [r4, #0]
 800b4b0:	f015 0506 	ands.w	r5, r5, #6
 800b4b4:	d107      	bne.n	800b4c6 <_printf_common+0x52>
 800b4b6:	f104 0a19 	add.w	sl, r4, #25
 800b4ba:	68e3      	ldr	r3, [r4, #12]
 800b4bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	42ab      	cmp	r3, r5
 800b4c4:	dc28      	bgt.n	800b518 <_printf_common+0xa4>
 800b4c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b4ca:	6822      	ldr	r2, [r4, #0]
 800b4cc:	3300      	adds	r3, #0
 800b4ce:	bf18      	it	ne
 800b4d0:	2301      	movne	r3, #1
 800b4d2:	0692      	lsls	r2, r2, #26
 800b4d4:	d42d      	bmi.n	800b532 <_printf_common+0xbe>
 800b4d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4da:	4639      	mov	r1, r7
 800b4dc:	4630      	mov	r0, r6
 800b4de:	47c0      	blx	r8
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d020      	beq.n	800b526 <_printf_common+0xb2>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	68e5      	ldr	r5, [r4, #12]
 800b4e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4ec:	f003 0306 	and.w	r3, r3, #6
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	bf08      	it	eq
 800b4f4:	1aad      	subeq	r5, r5, r2
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	6922      	ldr	r2, [r4, #16]
 800b4fa:	bf0c      	ite	eq
 800b4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b500:	2500      	movne	r5, #0
 800b502:	4293      	cmp	r3, r2
 800b504:	bfc4      	itt	gt
 800b506:	1a9b      	subgt	r3, r3, r2
 800b508:	18ed      	addgt	r5, r5, r3
 800b50a:	f04f 0900 	mov.w	r9, #0
 800b50e:	341a      	adds	r4, #26
 800b510:	454d      	cmp	r5, r9
 800b512:	d11a      	bne.n	800b54a <_printf_common+0xd6>
 800b514:	2000      	movs	r0, #0
 800b516:	e008      	b.n	800b52a <_printf_common+0xb6>
 800b518:	2301      	movs	r3, #1
 800b51a:	4652      	mov	r2, sl
 800b51c:	4639      	mov	r1, r7
 800b51e:	4630      	mov	r0, r6
 800b520:	47c0      	blx	r8
 800b522:	3001      	adds	r0, #1
 800b524:	d103      	bne.n	800b52e <_printf_common+0xba>
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52e:	3501      	adds	r5, #1
 800b530:	e7c3      	b.n	800b4ba <_printf_common+0x46>
 800b532:	18e1      	adds	r1, r4, r3
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	2030      	movs	r0, #48	; 0x30
 800b538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b53c:	4422      	add	r2, r4
 800b53e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b546:	3302      	adds	r3, #2
 800b548:	e7c5      	b.n	800b4d6 <_printf_common+0x62>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4622      	mov	r2, r4
 800b54e:	4639      	mov	r1, r7
 800b550:	4630      	mov	r0, r6
 800b552:	47c0      	blx	r8
 800b554:	3001      	adds	r0, #1
 800b556:	d0e6      	beq.n	800b526 <_printf_common+0xb2>
 800b558:	f109 0901 	add.w	r9, r9, #1
 800b55c:	e7d8      	b.n	800b510 <_printf_common+0x9c>
	...

0800b560 <_printf_i>:
 800b560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b568:	460c      	mov	r4, r1
 800b56a:	7e09      	ldrb	r1, [r1, #24]
 800b56c:	b085      	sub	sp, #20
 800b56e:	296e      	cmp	r1, #110	; 0x6e
 800b570:	4617      	mov	r7, r2
 800b572:	4606      	mov	r6, r0
 800b574:	4698      	mov	r8, r3
 800b576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b578:	f000 80b3 	beq.w	800b6e2 <_printf_i+0x182>
 800b57c:	d822      	bhi.n	800b5c4 <_printf_i+0x64>
 800b57e:	2963      	cmp	r1, #99	; 0x63
 800b580:	d036      	beq.n	800b5f0 <_printf_i+0x90>
 800b582:	d80a      	bhi.n	800b59a <_printf_i+0x3a>
 800b584:	2900      	cmp	r1, #0
 800b586:	f000 80b9 	beq.w	800b6fc <_printf_i+0x19c>
 800b58a:	2958      	cmp	r1, #88	; 0x58
 800b58c:	f000 8083 	beq.w	800b696 <_printf_i+0x136>
 800b590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b598:	e032      	b.n	800b600 <_printf_i+0xa0>
 800b59a:	2964      	cmp	r1, #100	; 0x64
 800b59c:	d001      	beq.n	800b5a2 <_printf_i+0x42>
 800b59e:	2969      	cmp	r1, #105	; 0x69
 800b5a0:	d1f6      	bne.n	800b590 <_printf_i+0x30>
 800b5a2:	6820      	ldr	r0, [r4, #0]
 800b5a4:	6813      	ldr	r3, [r2, #0]
 800b5a6:	0605      	lsls	r5, r0, #24
 800b5a8:	f103 0104 	add.w	r1, r3, #4
 800b5ac:	d52a      	bpl.n	800b604 <_printf_i+0xa4>
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6011      	str	r1, [r2, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	da03      	bge.n	800b5be <_printf_i+0x5e>
 800b5b6:	222d      	movs	r2, #45	; 0x2d
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b5be:	486f      	ldr	r0, [pc, #444]	; (800b77c <_printf_i+0x21c>)
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	e039      	b.n	800b638 <_printf_i+0xd8>
 800b5c4:	2973      	cmp	r1, #115	; 0x73
 800b5c6:	f000 809d 	beq.w	800b704 <_printf_i+0x1a4>
 800b5ca:	d808      	bhi.n	800b5de <_printf_i+0x7e>
 800b5cc:	296f      	cmp	r1, #111	; 0x6f
 800b5ce:	d020      	beq.n	800b612 <_printf_i+0xb2>
 800b5d0:	2970      	cmp	r1, #112	; 0x70
 800b5d2:	d1dd      	bne.n	800b590 <_printf_i+0x30>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	f043 0320 	orr.w	r3, r3, #32
 800b5da:	6023      	str	r3, [r4, #0]
 800b5dc:	e003      	b.n	800b5e6 <_printf_i+0x86>
 800b5de:	2975      	cmp	r1, #117	; 0x75
 800b5e0:	d017      	beq.n	800b612 <_printf_i+0xb2>
 800b5e2:	2978      	cmp	r1, #120	; 0x78
 800b5e4:	d1d4      	bne.n	800b590 <_printf_i+0x30>
 800b5e6:	2378      	movs	r3, #120	; 0x78
 800b5e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5ec:	4864      	ldr	r0, [pc, #400]	; (800b780 <_printf_i+0x220>)
 800b5ee:	e055      	b.n	800b69c <_printf_i+0x13c>
 800b5f0:	6813      	ldr	r3, [r2, #0]
 800b5f2:	1d19      	adds	r1, r3, #4
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6011      	str	r1, [r2, #0]
 800b5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b600:	2301      	movs	r3, #1
 800b602:	e08c      	b.n	800b71e <_printf_i+0x1be>
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6011      	str	r1, [r2, #0]
 800b608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b60c:	bf18      	it	ne
 800b60e:	b21b      	sxthne	r3, r3
 800b610:	e7cf      	b.n	800b5b2 <_printf_i+0x52>
 800b612:	6813      	ldr	r3, [r2, #0]
 800b614:	6825      	ldr	r5, [r4, #0]
 800b616:	1d18      	adds	r0, r3, #4
 800b618:	6010      	str	r0, [r2, #0]
 800b61a:	0628      	lsls	r0, r5, #24
 800b61c:	d501      	bpl.n	800b622 <_printf_i+0xc2>
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	e002      	b.n	800b628 <_printf_i+0xc8>
 800b622:	0668      	lsls	r0, r5, #25
 800b624:	d5fb      	bpl.n	800b61e <_printf_i+0xbe>
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	4854      	ldr	r0, [pc, #336]	; (800b77c <_printf_i+0x21c>)
 800b62a:	296f      	cmp	r1, #111	; 0x6f
 800b62c:	bf14      	ite	ne
 800b62e:	220a      	movne	r2, #10
 800b630:	2208      	moveq	r2, #8
 800b632:	2100      	movs	r1, #0
 800b634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b638:	6865      	ldr	r5, [r4, #4]
 800b63a:	60a5      	str	r5, [r4, #8]
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	f2c0 8095 	blt.w	800b76c <_printf_i+0x20c>
 800b642:	6821      	ldr	r1, [r4, #0]
 800b644:	f021 0104 	bic.w	r1, r1, #4
 800b648:	6021      	str	r1, [r4, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d13d      	bne.n	800b6ca <_printf_i+0x16a>
 800b64e:	2d00      	cmp	r5, #0
 800b650:	f040 808e 	bne.w	800b770 <_printf_i+0x210>
 800b654:	4665      	mov	r5, ip
 800b656:	2a08      	cmp	r2, #8
 800b658:	d10b      	bne.n	800b672 <_printf_i+0x112>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	07db      	lsls	r3, r3, #31
 800b65e:	d508      	bpl.n	800b672 <_printf_i+0x112>
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	6862      	ldr	r2, [r4, #4]
 800b664:	429a      	cmp	r2, r3
 800b666:	bfde      	ittt	le
 800b668:	2330      	movle	r3, #48	; 0x30
 800b66a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b66e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b672:	ebac 0305 	sub.w	r3, ip, r5
 800b676:	6123      	str	r3, [r4, #16]
 800b678:	f8cd 8000 	str.w	r8, [sp]
 800b67c:	463b      	mov	r3, r7
 800b67e:	aa03      	add	r2, sp, #12
 800b680:	4621      	mov	r1, r4
 800b682:	4630      	mov	r0, r6
 800b684:	f7ff fef6 	bl	800b474 <_printf_common>
 800b688:	3001      	adds	r0, #1
 800b68a:	d14d      	bne.n	800b728 <_printf_i+0x1c8>
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	b005      	add	sp, #20
 800b692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b696:	4839      	ldr	r0, [pc, #228]	; (800b77c <_printf_i+0x21c>)
 800b698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b69c:	6813      	ldr	r3, [r2, #0]
 800b69e:	6821      	ldr	r1, [r4, #0]
 800b6a0:	1d1d      	adds	r5, r3, #4
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6015      	str	r5, [r2, #0]
 800b6a6:	060a      	lsls	r2, r1, #24
 800b6a8:	d50b      	bpl.n	800b6c2 <_printf_i+0x162>
 800b6aa:	07ca      	lsls	r2, r1, #31
 800b6ac:	bf44      	itt	mi
 800b6ae:	f041 0120 	orrmi.w	r1, r1, #32
 800b6b2:	6021      	strmi	r1, [r4, #0]
 800b6b4:	b91b      	cbnz	r3, 800b6be <_printf_i+0x15e>
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	f022 0220 	bic.w	r2, r2, #32
 800b6bc:	6022      	str	r2, [r4, #0]
 800b6be:	2210      	movs	r2, #16
 800b6c0:	e7b7      	b.n	800b632 <_printf_i+0xd2>
 800b6c2:	064d      	lsls	r5, r1, #25
 800b6c4:	bf48      	it	mi
 800b6c6:	b29b      	uxthmi	r3, r3
 800b6c8:	e7ef      	b.n	800b6aa <_printf_i+0x14a>
 800b6ca:	4665      	mov	r5, ip
 800b6cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6d0:	fb02 3311 	mls	r3, r2, r1, r3
 800b6d4:	5cc3      	ldrb	r3, [r0, r3]
 800b6d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b6da:	460b      	mov	r3, r1
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	d1f5      	bne.n	800b6cc <_printf_i+0x16c>
 800b6e0:	e7b9      	b.n	800b656 <_printf_i+0xf6>
 800b6e2:	6813      	ldr	r3, [r2, #0]
 800b6e4:	6825      	ldr	r5, [r4, #0]
 800b6e6:	6961      	ldr	r1, [r4, #20]
 800b6e8:	1d18      	adds	r0, r3, #4
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	0628      	lsls	r0, r5, #24
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	d501      	bpl.n	800b6f6 <_printf_i+0x196>
 800b6f2:	6019      	str	r1, [r3, #0]
 800b6f4:	e002      	b.n	800b6fc <_printf_i+0x19c>
 800b6f6:	066a      	lsls	r2, r5, #25
 800b6f8:	d5fb      	bpl.n	800b6f2 <_printf_i+0x192>
 800b6fa:	8019      	strh	r1, [r3, #0]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	4665      	mov	r5, ip
 800b702:	e7b9      	b.n	800b678 <_printf_i+0x118>
 800b704:	6813      	ldr	r3, [r2, #0]
 800b706:	1d19      	adds	r1, r3, #4
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	681d      	ldr	r5, [r3, #0]
 800b70c:	6862      	ldr	r2, [r4, #4]
 800b70e:	2100      	movs	r1, #0
 800b710:	4628      	mov	r0, r5
 800b712:	f7f4 fd8d 	bl	8000230 <memchr>
 800b716:	b108      	cbz	r0, 800b71c <_printf_i+0x1bc>
 800b718:	1b40      	subs	r0, r0, r5
 800b71a:	6060      	str	r0, [r4, #4]
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	2300      	movs	r3, #0
 800b722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b726:	e7a7      	b.n	800b678 <_printf_i+0x118>
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	462a      	mov	r2, r5
 800b72c:	4639      	mov	r1, r7
 800b72e:	4630      	mov	r0, r6
 800b730:	47c0      	blx	r8
 800b732:	3001      	adds	r0, #1
 800b734:	d0aa      	beq.n	800b68c <_printf_i+0x12c>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	079b      	lsls	r3, r3, #30
 800b73a:	d413      	bmi.n	800b764 <_printf_i+0x204>
 800b73c:	68e0      	ldr	r0, [r4, #12]
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	4298      	cmp	r0, r3
 800b742:	bfb8      	it	lt
 800b744:	4618      	movlt	r0, r3
 800b746:	e7a3      	b.n	800b690 <_printf_i+0x130>
 800b748:	2301      	movs	r3, #1
 800b74a:	464a      	mov	r2, r9
 800b74c:	4639      	mov	r1, r7
 800b74e:	4630      	mov	r0, r6
 800b750:	47c0      	blx	r8
 800b752:	3001      	adds	r0, #1
 800b754:	d09a      	beq.n	800b68c <_printf_i+0x12c>
 800b756:	3501      	adds	r5, #1
 800b758:	68e3      	ldr	r3, [r4, #12]
 800b75a:	9a03      	ldr	r2, [sp, #12]
 800b75c:	1a9b      	subs	r3, r3, r2
 800b75e:	42ab      	cmp	r3, r5
 800b760:	dcf2      	bgt.n	800b748 <_printf_i+0x1e8>
 800b762:	e7eb      	b.n	800b73c <_printf_i+0x1dc>
 800b764:	2500      	movs	r5, #0
 800b766:	f104 0919 	add.w	r9, r4, #25
 800b76a:	e7f5      	b.n	800b758 <_printf_i+0x1f8>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1ac      	bne.n	800b6ca <_printf_i+0x16a>
 800b770:	7803      	ldrb	r3, [r0, #0]
 800b772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b77a:	e76c      	b.n	800b656 <_printf_i+0xf6>
 800b77c:	0800d248 	.word	0x0800d248
 800b780:	0800d259 	.word	0x0800d259

0800b784 <sniprintf>:
 800b784:	b40c      	push	{r2, r3}
 800b786:	b530      	push	{r4, r5, lr}
 800b788:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <sniprintf+0x64>)
 800b78a:	1e0c      	subs	r4, r1, #0
 800b78c:	b09d      	sub	sp, #116	; 0x74
 800b78e:	681d      	ldr	r5, [r3, #0]
 800b790:	da08      	bge.n	800b7a4 <sniprintf+0x20>
 800b792:	238b      	movs	r3, #139	; 0x8b
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f04f 30ff 	mov.w	r0, #4294967295
 800b79a:	b01d      	add	sp, #116	; 0x74
 800b79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7a0:	b002      	add	sp, #8
 800b7a2:	4770      	bx	lr
 800b7a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b7a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7ac:	bf14      	ite	ne
 800b7ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7b2:	4623      	moveq	r3, r4
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	9307      	str	r3, [sp, #28]
 800b7b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7bc:	9002      	str	r0, [sp, #8]
 800b7be:	9006      	str	r0, [sp, #24]
 800b7c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b7c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7c6:	ab21      	add	r3, sp, #132	; 0x84
 800b7c8:	a902      	add	r1, sp, #8
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	f001 fa5f 	bl	800cc90 <_svfiprintf_r>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	bfbc      	itt	lt
 800b7d6:	238b      	movlt	r3, #139	; 0x8b
 800b7d8:	602b      	strlt	r3, [r5, #0]
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	d0dd      	beq.n	800b79a <sniprintf+0x16>
 800b7de:	9b02      	ldr	r3, [sp, #8]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	701a      	strb	r2, [r3, #0]
 800b7e4:	e7d9      	b.n	800b79a <sniprintf+0x16>
 800b7e6:	bf00      	nop
 800b7e8:	2000068c 	.word	0x2000068c

0800b7ec <quorem>:
 800b7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	6903      	ldr	r3, [r0, #16]
 800b7f2:	690c      	ldr	r4, [r1, #16]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	4680      	mov	r8, r0
 800b7f8:	f2c0 8082 	blt.w	800b900 <quorem+0x114>
 800b7fc:	3c01      	subs	r4, #1
 800b7fe:	f101 0714 	add.w	r7, r1, #20
 800b802:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b806:	f100 0614 	add.w	r6, r0, #20
 800b80a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b80e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b812:	eb06 030c 	add.w	r3, r6, ip
 800b816:	3501      	adds	r5, #1
 800b818:	eb07 090c 	add.w	r9, r7, ip
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	fbb0 f5f5 	udiv	r5, r0, r5
 800b822:	b395      	cbz	r5, 800b88a <quorem+0x9e>
 800b824:	f04f 0a00 	mov.w	sl, #0
 800b828:	4638      	mov	r0, r7
 800b82a:	46b6      	mov	lr, r6
 800b82c:	46d3      	mov	fp, sl
 800b82e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b832:	b293      	uxth	r3, r2
 800b834:	fb05 a303 	mla	r3, r5, r3, sl
 800b838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	ebab 0303 	sub.w	r3, fp, r3
 800b842:	0c12      	lsrs	r2, r2, #16
 800b844:	f8de b000 	ldr.w	fp, [lr]
 800b848:	fb05 a202 	mla	r2, r5, r2, sl
 800b84c:	fa13 f38b 	uxtah	r3, r3, fp
 800b850:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b854:	fa1f fb82 	uxth.w	fp, r2
 800b858:	f8de 2000 	ldr.w	r2, [lr]
 800b85c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b864:	b29b      	uxth	r3, r3
 800b866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b86a:	4581      	cmp	r9, r0
 800b86c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b870:	f84e 3b04 	str.w	r3, [lr], #4
 800b874:	d2db      	bcs.n	800b82e <quorem+0x42>
 800b876:	f856 300c 	ldr.w	r3, [r6, ip]
 800b87a:	b933      	cbnz	r3, 800b88a <quorem+0x9e>
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	3b04      	subs	r3, #4
 800b880:	429e      	cmp	r6, r3
 800b882:	461a      	mov	r2, r3
 800b884:	d330      	bcc.n	800b8e8 <quorem+0xfc>
 800b886:	f8c8 4010 	str.w	r4, [r8, #16]
 800b88a:	4640      	mov	r0, r8
 800b88c:	f001 f82a 	bl	800c8e4 <__mcmp>
 800b890:	2800      	cmp	r0, #0
 800b892:	db25      	blt.n	800b8e0 <quorem+0xf4>
 800b894:	3501      	adds	r5, #1
 800b896:	4630      	mov	r0, r6
 800b898:	f04f 0c00 	mov.w	ip, #0
 800b89c:	f857 2b04 	ldr.w	r2, [r7], #4
 800b8a0:	f8d0 e000 	ldr.w	lr, [r0]
 800b8a4:	b293      	uxth	r3, r2
 800b8a6:	ebac 0303 	sub.w	r3, ip, r3
 800b8aa:	0c12      	lsrs	r2, r2, #16
 800b8ac:	fa13 f38e 	uxtah	r3, r3, lr
 800b8b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8be:	45b9      	cmp	r9, r7
 800b8c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8c4:	f840 3b04 	str.w	r3, [r0], #4
 800b8c8:	d2e8      	bcs.n	800b89c <quorem+0xb0>
 800b8ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b8ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b8d2:	b92a      	cbnz	r2, 800b8e0 <quorem+0xf4>
 800b8d4:	3b04      	subs	r3, #4
 800b8d6:	429e      	cmp	r6, r3
 800b8d8:	461a      	mov	r2, r3
 800b8da:	d30b      	bcc.n	800b8f4 <quorem+0x108>
 800b8dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	b003      	add	sp, #12
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	3b04      	subs	r3, #4
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	d1ca      	bne.n	800b886 <quorem+0x9a>
 800b8f0:	3c01      	subs	r4, #1
 800b8f2:	e7c5      	b.n	800b880 <quorem+0x94>
 800b8f4:	6812      	ldr	r2, [r2, #0]
 800b8f6:	3b04      	subs	r3, #4
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	d1ef      	bne.n	800b8dc <quorem+0xf0>
 800b8fc:	3c01      	subs	r4, #1
 800b8fe:	e7ea      	b.n	800b8d6 <quorem+0xea>
 800b900:	2000      	movs	r0, #0
 800b902:	e7ee      	b.n	800b8e2 <quorem+0xf6>
 800b904:	0000      	movs	r0, r0
	...

0800b908 <_dtoa_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	ec57 6b10 	vmov	r6, r7, d0
 800b910:	b097      	sub	sp, #92	; 0x5c
 800b912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b914:	9106      	str	r1, [sp, #24]
 800b916:	4604      	mov	r4, r0
 800b918:	920b      	str	r2, [sp, #44]	; 0x2c
 800b91a:	9312      	str	r3, [sp, #72]	; 0x48
 800b91c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b920:	e9cd 6700 	strd	r6, r7, [sp]
 800b924:	b93d      	cbnz	r5, 800b936 <_dtoa_r+0x2e>
 800b926:	2010      	movs	r0, #16
 800b928:	f000 fdb4 	bl	800c494 <malloc>
 800b92c:	6260      	str	r0, [r4, #36]	; 0x24
 800b92e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b932:	6005      	str	r5, [r0, #0]
 800b934:	60c5      	str	r5, [r0, #12]
 800b936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b938:	6819      	ldr	r1, [r3, #0]
 800b93a:	b151      	cbz	r1, 800b952 <_dtoa_r+0x4a>
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	604a      	str	r2, [r1, #4]
 800b940:	2301      	movs	r3, #1
 800b942:	4093      	lsls	r3, r2
 800b944:	608b      	str	r3, [r1, #8]
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fdeb 	bl	800c522 <_Bfree>
 800b94c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
 800b952:	1e3b      	subs	r3, r7, #0
 800b954:	bfbb      	ittet	lt
 800b956:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b95a:	9301      	strlt	r3, [sp, #4]
 800b95c:	2300      	movge	r3, #0
 800b95e:	2201      	movlt	r2, #1
 800b960:	bfac      	ite	ge
 800b962:	f8c8 3000 	strge.w	r3, [r8]
 800b966:	f8c8 2000 	strlt.w	r2, [r8]
 800b96a:	4baf      	ldr	r3, [pc, #700]	; (800bc28 <_dtoa_r+0x320>)
 800b96c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b970:	ea33 0308 	bics.w	r3, r3, r8
 800b974:	d114      	bne.n	800b9a0 <_dtoa_r+0x98>
 800b976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b978:	f242 730f 	movw	r3, #9999	; 0x270f
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	b923      	cbnz	r3, 800b98c <_dtoa_r+0x84>
 800b982:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b986:	2800      	cmp	r0, #0
 800b988:	f000 8542 	beq.w	800c410 <_dtoa_r+0xb08>
 800b98c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b98e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bc3c <_dtoa_r+0x334>
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 8544 	beq.w	800c420 <_dtoa_r+0xb18>
 800b998:	f10b 0303 	add.w	r3, fp, #3
 800b99c:	f000 bd3e 	b.w	800c41c <_dtoa_r+0xb14>
 800b9a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f5 f8b4 	bl	8000b18 <__aeabi_dcmpeq>
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	b168      	cbz	r0, 800b9d0 <_dtoa_r+0xc8>
 800b9b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8524 	beq.w	800c40a <_dtoa_r+0xb02>
 800b9c2:	4b9a      	ldr	r3, [pc, #616]	; (800bc2c <_dtoa_r+0x324>)
 800b9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9c6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	f000 bd28 	b.w	800c420 <_dtoa_r+0xb18>
 800b9d0:	aa14      	add	r2, sp, #80	; 0x50
 800b9d2:	a915      	add	r1, sp, #84	; 0x54
 800b9d4:	ec47 6b10 	vmov	d0, r6, r7
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fffa 	bl	800c9d2 <__d2b>
 800b9de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b9e2:	9004      	str	r0, [sp, #16]
 800b9e4:	2d00      	cmp	r5, #0
 800b9e6:	d07c      	beq.n	800bae2 <_dtoa_r+0x1da>
 800b9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b9f0:	46b2      	mov	sl, r6
 800b9f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b9f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4b8b      	ldr	r3, [pc, #556]	; (800bc30 <_dtoa_r+0x328>)
 800ba02:	4650      	mov	r0, sl
 800ba04:	4659      	mov	r1, fp
 800ba06:	f7f4 fc67 	bl	80002d8 <__aeabi_dsub>
 800ba0a:	a381      	add	r3, pc, #516	; (adr r3, 800bc10 <_dtoa_r+0x308>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fe1a 	bl	8000648 <__aeabi_dmul>
 800ba14:	a380      	add	r3, pc, #512	; (adr r3, 800bc18 <_dtoa_r+0x310>)
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	f7f4 fc5f 	bl	80002dc <__adddf3>
 800ba1e:	4606      	mov	r6, r0
 800ba20:	4628      	mov	r0, r5
 800ba22:	460f      	mov	r7, r1
 800ba24:	f7f4 fda6 	bl	8000574 <__aeabi_i2d>
 800ba28:	a37d      	add	r3, pc, #500	; (adr r3, 800bc20 <_dtoa_r+0x318>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f4 fe0b 	bl	8000648 <__aeabi_dmul>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 fc4f 	bl	80002dc <__adddf3>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460f      	mov	r7, r1
 800ba42:	f7f5 f8b1 	bl	8000ba8 <__aeabi_d2iz>
 800ba46:	2200      	movs	r2, #0
 800ba48:	4682      	mov	sl, r0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f5 f86c 	bl	8000b2c <__aeabi_dcmplt>
 800ba54:	b148      	cbz	r0, 800ba6a <_dtoa_r+0x162>
 800ba56:	4650      	mov	r0, sl
 800ba58:	f7f4 fd8c 	bl	8000574 <__aeabi_i2d>
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	463b      	mov	r3, r7
 800ba60:	f7f5 f85a 	bl	8000b18 <__aeabi_dcmpeq>
 800ba64:	b908      	cbnz	r0, 800ba6a <_dtoa_r+0x162>
 800ba66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba6a:	f1ba 0f16 	cmp.w	sl, #22
 800ba6e:	d859      	bhi.n	800bb24 <_dtoa_r+0x21c>
 800ba70:	4970      	ldr	r1, [pc, #448]	; (800bc34 <_dtoa_r+0x32c>)
 800ba72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ba76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba7e:	f7f5 f873 	bl	8000b68 <__aeabi_dcmpgt>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d050      	beq.n	800bb28 <_dtoa_r+0x220>
 800ba86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba90:	1b5d      	subs	r5, r3, r5
 800ba92:	f1b5 0801 	subs.w	r8, r5, #1
 800ba96:	bf49      	itett	mi
 800ba98:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba9c:	2300      	movpl	r3, #0
 800ba9e:	9305      	strmi	r3, [sp, #20]
 800baa0:	f04f 0800 	movmi.w	r8, #0
 800baa4:	bf58      	it	pl
 800baa6:	9305      	strpl	r3, [sp, #20]
 800baa8:	f1ba 0f00 	cmp.w	sl, #0
 800baac:	db3e      	blt.n	800bb2c <_dtoa_r+0x224>
 800baae:	2300      	movs	r3, #0
 800bab0:	44d0      	add	r8, sl
 800bab2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	9b06      	ldr	r3, [sp, #24]
 800baba:	2b09      	cmp	r3, #9
 800babc:	f200 8090 	bhi.w	800bbe0 <_dtoa_r+0x2d8>
 800bac0:	2b05      	cmp	r3, #5
 800bac2:	bfc4      	itt	gt
 800bac4:	3b04      	subgt	r3, #4
 800bac6:	9306      	strgt	r3, [sp, #24]
 800bac8:	9b06      	ldr	r3, [sp, #24]
 800baca:	f1a3 0302 	sub.w	r3, r3, #2
 800bace:	bfcc      	ite	gt
 800bad0:	2500      	movgt	r5, #0
 800bad2:	2501      	movle	r5, #1
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	f200 808f 	bhi.w	800bbf8 <_dtoa_r+0x2f0>
 800bada:	e8df f003 	tbb	[pc, r3]
 800bade:	7f7d      	.short	0x7f7d
 800bae0:	7131      	.short	0x7131
 800bae2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bae6:	441d      	add	r5, r3
 800bae8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800baec:	2820      	cmp	r0, #32
 800baee:	dd13      	ble.n	800bb18 <_dtoa_r+0x210>
 800baf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800baf4:	9b00      	ldr	r3, [sp, #0]
 800baf6:	fa08 f800 	lsl.w	r8, r8, r0
 800bafa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bafe:	fa23 f000 	lsr.w	r0, r3, r0
 800bb02:	ea48 0000 	orr.w	r0, r8, r0
 800bb06:	f7f4 fd25 	bl	8000554 <__aeabi_ui2d>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bb12:	3d01      	subs	r5, #1
 800bb14:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb16:	e772      	b.n	800b9fe <_dtoa_r+0xf6>
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	f1c0 0020 	rsb	r0, r0, #32
 800bb1e:	fa03 f000 	lsl.w	r0, r3, r0
 800bb22:	e7f0      	b.n	800bb06 <_dtoa_r+0x1fe>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e7b1      	b.n	800ba8c <_dtoa_r+0x184>
 800bb28:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb2a:	e7b0      	b.n	800ba8e <_dtoa_r+0x186>
 800bb2c:	9b05      	ldr	r3, [sp, #20]
 800bb2e:	eba3 030a 	sub.w	r3, r3, sl
 800bb32:	9305      	str	r3, [sp, #20]
 800bb34:	f1ca 0300 	rsb	r3, sl, #0
 800bb38:	9307      	str	r3, [sp, #28]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb3e:	e7bb      	b.n	800bab8 <_dtoa_r+0x1b0>
 800bb40:	2301      	movs	r3, #1
 800bb42:	930a      	str	r3, [sp, #40]	; 0x28
 800bb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd59      	ble.n	800bbfe <_dtoa_r+0x2f6>
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	4699      	mov	r9, r3
 800bb4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb50:	2200      	movs	r2, #0
 800bb52:	6072      	str	r2, [r6, #4]
 800bb54:	2204      	movs	r2, #4
 800bb56:	f102 0014 	add.w	r0, r2, #20
 800bb5a:	4298      	cmp	r0, r3
 800bb5c:	6871      	ldr	r1, [r6, #4]
 800bb5e:	d953      	bls.n	800bc08 <_dtoa_r+0x300>
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 fcaa 	bl	800c4ba <_Balloc>
 800bb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb68:	6030      	str	r0, [r6, #0]
 800bb6a:	f1b9 0f0e 	cmp.w	r9, #14
 800bb6e:	f8d3 b000 	ldr.w	fp, [r3]
 800bb72:	f200 80e6 	bhi.w	800bd42 <_dtoa_r+0x43a>
 800bb76:	2d00      	cmp	r5, #0
 800bb78:	f000 80e3 	beq.w	800bd42 <_dtoa_r+0x43a>
 800bb7c:	ed9d 7b00 	vldr	d7, [sp]
 800bb80:	f1ba 0f00 	cmp.w	sl, #0
 800bb84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bb88:	dd74      	ble.n	800bc74 <_dtoa_r+0x36c>
 800bb8a:	4a2a      	ldr	r2, [pc, #168]	; (800bc34 <_dtoa_r+0x32c>)
 800bb8c:	f00a 030f 	and.w	r3, sl, #15
 800bb90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb94:	ed93 7b00 	vldr	d7, [r3]
 800bb98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bb9c:	06f0      	lsls	r0, r6, #27
 800bb9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bba2:	d565      	bpl.n	800bc70 <_dtoa_r+0x368>
 800bba4:	4b24      	ldr	r3, [pc, #144]	; (800bc38 <_dtoa_r+0x330>)
 800bba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbae:	f7f4 fe75 	bl	800089c <__aeabi_ddiv>
 800bbb2:	e9cd 0100 	strd	r0, r1, [sp]
 800bbb6:	f006 060f 	and.w	r6, r6, #15
 800bbba:	2503      	movs	r5, #3
 800bbbc:	4f1e      	ldr	r7, [pc, #120]	; (800bc38 <_dtoa_r+0x330>)
 800bbbe:	e04c      	b.n	800bc5a <_dtoa_r+0x352>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc6:	4453      	add	r3, sl
 800bbc8:	f103 0901 	add.w	r9, r3, #1
 800bbcc:	9302      	str	r3, [sp, #8]
 800bbce:	464b      	mov	r3, r9
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	bfb8      	it	lt
 800bbd4:	2301      	movlt	r3, #1
 800bbd6:	e7ba      	b.n	800bb4e <_dtoa_r+0x246>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	e7b2      	b.n	800bb42 <_dtoa_r+0x23a>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	e7f0      	b.n	800bbc2 <_dtoa_r+0x2ba>
 800bbe0:	2501      	movs	r5, #1
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	9306      	str	r3, [sp, #24]
 800bbe6:	950a      	str	r5, [sp, #40]	; 0x28
 800bbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbec:	9302      	str	r3, [sp, #8]
 800bbee:	4699      	mov	r9, r3
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2312      	movs	r3, #18
 800bbf4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbf6:	e7aa      	b.n	800bb4e <_dtoa_r+0x246>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	930a      	str	r3, [sp, #40]	; 0x28
 800bbfc:	e7f4      	b.n	800bbe8 <_dtoa_r+0x2e0>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	4699      	mov	r9, r3
 800bc04:	461a      	mov	r2, r3
 800bc06:	e7f5      	b.n	800bbf4 <_dtoa_r+0x2ec>
 800bc08:	3101      	adds	r1, #1
 800bc0a:	6071      	str	r1, [r6, #4]
 800bc0c:	0052      	lsls	r2, r2, #1
 800bc0e:	e7a2      	b.n	800bb56 <_dtoa_r+0x24e>
 800bc10:	636f4361 	.word	0x636f4361
 800bc14:	3fd287a7 	.word	0x3fd287a7
 800bc18:	8b60c8b3 	.word	0x8b60c8b3
 800bc1c:	3fc68a28 	.word	0x3fc68a28
 800bc20:	509f79fb 	.word	0x509f79fb
 800bc24:	3fd34413 	.word	0x3fd34413
 800bc28:	7ff00000 	.word	0x7ff00000
 800bc2c:	0800d247 	.word	0x0800d247
 800bc30:	3ff80000 	.word	0x3ff80000
 800bc34:	0800d2a0 	.word	0x0800d2a0
 800bc38:	0800d278 	.word	0x0800d278
 800bc3c:	0800d273 	.word	0x0800d273
 800bc40:	07f1      	lsls	r1, r6, #31
 800bc42:	d508      	bpl.n	800bc56 <_dtoa_r+0x34e>
 800bc44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc4c:	f7f4 fcfc 	bl	8000648 <__aeabi_dmul>
 800bc50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc54:	3501      	adds	r5, #1
 800bc56:	1076      	asrs	r6, r6, #1
 800bc58:	3708      	adds	r7, #8
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d1f0      	bne.n	800bc40 <_dtoa_r+0x338>
 800bc5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc66:	f7f4 fe19 	bl	800089c <__aeabi_ddiv>
 800bc6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc6e:	e01a      	b.n	800bca6 <_dtoa_r+0x39e>
 800bc70:	2502      	movs	r5, #2
 800bc72:	e7a3      	b.n	800bbbc <_dtoa_r+0x2b4>
 800bc74:	f000 80a0 	beq.w	800bdb8 <_dtoa_r+0x4b0>
 800bc78:	f1ca 0600 	rsb	r6, sl, #0
 800bc7c:	4b9f      	ldr	r3, [pc, #636]	; (800befc <_dtoa_r+0x5f4>)
 800bc7e:	4fa0      	ldr	r7, [pc, #640]	; (800bf00 <_dtoa_r+0x5f8>)
 800bc80:	f006 020f 	and.w	r2, r6, #15
 800bc84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc90:	f7f4 fcda 	bl	8000648 <__aeabi_dmul>
 800bc94:	e9cd 0100 	strd	r0, r1, [sp]
 800bc98:	1136      	asrs	r6, r6, #4
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	2502      	movs	r5, #2
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d17f      	bne.n	800bda2 <_dtoa_r+0x49a>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e1      	bne.n	800bc6a <_dtoa_r+0x362>
 800bca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 8087 	beq.w	800bdbc <_dtoa_r+0x4b4>
 800bcae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4b93      	ldr	r3, [pc, #588]	; (800bf04 <_dtoa_r+0x5fc>)
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 ff37 	bl	8000b2c <__aeabi_dcmplt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d07c      	beq.n	800bdbc <_dtoa_r+0x4b4>
 800bcc2:	f1b9 0f00 	cmp.w	r9, #0
 800bcc6:	d079      	beq.n	800bdbc <_dtoa_r+0x4b4>
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	dd35      	ble.n	800bd3a <_dtoa_r+0x432>
 800bcce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bcd2:	9308      	str	r3, [sp, #32]
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4b8b      	ldr	r3, [pc, #556]	; (800bf08 <_dtoa_r+0x600>)
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f7f4 fcb4 	bl	8000648 <__aeabi_dmul>
 800bce0:	e9cd 0100 	strd	r0, r1, [sp]
 800bce4:	9f02      	ldr	r7, [sp, #8]
 800bce6:	3501      	adds	r5, #1
 800bce8:	4628      	mov	r0, r5
 800bcea:	f7f4 fc43 	bl	8000574 <__aeabi_i2d>
 800bcee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf2:	f7f4 fca9 	bl	8000648 <__aeabi_dmul>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	4b84      	ldr	r3, [pc, #528]	; (800bf0c <_dtoa_r+0x604>)
 800bcfa:	f7f4 faef 	bl	80002dc <__adddf3>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bd04:	2f00      	cmp	r7, #0
 800bd06:	d15d      	bne.n	800bdc4 <_dtoa_r+0x4bc>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4b81      	ldr	r3, [pc, #516]	; (800bf10 <_dtoa_r+0x608>)
 800bd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd10:	f7f4 fae2 	bl	80002d8 <__aeabi_dsub>
 800bd14:	462a      	mov	r2, r5
 800bd16:	4633      	mov	r3, r6
 800bd18:	e9cd 0100 	strd	r0, r1, [sp]
 800bd1c:	f7f4 ff24 	bl	8000b68 <__aeabi_dcmpgt>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f040 8288 	bne.w	800c236 <_dtoa_r+0x92e>
 800bd26:	462a      	mov	r2, r5
 800bd28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd30:	f7f4 fefc 	bl	8000b2c <__aeabi_dcmplt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f040 827c 	bne.w	800c232 <_dtoa_r+0x92a>
 800bd3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd3e:	e9cd 2300 	strd	r2, r3, [sp]
 800bd42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f2c0 8150 	blt.w	800bfea <_dtoa_r+0x6e2>
 800bd4a:	f1ba 0f0e 	cmp.w	sl, #14
 800bd4e:	f300 814c 	bgt.w	800bfea <_dtoa_r+0x6e2>
 800bd52:	4b6a      	ldr	r3, [pc, #424]	; (800befc <_dtoa_r+0x5f4>)
 800bd54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd58:	ed93 7b00 	vldr	d7, [r3]
 800bd5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd64:	f280 80d8 	bge.w	800bf18 <_dtoa_r+0x610>
 800bd68:	f1b9 0f00 	cmp.w	r9, #0
 800bd6c:	f300 80d4 	bgt.w	800bf18 <_dtoa_r+0x610>
 800bd70:	f040 825e 	bne.w	800c230 <_dtoa_r+0x928>
 800bd74:	2200      	movs	r2, #0
 800bd76:	4b66      	ldr	r3, [pc, #408]	; (800bf10 <_dtoa_r+0x608>)
 800bd78:	ec51 0b17 	vmov	r0, r1, d7
 800bd7c:	f7f4 fc64 	bl	8000648 <__aeabi_dmul>
 800bd80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd84:	f7f4 fee6 	bl	8000b54 <__aeabi_dcmpge>
 800bd88:	464f      	mov	r7, r9
 800bd8a:	464e      	mov	r6, r9
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f040 8234 	bne.w	800c1fa <_dtoa_r+0x8f2>
 800bd92:	2331      	movs	r3, #49	; 0x31
 800bd94:	f10b 0501 	add.w	r5, fp, #1
 800bd98:	f88b 3000 	strb.w	r3, [fp]
 800bd9c:	f10a 0a01 	add.w	sl, sl, #1
 800bda0:	e22f      	b.n	800c202 <_dtoa_r+0x8fa>
 800bda2:	07f2      	lsls	r2, r6, #31
 800bda4:	d505      	bpl.n	800bdb2 <_dtoa_r+0x4aa>
 800bda6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdaa:	f7f4 fc4d 	bl	8000648 <__aeabi_dmul>
 800bdae:	3501      	adds	r5, #1
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	1076      	asrs	r6, r6, #1
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	e772      	b.n	800bc9e <_dtoa_r+0x396>
 800bdb8:	2502      	movs	r5, #2
 800bdba:	e774      	b.n	800bca6 <_dtoa_r+0x39e>
 800bdbc:	f8cd a020 	str.w	sl, [sp, #32]
 800bdc0:	464f      	mov	r7, r9
 800bdc2:	e791      	b.n	800bce8 <_dtoa_r+0x3e0>
 800bdc4:	4b4d      	ldr	r3, [pc, #308]	; (800befc <_dtoa_r+0x5f4>)
 800bdc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d047      	beq.n	800be64 <_dtoa_r+0x55c>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	2000      	movs	r0, #0
 800bdda:	494e      	ldr	r1, [pc, #312]	; (800bf14 <_dtoa_r+0x60c>)
 800bddc:	f7f4 fd5e 	bl	800089c <__aeabi_ddiv>
 800bde0:	462a      	mov	r2, r5
 800bde2:	4633      	mov	r3, r6
 800bde4:	f7f4 fa78 	bl	80002d8 <__aeabi_dsub>
 800bde8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bdec:	465d      	mov	r5, fp
 800bdee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdf2:	f7f4 fed9 	bl	8000ba8 <__aeabi_d2iz>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	f7f4 fbbc 	bl	8000574 <__aeabi_i2d>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be04:	f7f4 fa68 	bl	80002d8 <__aeabi_dsub>
 800be08:	3630      	adds	r6, #48	; 0x30
 800be0a:	f805 6b01 	strb.w	r6, [r5], #1
 800be0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be12:	e9cd 0100 	strd	r0, r1, [sp]
 800be16:	f7f4 fe89 	bl	8000b2c <__aeabi_dcmplt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d163      	bne.n	800bee6 <_dtoa_r+0x5de>
 800be1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be22:	2000      	movs	r0, #0
 800be24:	4937      	ldr	r1, [pc, #220]	; (800bf04 <_dtoa_r+0x5fc>)
 800be26:	f7f4 fa57 	bl	80002d8 <__aeabi_dsub>
 800be2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be2e:	f7f4 fe7d 	bl	8000b2c <__aeabi_dcmplt>
 800be32:	2800      	cmp	r0, #0
 800be34:	f040 80b7 	bne.w	800bfa6 <_dtoa_r+0x69e>
 800be38:	eba5 030b 	sub.w	r3, r5, fp
 800be3c:	429f      	cmp	r7, r3
 800be3e:	f77f af7c 	ble.w	800bd3a <_dtoa_r+0x432>
 800be42:	2200      	movs	r2, #0
 800be44:	4b30      	ldr	r3, [pc, #192]	; (800bf08 <_dtoa_r+0x600>)
 800be46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be4a:	f7f4 fbfd 	bl	8000648 <__aeabi_dmul>
 800be4e:	2200      	movs	r2, #0
 800be50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be54:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <_dtoa_r+0x600>)
 800be56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be5a:	f7f4 fbf5 	bl	8000648 <__aeabi_dmul>
 800be5e:	e9cd 0100 	strd	r0, r1, [sp]
 800be62:	e7c4      	b.n	800bdee <_dtoa_r+0x4e6>
 800be64:	462a      	mov	r2, r5
 800be66:	4633      	mov	r3, r6
 800be68:	f7f4 fbee 	bl	8000648 <__aeabi_dmul>
 800be6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be70:	eb0b 0507 	add.w	r5, fp, r7
 800be74:	465e      	mov	r6, fp
 800be76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be7a:	f7f4 fe95 	bl	8000ba8 <__aeabi_d2iz>
 800be7e:	4607      	mov	r7, r0
 800be80:	f7f4 fb78 	bl	8000574 <__aeabi_i2d>
 800be84:	3730      	adds	r7, #48	; 0x30
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be8e:	f7f4 fa23 	bl	80002d8 <__aeabi_dsub>
 800be92:	f806 7b01 	strb.w	r7, [r6], #1
 800be96:	42ae      	cmp	r6, r5
 800be98:	e9cd 0100 	strd	r0, r1, [sp]
 800be9c:	f04f 0200 	mov.w	r2, #0
 800bea0:	d126      	bne.n	800bef0 <_dtoa_r+0x5e8>
 800bea2:	4b1c      	ldr	r3, [pc, #112]	; (800bf14 <_dtoa_r+0x60c>)
 800bea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bea8:	f7f4 fa18 	bl	80002dc <__adddf3>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beb4:	f7f4 fe58 	bl	8000b68 <__aeabi_dcmpgt>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d174      	bne.n	800bfa6 <_dtoa_r+0x69e>
 800bebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bec0:	2000      	movs	r0, #0
 800bec2:	4914      	ldr	r1, [pc, #80]	; (800bf14 <_dtoa_r+0x60c>)
 800bec4:	f7f4 fa08 	bl	80002d8 <__aeabi_dsub>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bed0:	f7f4 fe2c 	bl	8000b2c <__aeabi_dcmplt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f43f af30 	beq.w	800bd3a <_dtoa_r+0x432>
 800beda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bede:	2b30      	cmp	r3, #48	; 0x30
 800bee0:	f105 32ff 	add.w	r2, r5, #4294967295
 800bee4:	d002      	beq.n	800beec <_dtoa_r+0x5e4>
 800bee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800beea:	e04a      	b.n	800bf82 <_dtoa_r+0x67a>
 800beec:	4615      	mov	r5, r2
 800beee:	e7f4      	b.n	800beda <_dtoa_r+0x5d2>
 800bef0:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <_dtoa_r+0x600>)
 800bef2:	f7f4 fba9 	bl	8000648 <__aeabi_dmul>
 800bef6:	e9cd 0100 	strd	r0, r1, [sp]
 800befa:	e7bc      	b.n	800be76 <_dtoa_r+0x56e>
 800befc:	0800d2a0 	.word	0x0800d2a0
 800bf00:	0800d278 	.word	0x0800d278
 800bf04:	3ff00000 	.word	0x3ff00000
 800bf08:	40240000 	.word	0x40240000
 800bf0c:	401c0000 	.word	0x401c0000
 800bf10:	40140000 	.word	0x40140000
 800bf14:	3fe00000 	.word	0x3fe00000
 800bf18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf1c:	465d      	mov	r5, fp
 800bf1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf22:	4630      	mov	r0, r6
 800bf24:	4639      	mov	r1, r7
 800bf26:	f7f4 fcb9 	bl	800089c <__aeabi_ddiv>
 800bf2a:	f7f4 fe3d 	bl	8000ba8 <__aeabi_d2iz>
 800bf2e:	4680      	mov	r8, r0
 800bf30:	f7f4 fb20 	bl	8000574 <__aeabi_i2d>
 800bf34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf38:	f7f4 fb86 	bl	8000648 <__aeabi_dmul>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bf48:	f7f4 f9c6 	bl	80002d8 <__aeabi_dsub>
 800bf4c:	f805 6b01 	strb.w	r6, [r5], #1
 800bf50:	eba5 060b 	sub.w	r6, r5, fp
 800bf54:	45b1      	cmp	r9, r6
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	d139      	bne.n	800bfd0 <_dtoa_r+0x6c8>
 800bf5c:	f7f4 f9be 	bl	80002dc <__adddf3>
 800bf60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf64:	4606      	mov	r6, r0
 800bf66:	460f      	mov	r7, r1
 800bf68:	f7f4 fdfe 	bl	8000b68 <__aeabi_dcmpgt>
 800bf6c:	b9c8      	cbnz	r0, 800bfa2 <_dtoa_r+0x69a>
 800bf6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 fdcf 	bl	8000b18 <__aeabi_dcmpeq>
 800bf7a:	b110      	cbz	r0, 800bf82 <_dtoa_r+0x67a>
 800bf7c:	f018 0f01 	tst.w	r8, #1
 800bf80:	d10f      	bne.n	800bfa2 <_dtoa_r+0x69a>
 800bf82:	9904      	ldr	r1, [sp, #16]
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 facc 	bl	800c522 <_Bfree>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf8e:	702b      	strb	r3, [r5, #0]
 800bf90:	f10a 0301 	add.w	r3, sl, #1
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 8241 	beq.w	800c420 <_dtoa_r+0xb18>
 800bf9e:	601d      	str	r5, [r3, #0]
 800bfa0:	e23e      	b.n	800c420 <_dtoa_r+0xb18>
 800bfa2:	f8cd a020 	str.w	sl, [sp, #32]
 800bfa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bfaa:	2a39      	cmp	r2, #57	; 0x39
 800bfac:	f105 33ff 	add.w	r3, r5, #4294967295
 800bfb0:	d108      	bne.n	800bfc4 <_dtoa_r+0x6bc>
 800bfb2:	459b      	cmp	fp, r3
 800bfb4:	d10a      	bne.n	800bfcc <_dtoa_r+0x6c4>
 800bfb6:	9b08      	ldr	r3, [sp, #32]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	9308      	str	r3, [sp, #32]
 800bfbc:	2330      	movs	r3, #48	; 0x30
 800bfbe:	f88b 3000 	strb.w	r3, [fp]
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	781a      	ldrb	r2, [r3, #0]
 800bfc6:	3201      	adds	r2, #1
 800bfc8:	701a      	strb	r2, [r3, #0]
 800bfca:	e78c      	b.n	800bee6 <_dtoa_r+0x5de>
 800bfcc:	461d      	mov	r5, r3
 800bfce:	e7ea      	b.n	800bfa6 <_dtoa_r+0x69e>
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4b9b      	ldr	r3, [pc, #620]	; (800c240 <_dtoa_r+0x938>)
 800bfd4:	f7f4 fb38 	bl	8000648 <__aeabi_dmul>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2300      	movs	r3, #0
 800bfdc:	4606      	mov	r6, r0
 800bfde:	460f      	mov	r7, r1
 800bfe0:	f7f4 fd9a 	bl	8000b18 <__aeabi_dcmpeq>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d09a      	beq.n	800bf1e <_dtoa_r+0x616>
 800bfe8:	e7cb      	b.n	800bf82 <_dtoa_r+0x67a>
 800bfea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	f000 808b 	beq.w	800c108 <_dtoa_r+0x800>
 800bff2:	9a06      	ldr	r2, [sp, #24]
 800bff4:	2a01      	cmp	r2, #1
 800bff6:	dc6e      	bgt.n	800c0d6 <_dtoa_r+0x7ce>
 800bff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bffa:	2a00      	cmp	r2, #0
 800bffc:	d067      	beq.n	800c0ce <_dtoa_r+0x7c6>
 800bffe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c002:	9f07      	ldr	r7, [sp, #28]
 800c004:	9d05      	ldr	r5, [sp, #20]
 800c006:	9a05      	ldr	r2, [sp, #20]
 800c008:	2101      	movs	r1, #1
 800c00a:	441a      	add	r2, r3
 800c00c:	4620      	mov	r0, r4
 800c00e:	9205      	str	r2, [sp, #20]
 800c010:	4498      	add	r8, r3
 800c012:	f000 fb26 	bl	800c662 <__i2b>
 800c016:	4606      	mov	r6, r0
 800c018:	2d00      	cmp	r5, #0
 800c01a:	dd0c      	ble.n	800c036 <_dtoa_r+0x72e>
 800c01c:	f1b8 0f00 	cmp.w	r8, #0
 800c020:	dd09      	ble.n	800c036 <_dtoa_r+0x72e>
 800c022:	4545      	cmp	r5, r8
 800c024:	9a05      	ldr	r2, [sp, #20]
 800c026:	462b      	mov	r3, r5
 800c028:	bfa8      	it	ge
 800c02a:	4643      	movge	r3, r8
 800c02c:	1ad2      	subs	r2, r2, r3
 800c02e:	9205      	str	r2, [sp, #20]
 800c030:	1aed      	subs	r5, r5, r3
 800c032:	eba8 0803 	sub.w	r8, r8, r3
 800c036:	9b07      	ldr	r3, [sp, #28]
 800c038:	b1eb      	cbz	r3, 800c076 <_dtoa_r+0x76e>
 800c03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d067      	beq.n	800c110 <_dtoa_r+0x808>
 800c040:	b18f      	cbz	r7, 800c066 <_dtoa_r+0x75e>
 800c042:	4631      	mov	r1, r6
 800c044:	463a      	mov	r2, r7
 800c046:	4620      	mov	r0, r4
 800c048:	f000 fbaa 	bl	800c7a0 <__pow5mult>
 800c04c:	9a04      	ldr	r2, [sp, #16]
 800c04e:	4601      	mov	r1, r0
 800c050:	4606      	mov	r6, r0
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fb0e 	bl	800c674 <__multiply>
 800c058:	9904      	ldr	r1, [sp, #16]
 800c05a:	9008      	str	r0, [sp, #32]
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fa60 	bl	800c522 <_Bfree>
 800c062:	9b08      	ldr	r3, [sp, #32]
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	9b07      	ldr	r3, [sp, #28]
 800c068:	1bda      	subs	r2, r3, r7
 800c06a:	d004      	beq.n	800c076 <_dtoa_r+0x76e>
 800c06c:	9904      	ldr	r1, [sp, #16]
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fb96 	bl	800c7a0 <__pow5mult>
 800c074:	9004      	str	r0, [sp, #16]
 800c076:	2101      	movs	r1, #1
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 faf2 	bl	800c662 <__i2b>
 800c07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c080:	4607      	mov	r7, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 81d0 	beq.w	800c428 <_dtoa_r+0xb20>
 800c088:	461a      	mov	r2, r3
 800c08a:	4601      	mov	r1, r0
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fb87 	bl	800c7a0 <__pow5mult>
 800c092:	9b06      	ldr	r3, [sp, #24]
 800c094:	2b01      	cmp	r3, #1
 800c096:	4607      	mov	r7, r0
 800c098:	dc40      	bgt.n	800c11c <_dtoa_r+0x814>
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d139      	bne.n	800c114 <_dtoa_r+0x80c>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d136      	bne.n	800c118 <_dtoa_r+0x810>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0b0:	0d1b      	lsrs	r3, r3, #20
 800c0b2:	051b      	lsls	r3, r3, #20
 800c0b4:	b12b      	cbz	r3, 800c0c2 <_dtoa_r+0x7ba>
 800c0b6:	9b05      	ldr	r3, [sp, #20]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	9305      	str	r3, [sp, #20]
 800c0bc:	f108 0801 	add.w	r8, r8, #1
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	9307      	str	r3, [sp, #28]
 800c0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d12a      	bne.n	800c120 <_dtoa_r+0x818>
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	e030      	b.n	800c130 <_dtoa_r+0x828>
 800c0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0d4:	e795      	b.n	800c002 <_dtoa_r+0x6fa>
 800c0d6:	9b07      	ldr	r3, [sp, #28]
 800c0d8:	f109 37ff 	add.w	r7, r9, #4294967295
 800c0dc:	42bb      	cmp	r3, r7
 800c0de:	bfbf      	itttt	lt
 800c0e0:	9b07      	ldrlt	r3, [sp, #28]
 800c0e2:	9707      	strlt	r7, [sp, #28]
 800c0e4:	1afa      	sublt	r2, r7, r3
 800c0e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c0e8:	bfbb      	ittet	lt
 800c0ea:	189b      	addlt	r3, r3, r2
 800c0ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0ee:	1bdf      	subge	r7, r3, r7
 800c0f0:	2700      	movlt	r7, #0
 800c0f2:	f1b9 0f00 	cmp.w	r9, #0
 800c0f6:	bfb5      	itete	lt
 800c0f8:	9b05      	ldrlt	r3, [sp, #20]
 800c0fa:	9d05      	ldrge	r5, [sp, #20]
 800c0fc:	eba3 0509 	sublt.w	r5, r3, r9
 800c100:	464b      	movge	r3, r9
 800c102:	bfb8      	it	lt
 800c104:	2300      	movlt	r3, #0
 800c106:	e77e      	b.n	800c006 <_dtoa_r+0x6fe>
 800c108:	9f07      	ldr	r7, [sp, #28]
 800c10a:	9d05      	ldr	r5, [sp, #20]
 800c10c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c10e:	e783      	b.n	800c018 <_dtoa_r+0x710>
 800c110:	9a07      	ldr	r2, [sp, #28]
 800c112:	e7ab      	b.n	800c06c <_dtoa_r+0x764>
 800c114:	2300      	movs	r3, #0
 800c116:	e7d4      	b.n	800c0c2 <_dtoa_r+0x7ba>
 800c118:	9b00      	ldr	r3, [sp, #0]
 800c11a:	e7d2      	b.n	800c0c2 <_dtoa_r+0x7ba>
 800c11c:	2300      	movs	r3, #0
 800c11e:	9307      	str	r3, [sp, #28]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c126:	6918      	ldr	r0, [r3, #16]
 800c128:	f000 fa4d 	bl	800c5c6 <__hi0bits>
 800c12c:	f1c0 0020 	rsb	r0, r0, #32
 800c130:	4440      	add	r0, r8
 800c132:	f010 001f 	ands.w	r0, r0, #31
 800c136:	d047      	beq.n	800c1c8 <_dtoa_r+0x8c0>
 800c138:	f1c0 0320 	rsb	r3, r0, #32
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	dd3b      	ble.n	800c1b8 <_dtoa_r+0x8b0>
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	f1c0 001c 	rsb	r0, r0, #28
 800c146:	4403      	add	r3, r0
 800c148:	9305      	str	r3, [sp, #20]
 800c14a:	4405      	add	r5, r0
 800c14c:	4480      	add	r8, r0
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd05      	ble.n	800c160 <_dtoa_r+0x858>
 800c154:	461a      	mov	r2, r3
 800c156:	9904      	ldr	r1, [sp, #16]
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 fb6f 	bl	800c83c <__lshift>
 800c15e:	9004      	str	r0, [sp, #16]
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	dd05      	ble.n	800c172 <_dtoa_r+0x86a>
 800c166:	4639      	mov	r1, r7
 800c168:	4642      	mov	r2, r8
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 fb66 	bl	800c83c <__lshift>
 800c170:	4607      	mov	r7, r0
 800c172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c174:	b353      	cbz	r3, 800c1cc <_dtoa_r+0x8c4>
 800c176:	4639      	mov	r1, r7
 800c178:	9804      	ldr	r0, [sp, #16]
 800c17a:	f000 fbb3 	bl	800c8e4 <__mcmp>
 800c17e:	2800      	cmp	r0, #0
 800c180:	da24      	bge.n	800c1cc <_dtoa_r+0x8c4>
 800c182:	2300      	movs	r3, #0
 800c184:	220a      	movs	r2, #10
 800c186:	9904      	ldr	r1, [sp, #16]
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 f9e1 	bl	800c550 <__multadd>
 800c18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c190:	9004      	str	r0, [sp, #16]
 800c192:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 814d 	beq.w	800c436 <_dtoa_r+0xb2e>
 800c19c:	2300      	movs	r3, #0
 800c19e:	4631      	mov	r1, r6
 800c1a0:	220a      	movs	r2, #10
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 f9d4 	bl	800c550 <__multadd>
 800c1a8:	9b02      	ldr	r3, [sp, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	dc4f      	bgt.n	800c250 <_dtoa_r+0x948>
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	dd4c      	ble.n	800c250 <_dtoa_r+0x948>
 800c1b6:	e011      	b.n	800c1dc <_dtoa_r+0x8d4>
 800c1b8:	d0c9      	beq.n	800c14e <_dtoa_r+0x846>
 800c1ba:	9a05      	ldr	r2, [sp, #20]
 800c1bc:	331c      	adds	r3, #28
 800c1be:	441a      	add	r2, r3
 800c1c0:	9205      	str	r2, [sp, #20]
 800c1c2:	441d      	add	r5, r3
 800c1c4:	4498      	add	r8, r3
 800c1c6:	e7c2      	b.n	800c14e <_dtoa_r+0x846>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	e7f6      	b.n	800c1ba <_dtoa_r+0x8b2>
 800c1cc:	f1b9 0f00 	cmp.w	r9, #0
 800c1d0:	dc38      	bgt.n	800c244 <_dtoa_r+0x93c>
 800c1d2:	9b06      	ldr	r3, [sp, #24]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	dd35      	ble.n	800c244 <_dtoa_r+0x93c>
 800c1d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1dc:	9b02      	ldr	r3, [sp, #8]
 800c1de:	b963      	cbnz	r3, 800c1fa <_dtoa_r+0x8f2>
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	2205      	movs	r2, #5
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 f9b3 	bl	800c550 <__multadd>
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	9804      	ldr	r0, [sp, #16]
 800c1f0:	f000 fb78 	bl	800c8e4 <__mcmp>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f73f adcc 	bgt.w	800bd92 <_dtoa_r+0x48a>
 800c1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fc:	465d      	mov	r5, fp
 800c1fe:	ea6f 0a03 	mvn.w	sl, r3
 800c202:	f04f 0900 	mov.w	r9, #0
 800c206:	4639      	mov	r1, r7
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 f98a 	bl	800c522 <_Bfree>
 800c20e:	2e00      	cmp	r6, #0
 800c210:	f43f aeb7 	beq.w	800bf82 <_dtoa_r+0x67a>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	d005      	beq.n	800c226 <_dtoa_r+0x91e>
 800c21a:	45b1      	cmp	r9, r6
 800c21c:	d003      	beq.n	800c226 <_dtoa_r+0x91e>
 800c21e:	4649      	mov	r1, r9
 800c220:	4620      	mov	r0, r4
 800c222:	f000 f97e 	bl	800c522 <_Bfree>
 800c226:	4631      	mov	r1, r6
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 f97a 	bl	800c522 <_Bfree>
 800c22e:	e6a8      	b.n	800bf82 <_dtoa_r+0x67a>
 800c230:	2700      	movs	r7, #0
 800c232:	463e      	mov	r6, r7
 800c234:	e7e1      	b.n	800c1fa <_dtoa_r+0x8f2>
 800c236:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c23a:	463e      	mov	r6, r7
 800c23c:	e5a9      	b.n	800bd92 <_dtoa_r+0x48a>
 800c23e:	bf00      	nop
 800c240:	40240000 	.word	0x40240000
 800c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c246:	f8cd 9008 	str.w	r9, [sp, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 80fa 	beq.w	800c444 <_dtoa_r+0xb3c>
 800c250:	2d00      	cmp	r5, #0
 800c252:	dd05      	ble.n	800c260 <_dtoa_r+0x958>
 800c254:	4631      	mov	r1, r6
 800c256:	462a      	mov	r2, r5
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 faef 	bl	800c83c <__lshift>
 800c25e:	4606      	mov	r6, r0
 800c260:	9b07      	ldr	r3, [sp, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d04c      	beq.n	800c300 <_dtoa_r+0x9f8>
 800c266:	6871      	ldr	r1, [r6, #4]
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 f926 	bl	800c4ba <_Balloc>
 800c26e:	6932      	ldr	r2, [r6, #16]
 800c270:	3202      	adds	r2, #2
 800c272:	4605      	mov	r5, r0
 800c274:	0092      	lsls	r2, r2, #2
 800c276:	f106 010c 	add.w	r1, r6, #12
 800c27a:	300c      	adds	r0, #12
 800c27c:	f000 f912 	bl	800c4a4 <memcpy>
 800c280:	2201      	movs	r2, #1
 800c282:	4629      	mov	r1, r5
 800c284:	4620      	mov	r0, r4
 800c286:	f000 fad9 	bl	800c83c <__lshift>
 800c28a:	9b00      	ldr	r3, [sp, #0]
 800c28c:	f8cd b014 	str.w	fp, [sp, #20]
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	46b1      	mov	r9, r6
 800c296:	9307      	str	r3, [sp, #28]
 800c298:	4606      	mov	r6, r0
 800c29a:	4639      	mov	r1, r7
 800c29c:	9804      	ldr	r0, [sp, #16]
 800c29e:	f7ff faa5 	bl	800b7ec <quorem>
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c2aa:	9804      	ldr	r0, [sp, #16]
 800c2ac:	f000 fb1a 	bl	800c8e4 <__mcmp>
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	9000      	str	r0, [sp, #0]
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fb2e 	bl	800c918 <__mdiff>
 800c2bc:	68c3      	ldr	r3, [r0, #12]
 800c2be:	4602      	mov	r2, r0
 800c2c0:	bb03      	cbnz	r3, 800c304 <_dtoa_r+0x9fc>
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	9008      	str	r0, [sp, #32]
 800c2c6:	9804      	ldr	r0, [sp, #16]
 800c2c8:	f000 fb0c 	bl	800c8e4 <__mcmp>
 800c2cc:	9a08      	ldr	r2, [sp, #32]
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	9308      	str	r3, [sp, #32]
 800c2d6:	f000 f924 	bl	800c522 <_Bfree>
 800c2da:	9b08      	ldr	r3, [sp, #32]
 800c2dc:	b9a3      	cbnz	r3, 800c308 <_dtoa_r+0xa00>
 800c2de:	9a06      	ldr	r2, [sp, #24]
 800c2e0:	b992      	cbnz	r2, 800c308 <_dtoa_r+0xa00>
 800c2e2:	9a07      	ldr	r2, [sp, #28]
 800c2e4:	b982      	cbnz	r2, 800c308 <_dtoa_r+0xa00>
 800c2e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c2ea:	d029      	beq.n	800c340 <_dtoa_r+0xa38>
 800c2ec:	9b00      	ldr	r3, [sp, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dd01      	ble.n	800c2f6 <_dtoa_r+0x9ee>
 800c2f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c2f6:	9b05      	ldr	r3, [sp, #20]
 800c2f8:	1c5d      	adds	r5, r3, #1
 800c2fa:	f883 8000 	strb.w	r8, [r3]
 800c2fe:	e782      	b.n	800c206 <_dtoa_r+0x8fe>
 800c300:	4630      	mov	r0, r6
 800c302:	e7c2      	b.n	800c28a <_dtoa_r+0x982>
 800c304:	2301      	movs	r3, #1
 800c306:	e7e3      	b.n	800c2d0 <_dtoa_r+0x9c8>
 800c308:	9a00      	ldr	r2, [sp, #0]
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	db04      	blt.n	800c318 <_dtoa_r+0xa10>
 800c30e:	d125      	bne.n	800c35c <_dtoa_r+0xa54>
 800c310:	9a06      	ldr	r2, [sp, #24]
 800c312:	bb1a      	cbnz	r2, 800c35c <_dtoa_r+0xa54>
 800c314:	9a07      	ldr	r2, [sp, #28]
 800c316:	bb0a      	cbnz	r2, 800c35c <_dtoa_r+0xa54>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	ddec      	ble.n	800c2f6 <_dtoa_r+0x9ee>
 800c31c:	2201      	movs	r2, #1
 800c31e:	9904      	ldr	r1, [sp, #16]
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fa8b 	bl	800c83c <__lshift>
 800c326:	4639      	mov	r1, r7
 800c328:	9004      	str	r0, [sp, #16]
 800c32a:	f000 fadb 	bl	800c8e4 <__mcmp>
 800c32e:	2800      	cmp	r0, #0
 800c330:	dc03      	bgt.n	800c33a <_dtoa_r+0xa32>
 800c332:	d1e0      	bne.n	800c2f6 <_dtoa_r+0x9ee>
 800c334:	f018 0f01 	tst.w	r8, #1
 800c338:	d0dd      	beq.n	800c2f6 <_dtoa_r+0x9ee>
 800c33a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c33e:	d1d8      	bne.n	800c2f2 <_dtoa_r+0x9ea>
 800c340:	9b05      	ldr	r3, [sp, #20]
 800c342:	9a05      	ldr	r2, [sp, #20]
 800c344:	1c5d      	adds	r5, r3, #1
 800c346:	2339      	movs	r3, #57	; 0x39
 800c348:	7013      	strb	r3, [r2, #0]
 800c34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c34e:	2b39      	cmp	r3, #57	; 0x39
 800c350:	f105 32ff 	add.w	r2, r5, #4294967295
 800c354:	d04f      	beq.n	800c3f6 <_dtoa_r+0xaee>
 800c356:	3301      	adds	r3, #1
 800c358:	7013      	strb	r3, [r2, #0]
 800c35a:	e754      	b.n	800c206 <_dtoa_r+0x8fe>
 800c35c:	9a05      	ldr	r2, [sp, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f102 0501 	add.w	r5, r2, #1
 800c364:	dd06      	ble.n	800c374 <_dtoa_r+0xa6c>
 800c366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c36a:	d0e9      	beq.n	800c340 <_dtoa_r+0xa38>
 800c36c:	f108 0801 	add.w	r8, r8, #1
 800c370:	9b05      	ldr	r3, [sp, #20]
 800c372:	e7c2      	b.n	800c2fa <_dtoa_r+0x9f2>
 800c374:	9a02      	ldr	r2, [sp, #8]
 800c376:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c37a:	eba5 030b 	sub.w	r3, r5, fp
 800c37e:	4293      	cmp	r3, r2
 800c380:	d021      	beq.n	800c3c6 <_dtoa_r+0xabe>
 800c382:	2300      	movs	r3, #0
 800c384:	220a      	movs	r2, #10
 800c386:	9904      	ldr	r1, [sp, #16]
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 f8e1 	bl	800c550 <__multadd>
 800c38e:	45b1      	cmp	r9, r6
 800c390:	9004      	str	r0, [sp, #16]
 800c392:	f04f 0300 	mov.w	r3, #0
 800c396:	f04f 020a 	mov.w	r2, #10
 800c39a:	4649      	mov	r1, r9
 800c39c:	4620      	mov	r0, r4
 800c39e:	d105      	bne.n	800c3ac <_dtoa_r+0xaa4>
 800c3a0:	f000 f8d6 	bl	800c550 <__multadd>
 800c3a4:	4681      	mov	r9, r0
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	9505      	str	r5, [sp, #20]
 800c3aa:	e776      	b.n	800c29a <_dtoa_r+0x992>
 800c3ac:	f000 f8d0 	bl	800c550 <__multadd>
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4681      	mov	r9, r0
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	220a      	movs	r2, #10
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 f8c9 	bl	800c550 <__multadd>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	e7f2      	b.n	800c3a8 <_dtoa_r+0xaa0>
 800c3c2:	f04f 0900 	mov.w	r9, #0
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	9904      	ldr	r1, [sp, #16]
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 fa36 	bl	800c83c <__lshift>
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	9004      	str	r0, [sp, #16]
 800c3d4:	f000 fa86 	bl	800c8e4 <__mcmp>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	dcb6      	bgt.n	800c34a <_dtoa_r+0xa42>
 800c3dc:	d102      	bne.n	800c3e4 <_dtoa_r+0xadc>
 800c3de:	f018 0f01 	tst.w	r8, #1
 800c3e2:	d1b2      	bne.n	800c34a <_dtoa_r+0xa42>
 800c3e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3e8:	2b30      	cmp	r3, #48	; 0x30
 800c3ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800c3ee:	f47f af0a 	bne.w	800c206 <_dtoa_r+0x8fe>
 800c3f2:	4615      	mov	r5, r2
 800c3f4:	e7f6      	b.n	800c3e4 <_dtoa_r+0xadc>
 800c3f6:	4593      	cmp	fp, r2
 800c3f8:	d105      	bne.n	800c406 <_dtoa_r+0xafe>
 800c3fa:	2331      	movs	r3, #49	; 0x31
 800c3fc:	f10a 0a01 	add.w	sl, sl, #1
 800c400:	f88b 3000 	strb.w	r3, [fp]
 800c404:	e6ff      	b.n	800c206 <_dtoa_r+0x8fe>
 800c406:	4615      	mov	r5, r2
 800c408:	e79f      	b.n	800c34a <_dtoa_r+0xa42>
 800c40a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c470 <_dtoa_r+0xb68>
 800c40e:	e007      	b.n	800c420 <_dtoa_r+0xb18>
 800c410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c412:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c474 <_dtoa_r+0xb6c>
 800c416:	b11b      	cbz	r3, 800c420 <_dtoa_r+0xb18>
 800c418:	f10b 0308 	add.w	r3, fp, #8
 800c41c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	4658      	mov	r0, fp
 800c422:	b017      	add	sp, #92	; 0x5c
 800c424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	f77f ae35 	ble.w	800c09a <_dtoa_r+0x792>
 800c430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c432:	9307      	str	r3, [sp, #28]
 800c434:	e649      	b.n	800c0ca <_dtoa_r+0x7c2>
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	dc03      	bgt.n	800c444 <_dtoa_r+0xb3c>
 800c43c:	9b06      	ldr	r3, [sp, #24]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	f73f aecc 	bgt.w	800c1dc <_dtoa_r+0x8d4>
 800c444:	465d      	mov	r5, fp
 800c446:	4639      	mov	r1, r7
 800c448:	9804      	ldr	r0, [sp, #16]
 800c44a:	f7ff f9cf 	bl	800b7ec <quorem>
 800c44e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c452:	f805 8b01 	strb.w	r8, [r5], #1
 800c456:	9a02      	ldr	r2, [sp, #8]
 800c458:	eba5 030b 	sub.w	r3, r5, fp
 800c45c:	429a      	cmp	r2, r3
 800c45e:	ddb0      	ble.n	800c3c2 <_dtoa_r+0xaba>
 800c460:	2300      	movs	r3, #0
 800c462:	220a      	movs	r2, #10
 800c464:	9904      	ldr	r1, [sp, #16]
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f872 	bl	800c550 <__multadd>
 800c46c:	9004      	str	r0, [sp, #16]
 800c46e:	e7ea      	b.n	800c446 <_dtoa_r+0xb3e>
 800c470:	0800d246 	.word	0x0800d246
 800c474:	0800d26a 	.word	0x0800d26a

0800c478 <_localeconv_r>:
 800c478:	4b04      	ldr	r3, [pc, #16]	; (800c48c <_localeconv_r+0x14>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6a18      	ldr	r0, [r3, #32]
 800c47e:	4b04      	ldr	r3, [pc, #16]	; (800c490 <_localeconv_r+0x18>)
 800c480:	2800      	cmp	r0, #0
 800c482:	bf08      	it	eq
 800c484:	4618      	moveq	r0, r3
 800c486:	30f0      	adds	r0, #240	; 0xf0
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	2000068c 	.word	0x2000068c
 800c490:	200006f0 	.word	0x200006f0

0800c494 <malloc>:
 800c494:	4b02      	ldr	r3, [pc, #8]	; (800c4a0 <malloc+0xc>)
 800c496:	4601      	mov	r1, r0
 800c498:	6818      	ldr	r0, [r3, #0]
 800c49a:	f000 bb45 	b.w	800cb28 <_malloc_r>
 800c49e:	bf00      	nop
 800c4a0:	2000068c 	.word	0x2000068c

0800c4a4 <memcpy>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	1e43      	subs	r3, r0, #1
 800c4a8:	440a      	add	r2, r1
 800c4aa:	4291      	cmp	r1, r2
 800c4ac:	d100      	bne.n	800c4b0 <memcpy+0xc>
 800c4ae:	bd10      	pop	{r4, pc}
 800c4b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4b8:	e7f7      	b.n	800c4aa <memcpy+0x6>

0800c4ba <_Balloc>:
 800c4ba:	b570      	push	{r4, r5, r6, lr}
 800c4bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4be:	4604      	mov	r4, r0
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	b93d      	cbnz	r5, 800c4d4 <_Balloc+0x1a>
 800c4c4:	2010      	movs	r0, #16
 800c4c6:	f7ff ffe5 	bl	800c494 <malloc>
 800c4ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c4cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4d0:	6005      	str	r5, [r0, #0]
 800c4d2:	60c5      	str	r5, [r0, #12]
 800c4d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c4d6:	68eb      	ldr	r3, [r5, #12]
 800c4d8:	b183      	cbz	r3, 800c4fc <_Balloc+0x42>
 800c4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4e2:	b9b8      	cbnz	r0, 800c514 <_Balloc+0x5a>
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	fa01 f506 	lsl.w	r5, r1, r6
 800c4ea:	1d6a      	adds	r2, r5, #5
 800c4ec:	0092      	lsls	r2, r2, #2
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 fabe 	bl	800ca70 <_calloc_r>
 800c4f4:	b160      	cbz	r0, 800c510 <_Balloc+0x56>
 800c4f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c4fa:	e00e      	b.n	800c51a <_Balloc+0x60>
 800c4fc:	2221      	movs	r2, #33	; 0x21
 800c4fe:	2104      	movs	r1, #4
 800c500:	4620      	mov	r0, r4
 800c502:	f000 fab5 	bl	800ca70 <_calloc_r>
 800c506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c508:	60e8      	str	r0, [r5, #12]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e4      	bne.n	800c4da <_Balloc+0x20>
 800c510:	2000      	movs	r0, #0
 800c512:	bd70      	pop	{r4, r5, r6, pc}
 800c514:	6802      	ldr	r2, [r0, #0]
 800c516:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c51a:	2300      	movs	r3, #0
 800c51c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c520:	e7f7      	b.n	800c512 <_Balloc+0x58>

0800c522 <_Bfree>:
 800c522:	b570      	push	{r4, r5, r6, lr}
 800c524:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c526:	4606      	mov	r6, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	b93c      	cbnz	r4, 800c53c <_Bfree+0x1a>
 800c52c:	2010      	movs	r0, #16
 800c52e:	f7ff ffb1 	bl	800c494 <malloc>
 800c532:	6270      	str	r0, [r6, #36]	; 0x24
 800c534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c538:	6004      	str	r4, [r0, #0]
 800c53a:	60c4      	str	r4, [r0, #12]
 800c53c:	b13d      	cbz	r5, 800c54e <_Bfree+0x2c>
 800c53e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c540:	686a      	ldr	r2, [r5, #4]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c548:	6029      	str	r1, [r5, #0]
 800c54a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c54e:	bd70      	pop	{r4, r5, r6, pc}

0800c550 <__multadd>:
 800c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c554:	690d      	ldr	r5, [r1, #16]
 800c556:	461f      	mov	r7, r3
 800c558:	4606      	mov	r6, r0
 800c55a:	460c      	mov	r4, r1
 800c55c:	f101 0c14 	add.w	ip, r1, #20
 800c560:	2300      	movs	r3, #0
 800c562:	f8dc 0000 	ldr.w	r0, [ip]
 800c566:	b281      	uxth	r1, r0
 800c568:	fb02 7101 	mla	r1, r2, r1, r7
 800c56c:	0c0f      	lsrs	r7, r1, #16
 800c56e:	0c00      	lsrs	r0, r0, #16
 800c570:	fb02 7000 	mla	r0, r2, r0, r7
 800c574:	b289      	uxth	r1, r1
 800c576:	3301      	adds	r3, #1
 800c578:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c57c:	429d      	cmp	r5, r3
 800c57e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c582:	f84c 1b04 	str.w	r1, [ip], #4
 800c586:	dcec      	bgt.n	800c562 <__multadd+0x12>
 800c588:	b1d7      	cbz	r7, 800c5c0 <__multadd+0x70>
 800c58a:	68a3      	ldr	r3, [r4, #8]
 800c58c:	42ab      	cmp	r3, r5
 800c58e:	dc12      	bgt.n	800c5b6 <__multadd+0x66>
 800c590:	6861      	ldr	r1, [r4, #4]
 800c592:	4630      	mov	r0, r6
 800c594:	3101      	adds	r1, #1
 800c596:	f7ff ff90 	bl	800c4ba <_Balloc>
 800c59a:	6922      	ldr	r2, [r4, #16]
 800c59c:	3202      	adds	r2, #2
 800c59e:	f104 010c 	add.w	r1, r4, #12
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	0092      	lsls	r2, r2, #2
 800c5a6:	300c      	adds	r0, #12
 800c5a8:	f7ff ff7c 	bl	800c4a4 <memcpy>
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7ff ffb7 	bl	800c522 <_Bfree>
 800c5b4:	4644      	mov	r4, r8
 800c5b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5ba:	3501      	adds	r5, #1
 800c5bc:	615f      	str	r7, [r3, #20]
 800c5be:	6125      	str	r5, [r4, #16]
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5c6 <__hi0bits>:
 800c5c6:	0c02      	lsrs	r2, r0, #16
 800c5c8:	0412      	lsls	r2, r2, #16
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	b9b2      	cbnz	r2, 800c5fc <__hi0bits+0x36>
 800c5ce:	0403      	lsls	r3, r0, #16
 800c5d0:	2010      	movs	r0, #16
 800c5d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5d6:	bf04      	itt	eq
 800c5d8:	021b      	lsleq	r3, r3, #8
 800c5da:	3008      	addeq	r0, #8
 800c5dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5e0:	bf04      	itt	eq
 800c5e2:	011b      	lsleq	r3, r3, #4
 800c5e4:	3004      	addeq	r0, #4
 800c5e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c5ea:	bf04      	itt	eq
 800c5ec:	009b      	lsleq	r3, r3, #2
 800c5ee:	3002      	addeq	r0, #2
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	db06      	blt.n	800c602 <__hi0bits+0x3c>
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	d503      	bpl.n	800c600 <__hi0bits+0x3a>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	4770      	bx	lr
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e7e8      	b.n	800c5d2 <__hi0bits+0xc>
 800c600:	2020      	movs	r0, #32
 800c602:	4770      	bx	lr

0800c604 <__lo0bits>:
 800c604:	6803      	ldr	r3, [r0, #0]
 800c606:	f013 0207 	ands.w	r2, r3, #7
 800c60a:	4601      	mov	r1, r0
 800c60c:	d00b      	beq.n	800c626 <__lo0bits+0x22>
 800c60e:	07da      	lsls	r2, r3, #31
 800c610:	d423      	bmi.n	800c65a <__lo0bits+0x56>
 800c612:	0798      	lsls	r0, r3, #30
 800c614:	bf49      	itett	mi
 800c616:	085b      	lsrmi	r3, r3, #1
 800c618:	089b      	lsrpl	r3, r3, #2
 800c61a:	2001      	movmi	r0, #1
 800c61c:	600b      	strmi	r3, [r1, #0]
 800c61e:	bf5c      	itt	pl
 800c620:	600b      	strpl	r3, [r1, #0]
 800c622:	2002      	movpl	r0, #2
 800c624:	4770      	bx	lr
 800c626:	b298      	uxth	r0, r3
 800c628:	b9a8      	cbnz	r0, 800c656 <__lo0bits+0x52>
 800c62a:	0c1b      	lsrs	r3, r3, #16
 800c62c:	2010      	movs	r0, #16
 800c62e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c632:	bf04      	itt	eq
 800c634:	0a1b      	lsreq	r3, r3, #8
 800c636:	3008      	addeq	r0, #8
 800c638:	071a      	lsls	r2, r3, #28
 800c63a:	bf04      	itt	eq
 800c63c:	091b      	lsreq	r3, r3, #4
 800c63e:	3004      	addeq	r0, #4
 800c640:	079a      	lsls	r2, r3, #30
 800c642:	bf04      	itt	eq
 800c644:	089b      	lsreq	r3, r3, #2
 800c646:	3002      	addeq	r0, #2
 800c648:	07da      	lsls	r2, r3, #31
 800c64a:	d402      	bmi.n	800c652 <__lo0bits+0x4e>
 800c64c:	085b      	lsrs	r3, r3, #1
 800c64e:	d006      	beq.n	800c65e <__lo0bits+0x5a>
 800c650:	3001      	adds	r0, #1
 800c652:	600b      	str	r3, [r1, #0]
 800c654:	4770      	bx	lr
 800c656:	4610      	mov	r0, r2
 800c658:	e7e9      	b.n	800c62e <__lo0bits+0x2a>
 800c65a:	2000      	movs	r0, #0
 800c65c:	4770      	bx	lr
 800c65e:	2020      	movs	r0, #32
 800c660:	4770      	bx	lr

0800c662 <__i2b>:
 800c662:	b510      	push	{r4, lr}
 800c664:	460c      	mov	r4, r1
 800c666:	2101      	movs	r1, #1
 800c668:	f7ff ff27 	bl	800c4ba <_Balloc>
 800c66c:	2201      	movs	r2, #1
 800c66e:	6144      	str	r4, [r0, #20]
 800c670:	6102      	str	r2, [r0, #16]
 800c672:	bd10      	pop	{r4, pc}

0800c674 <__multiply>:
 800c674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4614      	mov	r4, r2
 800c67a:	690a      	ldr	r2, [r1, #16]
 800c67c:	6923      	ldr	r3, [r4, #16]
 800c67e:	429a      	cmp	r2, r3
 800c680:	bfb8      	it	lt
 800c682:	460b      	movlt	r3, r1
 800c684:	4688      	mov	r8, r1
 800c686:	bfbc      	itt	lt
 800c688:	46a0      	movlt	r8, r4
 800c68a:	461c      	movlt	r4, r3
 800c68c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c690:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c694:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c69c:	eb07 0609 	add.w	r6, r7, r9
 800c6a0:	42b3      	cmp	r3, r6
 800c6a2:	bfb8      	it	lt
 800c6a4:	3101      	addlt	r1, #1
 800c6a6:	f7ff ff08 	bl	800c4ba <_Balloc>
 800c6aa:	f100 0514 	add.w	r5, r0, #20
 800c6ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4573      	cmp	r3, lr
 800c6b8:	d316      	bcc.n	800c6e8 <__multiply+0x74>
 800c6ba:	f104 0214 	add.w	r2, r4, #20
 800c6be:	f108 0114 	add.w	r1, r8, #20
 800c6c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c6c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	9201      	str	r2, [sp, #4]
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d80c      	bhi.n	800c6ee <__multiply+0x7a>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	dd03      	ble.n	800c6e0 <__multiply+0x6c>
 800c6d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05d      	beq.n	800c79c <__multiply+0x128>
 800c6e0:	6106      	str	r6, [r0, #16]
 800c6e2:	b003      	add	sp, #12
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ec:	e7e3      	b.n	800c6b6 <__multiply+0x42>
 800c6ee:	f8b2 b000 	ldrh.w	fp, [r2]
 800c6f2:	f1bb 0f00 	cmp.w	fp, #0
 800c6f6:	d023      	beq.n	800c740 <__multiply+0xcc>
 800c6f8:	4689      	mov	r9, r1
 800c6fa:	46ac      	mov	ip, r5
 800c6fc:	f04f 0800 	mov.w	r8, #0
 800c700:	f859 4b04 	ldr.w	r4, [r9], #4
 800c704:	f8dc a000 	ldr.w	sl, [ip]
 800c708:	b2a3      	uxth	r3, r4
 800c70a:	fa1f fa8a 	uxth.w	sl, sl
 800c70e:	fb0b a303 	mla	r3, fp, r3, sl
 800c712:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c716:	f8dc 4000 	ldr.w	r4, [ip]
 800c71a:	4443      	add	r3, r8
 800c71c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c720:	fb0b 840a 	mla	r4, fp, sl, r8
 800c724:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c728:	46e2      	mov	sl, ip
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c730:	454f      	cmp	r7, r9
 800c732:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c736:	f84a 3b04 	str.w	r3, [sl], #4
 800c73a:	d82b      	bhi.n	800c794 <__multiply+0x120>
 800c73c:	f8cc 8004 	str.w	r8, [ip, #4]
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c746:	3204      	adds	r2, #4
 800c748:	f1ba 0f00 	cmp.w	sl, #0
 800c74c:	d020      	beq.n	800c790 <__multiply+0x11c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	4689      	mov	r9, r1
 800c752:	46a8      	mov	r8, r5
 800c754:	f04f 0b00 	mov.w	fp, #0
 800c758:	f8b9 c000 	ldrh.w	ip, [r9]
 800c75c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c760:	fb0a 440c 	mla	r4, sl, ip, r4
 800c764:	445c      	add	r4, fp
 800c766:	46c4      	mov	ip, r8
 800c768:	b29b      	uxth	r3, r3
 800c76a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c76e:	f84c 3b04 	str.w	r3, [ip], #4
 800c772:	f859 3b04 	ldr.w	r3, [r9], #4
 800c776:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c77a:	0c1b      	lsrs	r3, r3, #16
 800c77c:	fb0a b303 	mla	r3, sl, r3, fp
 800c780:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c784:	454f      	cmp	r7, r9
 800c786:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c78a:	d805      	bhi.n	800c798 <__multiply+0x124>
 800c78c:	f8c8 3004 	str.w	r3, [r8, #4]
 800c790:	3504      	adds	r5, #4
 800c792:	e79b      	b.n	800c6cc <__multiply+0x58>
 800c794:	46d4      	mov	ip, sl
 800c796:	e7b3      	b.n	800c700 <__multiply+0x8c>
 800c798:	46e0      	mov	r8, ip
 800c79a:	e7dd      	b.n	800c758 <__multiply+0xe4>
 800c79c:	3e01      	subs	r6, #1
 800c79e:	e799      	b.n	800c6d4 <__multiply+0x60>

0800c7a0 <__pow5mult>:
 800c7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a4:	4615      	mov	r5, r2
 800c7a6:	f012 0203 	ands.w	r2, r2, #3
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	d007      	beq.n	800c7c0 <__pow5mult+0x20>
 800c7b0:	3a01      	subs	r2, #1
 800c7b2:	4c21      	ldr	r4, [pc, #132]	; (800c838 <__pow5mult+0x98>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ba:	f7ff fec9 	bl	800c550 <__multadd>
 800c7be:	4607      	mov	r7, r0
 800c7c0:	10ad      	asrs	r5, r5, #2
 800c7c2:	d035      	beq.n	800c830 <__pow5mult+0x90>
 800c7c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7c6:	b93c      	cbnz	r4, 800c7d8 <__pow5mult+0x38>
 800c7c8:	2010      	movs	r0, #16
 800c7ca:	f7ff fe63 	bl	800c494 <malloc>
 800c7ce:	6270      	str	r0, [r6, #36]	; 0x24
 800c7d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7d4:	6004      	str	r4, [r0, #0]
 800c7d6:	60c4      	str	r4, [r0, #12]
 800c7d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7e0:	b94c      	cbnz	r4, 800c7f6 <__pow5mult+0x56>
 800c7e2:	f240 2171 	movw	r1, #625	; 0x271
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ff3b 	bl	800c662 <__i2b>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	6003      	str	r3, [r0, #0]
 800c7f6:	f04f 0800 	mov.w	r8, #0
 800c7fa:	07eb      	lsls	r3, r5, #31
 800c7fc:	d50a      	bpl.n	800c814 <__pow5mult+0x74>
 800c7fe:	4639      	mov	r1, r7
 800c800:	4622      	mov	r2, r4
 800c802:	4630      	mov	r0, r6
 800c804:	f7ff ff36 	bl	800c674 <__multiply>
 800c808:	4639      	mov	r1, r7
 800c80a:	4681      	mov	r9, r0
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7ff fe88 	bl	800c522 <_Bfree>
 800c812:	464f      	mov	r7, r9
 800c814:	106d      	asrs	r5, r5, #1
 800c816:	d00b      	beq.n	800c830 <__pow5mult+0x90>
 800c818:	6820      	ldr	r0, [r4, #0]
 800c81a:	b938      	cbnz	r0, 800c82c <__pow5mult+0x8c>
 800c81c:	4622      	mov	r2, r4
 800c81e:	4621      	mov	r1, r4
 800c820:	4630      	mov	r0, r6
 800c822:	f7ff ff27 	bl	800c674 <__multiply>
 800c826:	6020      	str	r0, [r4, #0]
 800c828:	f8c0 8000 	str.w	r8, [r0]
 800c82c:	4604      	mov	r4, r0
 800c82e:	e7e4      	b.n	800c7fa <__pow5mult+0x5a>
 800c830:	4638      	mov	r0, r7
 800c832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c836:	bf00      	nop
 800c838:	0800d368 	.word	0x0800d368

0800c83c <__lshift>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	460c      	mov	r4, r1
 800c842:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c846:	6923      	ldr	r3, [r4, #16]
 800c848:	6849      	ldr	r1, [r1, #4]
 800c84a:	eb0a 0903 	add.w	r9, sl, r3
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	4607      	mov	r7, r0
 800c852:	4616      	mov	r6, r2
 800c854:	f109 0501 	add.w	r5, r9, #1
 800c858:	42ab      	cmp	r3, r5
 800c85a:	db32      	blt.n	800c8c2 <__lshift+0x86>
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff fe2c 	bl	800c4ba <_Balloc>
 800c862:	2300      	movs	r3, #0
 800c864:	4680      	mov	r8, r0
 800c866:	f100 0114 	add.w	r1, r0, #20
 800c86a:	461a      	mov	r2, r3
 800c86c:	4553      	cmp	r3, sl
 800c86e:	db2b      	blt.n	800c8c8 <__lshift+0x8c>
 800c870:	6920      	ldr	r0, [r4, #16]
 800c872:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c876:	f104 0314 	add.w	r3, r4, #20
 800c87a:	f016 021f 	ands.w	r2, r6, #31
 800c87e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c882:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c886:	d025      	beq.n	800c8d4 <__lshift+0x98>
 800c888:	f1c2 0e20 	rsb	lr, r2, #32
 800c88c:	2000      	movs	r0, #0
 800c88e:	681e      	ldr	r6, [r3, #0]
 800c890:	468a      	mov	sl, r1
 800c892:	4096      	lsls	r6, r2
 800c894:	4330      	orrs	r0, r6
 800c896:	f84a 0b04 	str.w	r0, [sl], #4
 800c89a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c89e:	459c      	cmp	ip, r3
 800c8a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800c8a4:	d814      	bhi.n	800c8d0 <__lshift+0x94>
 800c8a6:	6048      	str	r0, [r1, #4]
 800c8a8:	b108      	cbz	r0, 800c8ae <__lshift+0x72>
 800c8aa:	f109 0502 	add.w	r5, r9, #2
 800c8ae:	3d01      	subs	r5, #1
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	f7ff fe33 	bl	800c522 <_Bfree>
 800c8bc:	4640      	mov	r0, r8
 800c8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8c2:	3101      	adds	r1, #1
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	e7c7      	b.n	800c858 <__lshift+0x1c>
 800c8c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	e7cd      	b.n	800c86c <__lshift+0x30>
 800c8d0:	4651      	mov	r1, sl
 800c8d2:	e7dc      	b.n	800c88e <__lshift+0x52>
 800c8d4:	3904      	subs	r1, #4
 800c8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8da:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8de:	459c      	cmp	ip, r3
 800c8e0:	d8f9      	bhi.n	800c8d6 <__lshift+0x9a>
 800c8e2:	e7e4      	b.n	800c8ae <__lshift+0x72>

0800c8e4 <__mcmp>:
 800c8e4:	6903      	ldr	r3, [r0, #16]
 800c8e6:	690a      	ldr	r2, [r1, #16]
 800c8e8:	1a9b      	subs	r3, r3, r2
 800c8ea:	b530      	push	{r4, r5, lr}
 800c8ec:	d10c      	bne.n	800c908 <__mcmp+0x24>
 800c8ee:	0092      	lsls	r2, r2, #2
 800c8f0:	3014      	adds	r0, #20
 800c8f2:	3114      	adds	r1, #20
 800c8f4:	1884      	adds	r4, r0, r2
 800c8f6:	4411      	add	r1, r2
 800c8f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c900:	4295      	cmp	r5, r2
 800c902:	d003      	beq.n	800c90c <__mcmp+0x28>
 800c904:	d305      	bcc.n	800c912 <__mcmp+0x2e>
 800c906:	2301      	movs	r3, #1
 800c908:	4618      	mov	r0, r3
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	42a0      	cmp	r0, r4
 800c90e:	d3f3      	bcc.n	800c8f8 <__mcmp+0x14>
 800c910:	e7fa      	b.n	800c908 <__mcmp+0x24>
 800c912:	f04f 33ff 	mov.w	r3, #4294967295
 800c916:	e7f7      	b.n	800c908 <__mcmp+0x24>

0800c918 <__mdiff>:
 800c918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91c:	460d      	mov	r5, r1
 800c91e:	4607      	mov	r7, r0
 800c920:	4611      	mov	r1, r2
 800c922:	4628      	mov	r0, r5
 800c924:	4614      	mov	r4, r2
 800c926:	f7ff ffdd 	bl	800c8e4 <__mcmp>
 800c92a:	1e06      	subs	r6, r0, #0
 800c92c:	d108      	bne.n	800c940 <__mdiff+0x28>
 800c92e:	4631      	mov	r1, r6
 800c930:	4638      	mov	r0, r7
 800c932:	f7ff fdc2 	bl	800c4ba <_Balloc>
 800c936:	2301      	movs	r3, #1
 800c938:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	bfa4      	itt	ge
 800c942:	4623      	movge	r3, r4
 800c944:	462c      	movge	r4, r5
 800c946:	4638      	mov	r0, r7
 800c948:	6861      	ldr	r1, [r4, #4]
 800c94a:	bfa6      	itte	ge
 800c94c:	461d      	movge	r5, r3
 800c94e:	2600      	movge	r6, #0
 800c950:	2601      	movlt	r6, #1
 800c952:	f7ff fdb2 	bl	800c4ba <_Balloc>
 800c956:	692b      	ldr	r3, [r5, #16]
 800c958:	60c6      	str	r6, [r0, #12]
 800c95a:	6926      	ldr	r6, [r4, #16]
 800c95c:	f105 0914 	add.w	r9, r5, #20
 800c960:	f104 0214 	add.w	r2, r4, #20
 800c964:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c968:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c96c:	f100 0514 	add.w	r5, r0, #20
 800c970:	f04f 0e00 	mov.w	lr, #0
 800c974:	f852 ab04 	ldr.w	sl, [r2], #4
 800c978:	f859 4b04 	ldr.w	r4, [r9], #4
 800c97c:	fa1e f18a 	uxtah	r1, lr, sl
 800c980:	b2a3      	uxth	r3, r4
 800c982:	1ac9      	subs	r1, r1, r3
 800c984:	0c23      	lsrs	r3, r4, #16
 800c986:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c98a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c98e:	b289      	uxth	r1, r1
 800c990:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c994:	45c8      	cmp	r8, r9
 800c996:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c99a:	4694      	mov	ip, r2
 800c99c:	f845 3b04 	str.w	r3, [r5], #4
 800c9a0:	d8e8      	bhi.n	800c974 <__mdiff+0x5c>
 800c9a2:	45bc      	cmp	ip, r7
 800c9a4:	d304      	bcc.n	800c9b0 <__mdiff+0x98>
 800c9a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c9aa:	b183      	cbz	r3, 800c9ce <__mdiff+0xb6>
 800c9ac:	6106      	str	r6, [r0, #16]
 800c9ae:	e7c5      	b.n	800c93c <__mdiff+0x24>
 800c9b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c9b4:	fa1e f381 	uxtah	r3, lr, r1
 800c9b8:	141a      	asrs	r2, r3, #16
 800c9ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c9c8:	f845 3b04 	str.w	r3, [r5], #4
 800c9cc:	e7e9      	b.n	800c9a2 <__mdiff+0x8a>
 800c9ce:	3e01      	subs	r6, #1
 800c9d0:	e7e9      	b.n	800c9a6 <__mdiff+0x8e>

0800c9d2 <__d2b>:
 800c9d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9d6:	460e      	mov	r6, r1
 800c9d8:	2101      	movs	r1, #1
 800c9da:	ec59 8b10 	vmov	r8, r9, d0
 800c9de:	4615      	mov	r5, r2
 800c9e0:	f7ff fd6b 	bl	800c4ba <_Balloc>
 800c9e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c9e8:	4607      	mov	r7, r0
 800c9ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9ee:	bb34      	cbnz	r4, 800ca3e <__d2b+0x6c>
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	f1b8 0300 	subs.w	r3, r8, #0
 800c9f6:	d027      	beq.n	800ca48 <__d2b+0x76>
 800c9f8:	a802      	add	r0, sp, #8
 800c9fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c9fe:	f7ff fe01 	bl	800c604 <__lo0bits>
 800ca02:	9900      	ldr	r1, [sp, #0]
 800ca04:	b1f0      	cbz	r0, 800ca44 <__d2b+0x72>
 800ca06:	9a01      	ldr	r2, [sp, #4]
 800ca08:	f1c0 0320 	rsb	r3, r0, #32
 800ca0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca10:	430b      	orrs	r3, r1
 800ca12:	40c2      	lsrs	r2, r0
 800ca14:	617b      	str	r3, [r7, #20]
 800ca16:	9201      	str	r2, [sp, #4]
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	61bb      	str	r3, [r7, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bf14      	ite	ne
 800ca20:	2102      	movne	r1, #2
 800ca22:	2101      	moveq	r1, #1
 800ca24:	6139      	str	r1, [r7, #16]
 800ca26:	b1c4      	cbz	r4, 800ca5a <__d2b+0x88>
 800ca28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ca2c:	4404      	add	r4, r0
 800ca2e:	6034      	str	r4, [r6, #0]
 800ca30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca34:	6028      	str	r0, [r5, #0]
 800ca36:	4638      	mov	r0, r7
 800ca38:	b003      	add	sp, #12
 800ca3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca42:	e7d5      	b.n	800c9f0 <__d2b+0x1e>
 800ca44:	6179      	str	r1, [r7, #20]
 800ca46:	e7e7      	b.n	800ca18 <__d2b+0x46>
 800ca48:	a801      	add	r0, sp, #4
 800ca4a:	f7ff fddb 	bl	800c604 <__lo0bits>
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	2101      	movs	r1, #1
 800ca54:	6139      	str	r1, [r7, #16]
 800ca56:	3020      	adds	r0, #32
 800ca58:	e7e5      	b.n	800ca26 <__d2b+0x54>
 800ca5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ca5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca62:	6030      	str	r0, [r6, #0]
 800ca64:	6918      	ldr	r0, [r3, #16]
 800ca66:	f7ff fdae 	bl	800c5c6 <__hi0bits>
 800ca6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ca6e:	e7e1      	b.n	800ca34 <__d2b+0x62>

0800ca70 <_calloc_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	fb02 f401 	mul.w	r4, r2, r1
 800ca76:	4621      	mov	r1, r4
 800ca78:	f000 f856 	bl	800cb28 <_malloc_r>
 800ca7c:	4605      	mov	r5, r0
 800ca7e:	b118      	cbz	r0, 800ca88 <_calloc_r+0x18>
 800ca80:	4622      	mov	r2, r4
 800ca82:	2100      	movs	r1, #0
 800ca84:	f7fe fa1a 	bl	800aebc <memset>
 800ca88:	4628      	mov	r0, r5
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}

0800ca8c <_free_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4605      	mov	r5, r0
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d045      	beq.n	800cb20 <_free_r+0x94>
 800ca94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca98:	1f0c      	subs	r4, r1, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	bfb8      	it	lt
 800ca9e:	18e4      	addlt	r4, r4, r3
 800caa0:	f000 fa29 	bl	800cef6 <__malloc_lock>
 800caa4:	4a1f      	ldr	r2, [pc, #124]	; (800cb24 <_free_r+0x98>)
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	4610      	mov	r0, r2
 800caaa:	b933      	cbnz	r3, 800caba <_free_r+0x2e>
 800caac:	6063      	str	r3, [r4, #4]
 800caae:	6014      	str	r4, [r2, #0]
 800cab0:	4628      	mov	r0, r5
 800cab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab6:	f000 ba1f 	b.w	800cef8 <__malloc_unlock>
 800caba:	42a3      	cmp	r3, r4
 800cabc:	d90c      	bls.n	800cad8 <_free_r+0x4c>
 800cabe:	6821      	ldr	r1, [r4, #0]
 800cac0:	1862      	adds	r2, r4, r1
 800cac2:	4293      	cmp	r3, r2
 800cac4:	bf04      	itt	eq
 800cac6:	681a      	ldreq	r2, [r3, #0]
 800cac8:	685b      	ldreq	r3, [r3, #4]
 800caca:	6063      	str	r3, [r4, #4]
 800cacc:	bf04      	itt	eq
 800cace:	1852      	addeq	r2, r2, r1
 800cad0:	6022      	streq	r2, [r4, #0]
 800cad2:	6004      	str	r4, [r0, #0]
 800cad4:	e7ec      	b.n	800cab0 <_free_r+0x24>
 800cad6:	4613      	mov	r3, r2
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	b10a      	cbz	r2, 800cae0 <_free_r+0x54>
 800cadc:	42a2      	cmp	r2, r4
 800cade:	d9fa      	bls.n	800cad6 <_free_r+0x4a>
 800cae0:	6819      	ldr	r1, [r3, #0]
 800cae2:	1858      	adds	r0, r3, r1
 800cae4:	42a0      	cmp	r0, r4
 800cae6:	d10b      	bne.n	800cb00 <_free_r+0x74>
 800cae8:	6820      	ldr	r0, [r4, #0]
 800caea:	4401      	add	r1, r0
 800caec:	1858      	adds	r0, r3, r1
 800caee:	4282      	cmp	r2, r0
 800caf0:	6019      	str	r1, [r3, #0]
 800caf2:	d1dd      	bne.n	800cab0 <_free_r+0x24>
 800caf4:	6810      	ldr	r0, [r2, #0]
 800caf6:	6852      	ldr	r2, [r2, #4]
 800caf8:	605a      	str	r2, [r3, #4]
 800cafa:	4401      	add	r1, r0
 800cafc:	6019      	str	r1, [r3, #0]
 800cafe:	e7d7      	b.n	800cab0 <_free_r+0x24>
 800cb00:	d902      	bls.n	800cb08 <_free_r+0x7c>
 800cb02:	230c      	movs	r3, #12
 800cb04:	602b      	str	r3, [r5, #0]
 800cb06:	e7d3      	b.n	800cab0 <_free_r+0x24>
 800cb08:	6820      	ldr	r0, [r4, #0]
 800cb0a:	1821      	adds	r1, r4, r0
 800cb0c:	428a      	cmp	r2, r1
 800cb0e:	bf04      	itt	eq
 800cb10:	6811      	ldreq	r1, [r2, #0]
 800cb12:	6852      	ldreq	r2, [r2, #4]
 800cb14:	6062      	str	r2, [r4, #4]
 800cb16:	bf04      	itt	eq
 800cb18:	1809      	addeq	r1, r1, r0
 800cb1a:	6021      	streq	r1, [r4, #0]
 800cb1c:	605c      	str	r4, [r3, #4]
 800cb1e:	e7c7      	b.n	800cab0 <_free_r+0x24>
 800cb20:	bd38      	pop	{r3, r4, r5, pc}
 800cb22:	bf00      	nop
 800cb24:	200008a0 	.word	0x200008a0

0800cb28 <_malloc_r>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	1ccd      	adds	r5, r1, #3
 800cb2c:	f025 0503 	bic.w	r5, r5, #3
 800cb30:	3508      	adds	r5, #8
 800cb32:	2d0c      	cmp	r5, #12
 800cb34:	bf38      	it	cc
 800cb36:	250c      	movcc	r5, #12
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	db01      	blt.n	800cb42 <_malloc_r+0x1a>
 800cb3e:	42a9      	cmp	r1, r5
 800cb40:	d903      	bls.n	800cb4a <_malloc_r+0x22>
 800cb42:	230c      	movs	r3, #12
 800cb44:	6033      	str	r3, [r6, #0]
 800cb46:	2000      	movs	r0, #0
 800cb48:	bd70      	pop	{r4, r5, r6, pc}
 800cb4a:	f000 f9d4 	bl	800cef6 <__malloc_lock>
 800cb4e:	4a21      	ldr	r2, [pc, #132]	; (800cbd4 <_malloc_r+0xac>)
 800cb50:	6814      	ldr	r4, [r2, #0]
 800cb52:	4621      	mov	r1, r4
 800cb54:	b991      	cbnz	r1, 800cb7c <_malloc_r+0x54>
 800cb56:	4c20      	ldr	r4, [pc, #128]	; (800cbd8 <_malloc_r+0xb0>)
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	b91b      	cbnz	r3, 800cb64 <_malloc_r+0x3c>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f000 f98f 	bl	800ce80 <_sbrk_r>
 800cb62:	6020      	str	r0, [r4, #0]
 800cb64:	4629      	mov	r1, r5
 800cb66:	4630      	mov	r0, r6
 800cb68:	f000 f98a 	bl	800ce80 <_sbrk_r>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	d124      	bne.n	800cbba <_malloc_r+0x92>
 800cb70:	230c      	movs	r3, #12
 800cb72:	6033      	str	r3, [r6, #0]
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f9bf 	bl	800cef8 <__malloc_unlock>
 800cb7a:	e7e4      	b.n	800cb46 <_malloc_r+0x1e>
 800cb7c:	680b      	ldr	r3, [r1, #0]
 800cb7e:	1b5b      	subs	r3, r3, r5
 800cb80:	d418      	bmi.n	800cbb4 <_malloc_r+0x8c>
 800cb82:	2b0b      	cmp	r3, #11
 800cb84:	d90f      	bls.n	800cba6 <_malloc_r+0x7e>
 800cb86:	600b      	str	r3, [r1, #0]
 800cb88:	50cd      	str	r5, [r1, r3]
 800cb8a:	18cc      	adds	r4, r1, r3
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f000 f9b3 	bl	800cef8 <__malloc_unlock>
 800cb92:	f104 000b 	add.w	r0, r4, #11
 800cb96:	1d23      	adds	r3, r4, #4
 800cb98:	f020 0007 	bic.w	r0, r0, #7
 800cb9c:	1ac3      	subs	r3, r0, r3
 800cb9e:	d0d3      	beq.n	800cb48 <_malloc_r+0x20>
 800cba0:	425a      	negs	r2, r3
 800cba2:	50e2      	str	r2, [r4, r3]
 800cba4:	e7d0      	b.n	800cb48 <_malloc_r+0x20>
 800cba6:	428c      	cmp	r4, r1
 800cba8:	684b      	ldr	r3, [r1, #4]
 800cbaa:	bf16      	itet	ne
 800cbac:	6063      	strne	r3, [r4, #4]
 800cbae:	6013      	streq	r3, [r2, #0]
 800cbb0:	460c      	movne	r4, r1
 800cbb2:	e7eb      	b.n	800cb8c <_malloc_r+0x64>
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	6849      	ldr	r1, [r1, #4]
 800cbb8:	e7cc      	b.n	800cb54 <_malloc_r+0x2c>
 800cbba:	1cc4      	adds	r4, r0, #3
 800cbbc:	f024 0403 	bic.w	r4, r4, #3
 800cbc0:	42a0      	cmp	r0, r4
 800cbc2:	d005      	beq.n	800cbd0 <_malloc_r+0xa8>
 800cbc4:	1a21      	subs	r1, r4, r0
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f000 f95a 	bl	800ce80 <_sbrk_r>
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d0cf      	beq.n	800cb70 <_malloc_r+0x48>
 800cbd0:	6025      	str	r5, [r4, #0]
 800cbd2:	e7db      	b.n	800cb8c <_malloc_r+0x64>
 800cbd4:	200008a0 	.word	0x200008a0
 800cbd8:	200008a4 	.word	0x200008a4

0800cbdc <__ssputs_r>:
 800cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe0:	688e      	ldr	r6, [r1, #8]
 800cbe2:	429e      	cmp	r6, r3
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	4690      	mov	r8, r2
 800cbea:	4699      	mov	r9, r3
 800cbec:	d837      	bhi.n	800cc5e <__ssputs_r+0x82>
 800cbee:	898a      	ldrh	r2, [r1, #12]
 800cbf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbf4:	d031      	beq.n	800cc5a <__ssputs_r+0x7e>
 800cbf6:	6825      	ldr	r5, [r4, #0]
 800cbf8:	6909      	ldr	r1, [r1, #16]
 800cbfa:	1a6f      	subs	r7, r5, r1
 800cbfc:	6965      	ldr	r5, [r4, #20]
 800cbfe:	2302      	movs	r3, #2
 800cc00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc04:	fb95 f5f3 	sdiv	r5, r5, r3
 800cc08:	f109 0301 	add.w	r3, r9, #1
 800cc0c:	443b      	add	r3, r7
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	bf38      	it	cc
 800cc12:	461d      	movcc	r5, r3
 800cc14:	0553      	lsls	r3, r2, #21
 800cc16:	d530      	bpl.n	800cc7a <__ssputs_r+0x9e>
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7ff ff85 	bl	800cb28 <_malloc_r>
 800cc1e:	4606      	mov	r6, r0
 800cc20:	b950      	cbnz	r0, 800cc38 <__ssputs_r+0x5c>
 800cc22:	230c      	movs	r3, #12
 800cc24:	f8ca 3000 	str.w	r3, [sl]
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc38:	463a      	mov	r2, r7
 800cc3a:	6921      	ldr	r1, [r4, #16]
 800cc3c:	f7ff fc32 	bl	800c4a4 <memcpy>
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	6126      	str	r6, [r4, #16]
 800cc4e:	6165      	str	r5, [r4, #20]
 800cc50:	443e      	add	r6, r7
 800cc52:	1bed      	subs	r5, r5, r7
 800cc54:	6026      	str	r6, [r4, #0]
 800cc56:	60a5      	str	r5, [r4, #8]
 800cc58:	464e      	mov	r6, r9
 800cc5a:	454e      	cmp	r6, r9
 800cc5c:	d900      	bls.n	800cc60 <__ssputs_r+0x84>
 800cc5e:	464e      	mov	r6, r9
 800cc60:	4632      	mov	r2, r6
 800cc62:	4641      	mov	r1, r8
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	f000 f92d 	bl	800cec4 <memmove>
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	1b9b      	subs	r3, r3, r6
 800cc6e:	60a3      	str	r3, [r4, #8]
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	441e      	add	r6, r3
 800cc74:	6026      	str	r6, [r4, #0]
 800cc76:	2000      	movs	r0, #0
 800cc78:	e7dc      	b.n	800cc34 <__ssputs_r+0x58>
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	f000 f93d 	bl	800cefa <_realloc_r>
 800cc80:	4606      	mov	r6, r0
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d1e2      	bne.n	800cc4c <__ssputs_r+0x70>
 800cc86:	6921      	ldr	r1, [r4, #16]
 800cc88:	4650      	mov	r0, sl
 800cc8a:	f7ff feff 	bl	800ca8c <_free_r>
 800cc8e:	e7c8      	b.n	800cc22 <__ssputs_r+0x46>

0800cc90 <_svfiprintf_r>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	461d      	mov	r5, r3
 800cc96:	898b      	ldrh	r3, [r1, #12]
 800cc98:	061f      	lsls	r7, r3, #24
 800cc9a:	b09d      	sub	sp, #116	; 0x74
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4616      	mov	r6, r2
 800cca2:	d50f      	bpl.n	800ccc4 <_svfiprintf_r+0x34>
 800cca4:	690b      	ldr	r3, [r1, #16]
 800cca6:	b96b      	cbnz	r3, 800ccc4 <_svfiprintf_r+0x34>
 800cca8:	2140      	movs	r1, #64	; 0x40
 800ccaa:	f7ff ff3d 	bl	800cb28 <_malloc_r>
 800ccae:	6020      	str	r0, [r4, #0]
 800ccb0:	6120      	str	r0, [r4, #16]
 800ccb2:	b928      	cbnz	r0, 800ccc0 <_svfiprintf_r+0x30>
 800ccb4:	230c      	movs	r3, #12
 800ccb6:	f8c8 3000 	str.w	r3, [r8]
 800ccba:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbe:	e0c8      	b.n	800ce52 <_svfiprintf_r+0x1c2>
 800ccc0:	2340      	movs	r3, #64	; 0x40
 800ccc2:	6163      	str	r3, [r4, #20]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc8:	2320      	movs	r3, #32
 800ccca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccce:	2330      	movs	r3, #48	; 0x30
 800ccd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccd4:	9503      	str	r5, [sp, #12]
 800ccd6:	f04f 0b01 	mov.w	fp, #1
 800ccda:	4637      	mov	r7, r6
 800ccdc:	463d      	mov	r5, r7
 800ccde:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cce2:	b10b      	cbz	r3, 800cce8 <_svfiprintf_r+0x58>
 800cce4:	2b25      	cmp	r3, #37	; 0x25
 800cce6:	d13e      	bne.n	800cd66 <_svfiprintf_r+0xd6>
 800cce8:	ebb7 0a06 	subs.w	sl, r7, r6
 800ccec:	d00b      	beq.n	800cd06 <_svfiprintf_r+0x76>
 800ccee:	4653      	mov	r3, sl
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	f7ff ff71 	bl	800cbdc <__ssputs_r>
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	f000 80a4 	beq.w	800ce48 <_svfiprintf_r+0x1b8>
 800cd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd02:	4453      	add	r3, sl
 800cd04:	9309      	str	r3, [sp, #36]	; 0x24
 800cd06:	783b      	ldrb	r3, [r7, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 809d 	beq.w	800ce48 <_svfiprintf_r+0x1b8>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f04f 32ff 	mov.w	r2, #4294967295
 800cd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd20:	931a      	str	r3, [sp, #104]	; 0x68
 800cd22:	462f      	mov	r7, r5
 800cd24:	2205      	movs	r2, #5
 800cd26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd2a:	4850      	ldr	r0, [pc, #320]	; (800ce6c <_svfiprintf_r+0x1dc>)
 800cd2c:	f7f3 fa80 	bl	8000230 <memchr>
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	b9d0      	cbnz	r0, 800cd6a <_svfiprintf_r+0xda>
 800cd34:	06d9      	lsls	r1, r3, #27
 800cd36:	bf44      	itt	mi
 800cd38:	2220      	movmi	r2, #32
 800cd3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd3e:	071a      	lsls	r2, r3, #28
 800cd40:	bf44      	itt	mi
 800cd42:	222b      	movmi	r2, #43	; 0x2b
 800cd44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd48:	782a      	ldrb	r2, [r5, #0]
 800cd4a:	2a2a      	cmp	r2, #42	; 0x2a
 800cd4c:	d015      	beq.n	800cd7a <_svfiprintf_r+0xea>
 800cd4e:	9a07      	ldr	r2, [sp, #28]
 800cd50:	462f      	mov	r7, r5
 800cd52:	2000      	movs	r0, #0
 800cd54:	250a      	movs	r5, #10
 800cd56:	4639      	mov	r1, r7
 800cd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd5c:	3b30      	subs	r3, #48	; 0x30
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d94d      	bls.n	800cdfe <_svfiprintf_r+0x16e>
 800cd62:	b1b8      	cbz	r0, 800cd94 <_svfiprintf_r+0x104>
 800cd64:	e00f      	b.n	800cd86 <_svfiprintf_r+0xf6>
 800cd66:	462f      	mov	r7, r5
 800cd68:	e7b8      	b.n	800ccdc <_svfiprintf_r+0x4c>
 800cd6a:	4a40      	ldr	r2, [pc, #256]	; (800ce6c <_svfiprintf_r+0x1dc>)
 800cd6c:	1a80      	subs	r0, r0, r2
 800cd6e:	fa0b f000 	lsl.w	r0, fp, r0
 800cd72:	4318      	orrs	r0, r3
 800cd74:	9004      	str	r0, [sp, #16]
 800cd76:	463d      	mov	r5, r7
 800cd78:	e7d3      	b.n	800cd22 <_svfiprintf_r+0x92>
 800cd7a:	9a03      	ldr	r2, [sp, #12]
 800cd7c:	1d11      	adds	r1, r2, #4
 800cd7e:	6812      	ldr	r2, [r2, #0]
 800cd80:	9103      	str	r1, [sp, #12]
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	db01      	blt.n	800cd8a <_svfiprintf_r+0xfa>
 800cd86:	9207      	str	r2, [sp, #28]
 800cd88:	e004      	b.n	800cd94 <_svfiprintf_r+0x104>
 800cd8a:	4252      	negs	r2, r2
 800cd8c:	f043 0302 	orr.w	r3, r3, #2
 800cd90:	9207      	str	r2, [sp, #28]
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	783b      	ldrb	r3, [r7, #0]
 800cd96:	2b2e      	cmp	r3, #46	; 0x2e
 800cd98:	d10c      	bne.n	800cdb4 <_svfiprintf_r+0x124>
 800cd9a:	787b      	ldrb	r3, [r7, #1]
 800cd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd9e:	d133      	bne.n	800ce08 <_svfiprintf_r+0x178>
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	1d1a      	adds	r2, r3, #4
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	9203      	str	r2, [sp, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfb8      	it	lt
 800cdac:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdb0:	3702      	adds	r7, #2
 800cdb2:	9305      	str	r3, [sp, #20]
 800cdb4:	4d2e      	ldr	r5, [pc, #184]	; (800ce70 <_svfiprintf_r+0x1e0>)
 800cdb6:	7839      	ldrb	r1, [r7, #0]
 800cdb8:	2203      	movs	r2, #3
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f7f3 fa38 	bl	8000230 <memchr>
 800cdc0:	b138      	cbz	r0, 800cdd2 <_svfiprintf_r+0x142>
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	1b40      	subs	r0, r0, r5
 800cdc6:	fa03 f000 	lsl.w	r0, r3, r0
 800cdca:	9b04      	ldr	r3, [sp, #16]
 800cdcc:	4303      	orrs	r3, r0
 800cdce:	3701      	adds	r7, #1
 800cdd0:	9304      	str	r3, [sp, #16]
 800cdd2:	7839      	ldrb	r1, [r7, #0]
 800cdd4:	4827      	ldr	r0, [pc, #156]	; (800ce74 <_svfiprintf_r+0x1e4>)
 800cdd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdda:	2206      	movs	r2, #6
 800cddc:	1c7e      	adds	r6, r7, #1
 800cdde:	f7f3 fa27 	bl	8000230 <memchr>
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d038      	beq.n	800ce58 <_svfiprintf_r+0x1c8>
 800cde6:	4b24      	ldr	r3, [pc, #144]	; (800ce78 <_svfiprintf_r+0x1e8>)
 800cde8:	bb13      	cbnz	r3, 800ce30 <_svfiprintf_r+0x1a0>
 800cdea:	9b03      	ldr	r3, [sp, #12]
 800cdec:	3307      	adds	r3, #7
 800cdee:	f023 0307 	bic.w	r3, r3, #7
 800cdf2:	3308      	adds	r3, #8
 800cdf4:	9303      	str	r3, [sp, #12]
 800cdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf8:	444b      	add	r3, r9
 800cdfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfc:	e76d      	b.n	800ccda <_svfiprintf_r+0x4a>
 800cdfe:	fb05 3202 	mla	r2, r5, r2, r3
 800ce02:	2001      	movs	r0, #1
 800ce04:	460f      	mov	r7, r1
 800ce06:	e7a6      	b.n	800cd56 <_svfiprintf_r+0xc6>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	3701      	adds	r7, #1
 800ce0c:	9305      	str	r3, [sp, #20]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	250a      	movs	r5, #10
 800ce12:	4638      	mov	r0, r7
 800ce14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce18:	3a30      	subs	r2, #48	; 0x30
 800ce1a:	2a09      	cmp	r2, #9
 800ce1c:	d903      	bls.n	800ce26 <_svfiprintf_r+0x196>
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0c8      	beq.n	800cdb4 <_svfiprintf_r+0x124>
 800ce22:	9105      	str	r1, [sp, #20]
 800ce24:	e7c6      	b.n	800cdb4 <_svfiprintf_r+0x124>
 800ce26:	fb05 2101 	mla	r1, r5, r1, r2
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	e7f0      	b.n	800ce12 <_svfiprintf_r+0x182>
 800ce30:	ab03      	add	r3, sp, #12
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	4622      	mov	r2, r4
 800ce36:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <_svfiprintf_r+0x1ec>)
 800ce38:	a904      	add	r1, sp, #16
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	f7fe f8da 	bl	800aff4 <_printf_float>
 800ce40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce44:	4681      	mov	r9, r0
 800ce46:	d1d6      	bne.n	800cdf6 <_svfiprintf_r+0x166>
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	065b      	lsls	r3, r3, #25
 800ce4c:	f53f af35 	bmi.w	800ccba <_svfiprintf_r+0x2a>
 800ce50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce52:	b01d      	add	sp, #116	; 0x74
 800ce54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce58:	ab03      	add	r3, sp, #12
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <_svfiprintf_r+0x1ec>)
 800ce60:	a904      	add	r1, sp, #16
 800ce62:	4640      	mov	r0, r8
 800ce64:	f7fe fb7c 	bl	800b560 <_printf_i>
 800ce68:	e7ea      	b.n	800ce40 <_svfiprintf_r+0x1b0>
 800ce6a:	bf00      	nop
 800ce6c:	0800d374 	.word	0x0800d374
 800ce70:	0800d37a 	.word	0x0800d37a
 800ce74:	0800d37e 	.word	0x0800d37e
 800ce78:	0800aff5 	.word	0x0800aff5
 800ce7c:	0800cbdd 	.word	0x0800cbdd

0800ce80 <_sbrk_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4c06      	ldr	r4, [pc, #24]	; (800ce9c <_sbrk_r+0x1c>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4605      	mov	r5, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	f7f7 f8a8 	bl	8003fe0 <_sbrk>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_sbrk_r+0x1a>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_sbrk_r+0x1a>
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	20000f18 	.word	0x20000f18

0800cea0 <__ascii_mbtowc>:
 800cea0:	b082      	sub	sp, #8
 800cea2:	b901      	cbnz	r1, 800cea6 <__ascii_mbtowc+0x6>
 800cea4:	a901      	add	r1, sp, #4
 800cea6:	b142      	cbz	r2, 800ceba <__ascii_mbtowc+0x1a>
 800cea8:	b14b      	cbz	r3, 800cebe <__ascii_mbtowc+0x1e>
 800ceaa:	7813      	ldrb	r3, [r2, #0]
 800ceac:	600b      	str	r3, [r1, #0]
 800ceae:	7812      	ldrb	r2, [r2, #0]
 800ceb0:	1c10      	adds	r0, r2, #0
 800ceb2:	bf18      	it	ne
 800ceb4:	2001      	movne	r0, #1
 800ceb6:	b002      	add	sp, #8
 800ceb8:	4770      	bx	lr
 800ceba:	4610      	mov	r0, r2
 800cebc:	e7fb      	b.n	800ceb6 <__ascii_mbtowc+0x16>
 800cebe:	f06f 0001 	mvn.w	r0, #1
 800cec2:	e7f8      	b.n	800ceb6 <__ascii_mbtowc+0x16>

0800cec4 <memmove>:
 800cec4:	4288      	cmp	r0, r1
 800cec6:	b510      	push	{r4, lr}
 800cec8:	eb01 0302 	add.w	r3, r1, r2
 800cecc:	d807      	bhi.n	800cede <memmove+0x1a>
 800cece:	1e42      	subs	r2, r0, #1
 800ced0:	4299      	cmp	r1, r3
 800ced2:	d00a      	beq.n	800ceea <memmove+0x26>
 800ced4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cedc:	e7f8      	b.n	800ced0 <memmove+0xc>
 800cede:	4283      	cmp	r3, r0
 800cee0:	d9f5      	bls.n	800cece <memmove+0xa>
 800cee2:	1881      	adds	r1, r0, r2
 800cee4:	1ad2      	subs	r2, r2, r3
 800cee6:	42d3      	cmn	r3, r2
 800cee8:	d100      	bne.n	800ceec <memmove+0x28>
 800ceea:	bd10      	pop	{r4, pc}
 800ceec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cef0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cef4:	e7f7      	b.n	800cee6 <memmove+0x22>

0800cef6 <__malloc_lock>:
 800cef6:	4770      	bx	lr

0800cef8 <__malloc_unlock>:
 800cef8:	4770      	bx	lr

0800cefa <_realloc_r>:
 800cefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefc:	4607      	mov	r7, r0
 800cefe:	4614      	mov	r4, r2
 800cf00:	460e      	mov	r6, r1
 800cf02:	b921      	cbnz	r1, 800cf0e <_realloc_r+0x14>
 800cf04:	4611      	mov	r1, r2
 800cf06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cf0a:	f7ff be0d 	b.w	800cb28 <_malloc_r>
 800cf0e:	b922      	cbnz	r2, 800cf1a <_realloc_r+0x20>
 800cf10:	f7ff fdbc 	bl	800ca8c <_free_r>
 800cf14:	4625      	mov	r5, r4
 800cf16:	4628      	mov	r0, r5
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf1a:	f000 f821 	bl	800cf60 <_malloc_usable_size_r>
 800cf1e:	42a0      	cmp	r0, r4
 800cf20:	d20f      	bcs.n	800cf42 <_realloc_r+0x48>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff fdff 	bl	800cb28 <_malloc_r>
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d0f2      	beq.n	800cf16 <_realloc_r+0x1c>
 800cf30:	4631      	mov	r1, r6
 800cf32:	4622      	mov	r2, r4
 800cf34:	f7ff fab6 	bl	800c4a4 <memcpy>
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7ff fda6 	bl	800ca8c <_free_r>
 800cf40:	e7e9      	b.n	800cf16 <_realloc_r+0x1c>
 800cf42:	4635      	mov	r5, r6
 800cf44:	e7e7      	b.n	800cf16 <_realloc_r+0x1c>

0800cf46 <__ascii_wctomb>:
 800cf46:	b149      	cbz	r1, 800cf5c <__ascii_wctomb+0x16>
 800cf48:	2aff      	cmp	r2, #255	; 0xff
 800cf4a:	bf85      	ittet	hi
 800cf4c:	238a      	movhi	r3, #138	; 0x8a
 800cf4e:	6003      	strhi	r3, [r0, #0]
 800cf50:	700a      	strbls	r2, [r1, #0]
 800cf52:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf56:	bf98      	it	ls
 800cf58:	2001      	movls	r0, #1
 800cf5a:	4770      	bx	lr
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	4770      	bx	lr

0800cf60 <_malloc_usable_size_r>:
 800cf60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf64:	1f18      	subs	r0, r3, #4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfbc      	itt	lt
 800cf6a:	580b      	ldrlt	r3, [r1, r0]
 800cf6c:	18c0      	addlt	r0, r0, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_init>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	bf00      	nop
 800cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf76:	bc08      	pop	{r3}
 800cf78:	469e      	mov	lr, r3
 800cf7a:	4770      	bx	lr

0800cf7c <_fini>:
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7e:	bf00      	nop
 800cf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf82:	bc08      	pop	{r3}
 800cf84:	469e      	mov	lr, r3
 800cf86:	4770      	bx	lr
